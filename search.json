[{"title":"CSS - span 和 p 標籤的換行或者不換行問題","url":"/css/20201011/1571711147/","content":"<h2 id=\"相關參數介紹\"><a href=\"#相關參數介紹\" class=\"headerlink\" title=\"相關參數介紹\"></a>相關參數介紹</h2><h3 id=\"word-break\"><a href=\"#word-break\" class=\"headerlink\" title=\"word-break\"></a>word-break</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break\" target=\"_blank\" rel=\"noopener\">MDN-word-break</a><br>決定單字内的斷句</p><ul><li>noraml: 默認, 使用瀏覽器的換行規則。</li><li>break-all: 對於非 CJK(中/日/韓/文)文本，可在任意字符間斷行，中英文夾雜時不斷行。</li><li>break-word: CJK(中/日/韓)英文夾雜時，CJK 與 英文會斷行。</li><li>keep-all: CJK 文本不斷行。 Non-CJK 文本表现同 normal 設定<br>參考程式碼，可以自己玩玩看<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  span &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    word-break: break-all;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>測試測試測試測試測試測試測試testtesttesttesttesttest<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>測試測試測試測試測試測試測試測試測試測試測試測試測試測試<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id=\"white-space\"><a href=\"#white-space\" class=\"headerlink\" title=\"white-space\"></a>white-space</h3><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/CSS/white-space\" target=\"_blank\" rel=\"noopener\">MDN-white-space</a><br>決定如何處理元素內的空白字元</p><ul><li>normal: 連續的空白字元會被合併(collapse)，換行字元被視為空白字元。換行只在被文字空間限制時發生。</li><li>pre: 連續的空白字元都會被保留。換行在有換行字元以及 <code>&lt;br&gt;</code> 時發生。</li><li>nowrap: 對待空白字元的方式跟 normal 一樣，且會強制不換行。</li><li>pre-wrap: 連續的空白字元都會被保留。換行會在換行字元、有 <code>&lt;br&gt;</code> 元素以及被文字空間限制時發生。</li><li>pre-line: 連續的空白字元會被合併(collapse)。換行在換行字元、 <code>&lt;br&gt;</code>以及被文字空間限制時發生。</li><li>inherit: 從父元素繼承 <code>white-space</code> 這個属性。</li></ul><h3 id=\"overflow-wrap-word-wrap\"><a href=\"#overflow-wrap-word-wrap\" class=\"headerlink\" title=\"overflow-wrap(word-wrap)\"></a>overflow-wrap(word-wrap)</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-wrap\" target=\"_blank\" rel=\"noopener\">MDN-overflow-wrap</a><br>說明當一个不能被分開的字符串太長而不能填充其容器時，為防止其溢出，瀏覽器是否允許這樣的單字中斷换行。</p><ul><li>normal: 行只能在正常的單字斷點處中斷。（例如兩個單字之間的空格）。</li><li>break-word: 在實在找不到換行點的时候, 就斷單字換行。</li></ul><h3 id=\"text-overflow\"><a href=\"#text-overflow\" class=\"headerlink\" title=\"text-overflow\"></a>text-overflow</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-overflow\" target=\"_blank\" rel=\"noopener\">MDN-text-overflow</a><br>決定不換行時，超出文本該如何顯示</p><ul><li>clip: 默認值，直接截斷文本。</li><li>ellipsis: 顯示省略符號来代表被修剪的文本。</li><li>string: 使用给定的字符串來代表被修剪的文本。</li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://blog.csdn.net/icewst/article/details/105209423\" target=\"_blank\" rel=\"noopener\">css里面的span和p标签的换行或者不换行问题</a></p>","categories":["CSS"],"tags":["CSS"]},{"title":"關於部落格起源","url":"/learnexp/20190831/730755815/","content":"<h2 id=\"為什麼要寫部落格\"><a href=\"#為什麼要寫部落格\" class=\"headerlink\" title=\"為什麼要寫部落格\"></a>為什麼要寫部落格</h2><h3 id=\"工程師也不是什麼都記得起來的\"><a href=\"#工程師也不是什麼都記得起來的\" class=\"headerlink\" title=\"工程師也不是什麼都記得起來的\"></a>工程師也不是什麼都記得起來的</h3><a id=\"more\"></a><p>身為工程師難免在開發上會遇到一些坑，這時不外乎尋求 Google 、 Stack overflow 、 知乎等等的解答，而後將這些全部都加進書籤內以防之後需要。當時間一長，這些資訊將變得越來越難分類及尋找，於是乎想架一個自己的 blog 不但可以有效率的收藏文章也不怕原始檔不見，再者，我更希望能在前端這條路上幫助更多的小夥伴們，畢竟我也是這樣走過來的!!</p><h2 id=\"寫部落格-VS-沒寫部落格-求職差很大\"><a href=\"#寫部落格-VS-沒寫部落格-求職差很大\" class=\"headerlink\" title=\"寫部落格 VS 沒寫部落格 求職差很大\"></a>寫部落格 VS 沒寫部落格 求職差很大</h2><h3 id=\"工程師天生就把溝通能力的技能點給忘了\"><a href=\"#工程師天生就把溝通能力的技能點給忘了\" class=\"headerlink\" title=\"工程師天生就把溝通能力的技能點給忘了\"></a>工程師天生就把溝通能力的技能點給忘了</h3><p>還記得在求學階段，老師總是告訴我們：當你在教別人時往往學到更多，意味著當我們在教他人時，其時就是將這些資訊在腦中消化成容易讓人理解、溝通的方式。一個開發團隊不單單只會有工程師，還有 PM、SA、設計甚至更多，在專案開發時，如果工程師把程式碼掏出來呈現在他們眼前，人家不翻桌才怪!!畢竟這根本不能溝通阿。<br>雖然出社會沒有人會讓你一對一教導，但我們依舊可以透過寫部落格來達到相同目的。在求職階段，同時兩位工程師來面試，一位有寫部落格，一位則沒有，若你是一位主管，我想你會錄用誰也不用說了，這就是現實。多一份能力多一份機會!</p>","categories":["學習經驗"],"tags":["學習經驗"]},{"title":"axios - 解決 x-www-form-urlencoded 傳輸格式問題","url":"/axios/20200308/2321882403/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原先跟公司後端搭配都是使用 <code>JSON</code> 格式在傳遞資料，直到有一支 <code>API</code> 跟 <code>Google OAuth</code> 牽扯上。總而言之，就是要使用 <code>form-urlencoded</code> 來傳資料，也就會產生 <code>axios</code> 格式轉換問題哩。</p><h2 id=\"JSON-與-x-www-form-urlencoded\"><a href=\"#JSON-與-x-www-form-urlencoded\" class=\"headerlink\" title=\"JSON 與 x-www-form-urlencoded\"></a>JSON 與 x-www-form-urlencoded</h2><p><code>form-urlencoded</code> 在表單傳輸是很常見的操作方式，通過 <code>&amp;</code> 、 <code>=</code> 傳遞資訊。<br><code>JSON</code> 是以陣列物件的形式在傳遞資訊</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// x-www-form-urlencoded</span></span><br><span class=\"line\">Content-Type: application/json;charset=utf<span class=\"number\">-8</span></span><br><span class=\"line\">firstName=Jeremy&amp;lastName=&amp;age=<span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON</span></span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded;charset=utf<span class=\"number\">-8</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name : <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age : <span class=\"number\">25</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"使用套件\"><a href=\"#使用套件\" class=\"headerlink\" title=\"使用套件\"></a>使用套件</h2><p>套件名稱 : qs (A querystring parser with nesting support)<br><a href=\"https://github.com/ljharb/qs\" target=\"_blank\" rel=\"noopener\">qs github</a><br><a href=\"https://www.npmjs.com/package/qs\" target=\"_blank\" rel=\"noopener\">qs npm</a><br>輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install qs -S</span><br></pre></td></tr></table></figure><h2 id=\"引入套件\"><a href=\"#引入套件\" class=\"headerlink\" title=\"引入套件\"></a>引入套件</h2><p>官方有提供 <code>require()</code> 引入方式，可參考官網作法。<br>本次是以 <code>Vue Cli</code> 來引入套件，在 <code>app.js</code> 加入以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.Qs = Qs;</span><br></pre></td></tr></table></figure><h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><p>如果 <code>json</code> 格式只有一層的話就直接轉換即可，若是有多層的情況，則需要先使用 <code>JSON.stringify()</code> 轉換後再使用 <code>qs</code> 轉換。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj_1 = &#123;</span><br><span class=\"line\">  firstName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  lastName: <span class=\"string\">'Su'</span>,</span><br><span class=\"line\">  age: <span class=\"string\">'25'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* 正確方式 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.Qs.stringify(obj_1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj_2 = &#123;</span><br><span class=\"line\">  person: &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Su'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'25'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* 正確方式 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.Qs.stringify(&#123;</span><br><span class=\"line\">    person: <span class=\"built_in\">JSON</span>.stringify(obj_2.person),</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure><p>轉換好之後，就可以使用 <code>axios</code> 送出這份 <code>x-www-form-urlencoded</code> 的資料囉。</p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>我想應該會越來越多 API 都使用 <code>json</code> 格式傳送資料，<code>form-urlencoded</code> 格式也許會漸漸式微吧。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://jeremysu0131.github.io/axios-%E8%99%95%E7%90%86-x-www-form-urlencoded-%E6%A0%BC%E5%BC%8F%E5%95%8F%E9%A1%8C/\" target=\"_blank\" rel=\"noopener\">[axios] 處理 x-www-form-urlencoded 格式問題</a></p>","categories":["Axios"],"tags":["JavaScript","axios","w3HexSchool"]},{"title":"axios - 管理 API","url":"/axios/20200315/611398329/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不知道大家有沒有遇過 <code>API</code> 已經設定好了，某天被告知 <code>domain</code> 有調整過，或是某些 <code>get</code>、<code>post</code>方法需要多加參數等設定，導致必須不斷地找專案內 <code>call API</code> 的地方，有時還會遺漏幾處產生嚴重問題呢。以下教各位如何高效率的管理專案內的 <code>API</code>，即便是小專案也該如此。</p><h2 id=\"官方-axios-範例\"><a href=\"#官方-axios-範例\" class=\"headerlink\" title=\"官方 axios 範例\"></a>官方 axios 範例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>; <span class=\"comment\">/* 依照你的專案形式引入套件 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET */</span></span><br><span class=\"line\">axios.get(<span class=\"string\">'http://api/user'</span>)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* POST */</span></span><br><span class=\"line\">axios.post(<span class=\"string\">'http://api/user'</span>, &#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Su'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>這種作法相當直覺，針對特定功能去 <code>call api</code>，確實可以這樣寫，但當專案 <code>API</code> 超過 10 支、20支甚至更多時，這樣子的寫法就變得不好管理，如果 <code>domain</code>、<code>參數</code>一改，就得一個一個找出來慢慢改，真的很麻煩。</p><h2 id=\"高效率管理-API-方法\"><a href=\"#高效率管理-API-方法\" class=\"headerlink\" title=\"高效率管理 API 方法\"></a>高效率管理 API 方法</h2><p>使用官方的 <code>axios.create</code> 方法，可以利用此方法來新增一個 <code>axios</code> 實體。<br>首先建立 <code>api.js</code>，之後 <code>API</code> 都在這支檔案內管理。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 購物車 API */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> CartRequest = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">`<span class=\"subst\">$&#123;process.env.API_PATH&#125;</span>/shopping/cart`</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'api-caller'</span>: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-version'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-position'</span>: <span class=\"string\">'JH'</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-language'</span>: <span class=\"string\">'zh-TW'</span>,</span><br><span class=\"line\">    cart_serial: &#123;</span><br><span class=\"line\">      toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;localStorage.getItem(<span class=\"string\">'cart_serial'</span>)&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Authorization: &#123;</span><br><span class=\"line\">      toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`bearer <span class=\"subst\">$&#123;localStorage.getItem(<span class=\"string\">'loginToken'</span>)&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 折價券 API */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> CouponRequest = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">`<span class=\"subst\">$&#123;process.env.API_PATH&#125;</span>/shopping/coupon`</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'api-caller'</span>: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-version'</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-position'</span>: <span class=\"string\">'JH'</span>,</span><br><span class=\"line\">    <span class=\"string\">'api-language'</span>: <span class=\"string\">'zh-TW'</span>,</span><br><span class=\"line\">    cart_serial: &#123;</span><br><span class=\"line\">      toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;localStorage.getItem(<span class=\"string\">'cart_serial'</span>)&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Authorization: &#123;</span><br><span class=\"line\">      toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`bearer <span class=\"subst\">$&#123;localStorage.getItem(<span class=\"string\">'loginToken'</span>)&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 登入 API */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> loginRequest = axios.create(&#123;</span><br><span class=\"line\">  baseURL: <span class=\"string\">`<span class=\"subst\">$&#123;process.env.API_PATH&#125;</span>/login`</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 購物車 API */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_CART_SERIAL = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> CartRequest.put(<span class=\"string\">'/init'</span>, data);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_CART = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> CartRequest.get();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_ADDTO_CART = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> CartRequest.post(<span class=\"string\">'/item'</span>, data);</span><br><span class=\"line\"><span class=\"comment\">/* delete 的參數必須先用 Object 包起來 */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_DELETE_CART = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> CartRequest.delete(<span class=\"string\">'/item'</span>, &#123; data &#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 登入 API */</span></span><br><span class=\"line\"><span class=\"comment\">/* post 必須要有第一個 url 參數，都不寫的話就是指向 API 的根目錄 */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_LOGIN = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> loginRequest.post(<span class=\"string\">''</span>, data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 折價券 API */</span></span><br><span class=\"line\"><span class=\"comment\">/* 還可使用傳入參數來變更 API 路徑 */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> API_USE_COUPON = <span class=\"function\">(<span class=\"params\">couponCode</span>) =&gt;</span> CouponRequest.post(<span class=\"string\">`/<span class=\"subst\">$&#123;couponCode&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>要使用的話，直接 <code>import</code> 這支 <code>api.js</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 只 import 要使用的 API */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; API_LOGIN, API_USE_COUPON, API_DELETE_CART &#125; <span class=\"keyword\">from</span> <span class=\"string\">'api.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> login() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loginForm = &#123;</span><br><span class=\"line\">    UserName: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">    Password: <span class=\"string\">'xxx'</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = vm.Qs.stringify(loginForm);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> API_LOGIN(data);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> use_shopping_coupon(context, couponCode) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> API_USE_COUPON(couponCode);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> delete_cart(context, id) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> product = &#123;</span><br><span class=\"line\">    is_need_cart_data: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    product_spec_serial: id,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    API_DELETE_CART(product);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><h2 id=\"高效率的管理優點\"><a href=\"#高效率的管理優點\" class=\"headerlink\" title=\"高效率的管理優點\"></a>高效率的管理優點</h2><ol><li>可以確保所有的 <code>API</code> 都是同一進入點，即便在各元件 <code>js</code> 內呼叫 <code>API</code>，最後只需管理一支 <code>api</code>，對於日後 <code>API</code> 有需要要修改會方便很多。</li><li>使用 <code>axios.create</code> 產生出的實體可以透過變數的方式給予新的 <code>API 名稱</code>，透過團隊命名規範來清楚知道 <code>API</code> 的功能。</li><li>除了可以減少超長的 <code>api url</code>，還能大幅減少程式碼的撰寫，並搭配 <code>axios</code> 回傳的 <code>Promise</code> 特性，可以使用 <code>Async / Await</code> 減少 <code>.then()</code> 的寫法，提高程式碼可讀性</li></ol><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/i-am-mike/%E4%BD%BF%E7%94%A8axios%E6%99%82%E4%BD%A0%E7%9A%84api%E9%83%BD%E6%80%8E%E9%BA%BC%E7%AE%A1%E7%90%86-557d88365619\" target=\"_blank\" rel=\"noopener\">使用Axios你的API都怎麼管理？</a></p>","categories":["Axios"],"tags":["JavaScript","axios","w3HexSchool"]},{"title":"CSS - 解析網頁尺寸單位","url":"/css/20210310/745685236/","content":"<h2 id=\"尺寸種類\"><a href=\"#尺寸種類\" class=\"headerlink\" title=\"尺寸種類\"></a>尺寸種類</h2><h3 id=\"PX\"><a href=\"#PX\" class=\"headerlink\" title=\"PX\"></a>PX</h3><p>絕對單位，是一般最常見的網頁設計單位，他是「絕對數值」，也就是設定多少就顯示多少。</p><h3 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h3><p>相對單位，每個 <strong><font color=\"#FF0000\">子元素</font></strong> 透過「倍數」乘以 <strong><font color=\"#FF0000\">父元素</font></strong> 的 px 值。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  html &#123;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap1</span> &#123;</span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap2</span> &#123;</span></span><br><span class=\"line\">    font-size: 2em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap3</span> &#123;</span></span><br><span class=\"line\">    font-size: 3em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap1\"</span>&gt;</span></span><br><span class=\"line\">  wrap1 =&gt; 20px</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap2\"</span>&gt;</span></span><br><span class=\"line\">    wrap2 =&gt; 40px</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap3\"</span>&gt;</span></span><br><span class=\"line\">      wrap3 =&gt; 120px</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"rem\"><a href=\"#rem\" class=\"headerlink\" title=\"rem\"></a>rem</h3><p>相對單位，每個 <strong><font color=\"#FF0000\">元素</font></strong> 透過「倍數」乘以 <strong><font color=\"#FF0000\">根元素(html)</font></strong> 的 px 值</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  html &#123;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap1</span> &#123;</span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap2</span> &#123;</span></span><br><span class=\"line\">    font-size: 2rem;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap3</span> &#123;</span></span><br><span class=\"line\">    font-size: 1rem;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap1\"</span>&gt;</span></span><br><span class=\"line\">  wrap1 =&gt; 20px</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap2\"</span>&gt;</span></span><br><span class=\"line\">    wrap2 =&gt; 32px</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap3\"</span>&gt;</span></span><br><span class=\"line\">      wrap3 =&gt; 16px</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比 %\"></a>百分比 %</h3><p>每個 <strong><font color=\"#FF0000\">子元素</font></strong> 透過「百分比」乘以 <strong><font color=\"#FF0000\">父元素</font></strong> 的 px 值。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  html &#123;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap1</span> &#123;</span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap2</span> &#123;</span></span><br><span class=\"line\">    font-size: 110%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.wrap3</span> &#123;</span></span><br><span class=\"line\">    font-size: 120%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap1\"</span>&gt;</span></span><br><span class=\"line\">  wrap1 =&gt; 20px</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap2\"</span>&gt;</span></span><br><span class=\"line\">    wrap2 =&gt; 22px</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap3\"</span>&gt;</span></span><br><span class=\"line\">      wrap3 =&gt; 26.4px = wrap2 * 120%</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.oxxostudio.tw/articles/201809/css-font-size.html\" target=\"_blank\" rel=\"noopener\">一次搞懂 CSS 字體單位：px、em、rem 和 %</a><br><a href=\"https://medium.com/neptune-coding/html-css%E6%95%99%E5%AD%B8-15-px-em-rem-12a1ba517c12\" target=\"_blank\" rel=\"noopener\">PX、EM、REM</a><br><a href=\"https://medium.com/@5min.reading/css-%E7%B6%B2%E9%A0%81%E7%94%A8%E7%9A%84%E5%B0%BA%E5%AF%B8%E5%96%AE%E4%BD%8D-px-%E8%B7%9F-em-%E6%80%8E%E9%BA%BC%E5%8D%80%E5%88%86%E5%91%80-%E7%AD%89%E7%AD%89-%E9%82%84%E6%9C%89%E4%B8%80%E5%80%8B-rem-4ee3911f1307\" target=\"_blank\" rel=\"noopener\">網頁用的尺寸單位:PX 跟 EM 怎麼區分呀？等等，還有一個 REM…</a><br><a href=\"https://kknews.cc/zh-tw/code/q5v2azr.html\" target=\"_blank\" rel=\"noopener\">對於頁面適配，你應該使用px還是rem</a></p>","categories":["CSS"],"tags":["CSS"]},{"title":"CSS - 模組化的方法 OOCSS、SMASS、BEM","url":"/css/20191121/2160383962/","content":"<h2 id=\"OOCSS-Object-Oriented-CSS\"><a href=\"#OOCSS-Object-Oriented-CSS\" class=\"headerlink\" title=\"OOCSS (Object Oriented CSS)\"></a>OOCSS (Object Oriented CSS)</h2><ul><li>分離結構與樣式 Separation of Structure from Skin : 結構像是元素的大小，樣式則是顏色等。</li><li>分離 HTML 與 CSS : 盡量將可共用的樣式提取到單獨的 Class 以供使用。<br>範例:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button class&#x3D;&quot;btn btn-small btn-primary&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>來說明一下這當中使用了那些 OOCSS 概念</li><li><code>btn</code> : 規範按鈕的預設樣式。</li><li><code>btn-small</code> : 規範按鈕的大小，ex: <code>btn-large</code>、<code>btn-medium</code>。</li><li><code>btn-primary</code> : 規範按鈕的顏色，ex: <code>btn-default</code>、<code>btn-danger</code>。</li></ul><p>優點: 架構清楚，可經由組合而產生多種樣式結構，使程式碼更精簡與方便管理<br>缺點: 有可能會出現為了區別樣式而產生不意懂得 Class 名稱，ex: <code>mt-3</code>。<br>個人觀點: 身為 Bootstrap 用戶，真心覺得這種寫法挺棒的。</p><h2 id=\"SMACSS\"><a href=\"#SMACSS\" class=\"headerlink\" title=\"SMACSS\"></a>SMACSS</h2><ul><li>結構分類 : Base、Layout、Module、State、Theme。</li><li>明明規則 : id 與 class 受限制使用、並使用 dash 分隔。<br>結構:</li><li>Base : 網頁基本樣式，包含 CSS Reset。</li><li>Layout : 將網頁切割成不同區塊，若區塊是唯一則使用 id 命名 ex: <code>#tab</code>;重複區塊則使用 class 命名 ex: <code>.tab-default</code>。</li><li>Module : 同 Layout ，但屬於區塊的內容，只能使用 class 命名，並使用 dash 分隔 ex: <code>.tab-item</code>。</li><li>State : 描述元件狀態，ex: <code>.tab-item active</code>。</li><li>Theme : 針對主視覺而定義的樣式，ex: <code>.tab-dark</code>。</li></ul><p>優點: 與 OOCSS 相同<br>缺點: 結構分類存在模糊界線，就跟我上面自己寫了啥都不是很明白ww<br>個人觀點: 除了 Base 、 Layout 以外，使用機率幾乎為 0。</p><h2 id=\"BEM\"><a href=\"#BEM\" class=\"headerlink\" title=\"BEM\"></a>BEM</h2><p>BEM 是以區塊(Block)、元素(Element)、修飾子(Modifier)來命名<br>範例:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ul class&#x3D;&quot;menu&quot;&gt;</span><br><span class=\"line\">  &lt;li class&#x3D;&quot;menu__item&quot;&gt;首頁&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li class&#x3D;&quot;menu__item menu__item--active&quot;&gt;關於我&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li class&#x3D;&quot;menu__item&quot;&gt;分類&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ul><li>Element 使用雙底線分隔，Modifier 使用雙 dash 做分隔</li><li><code>menu</code> 是區塊(Block)</li><li><code>menu__item</code> 是 <code>menu</code> 的元件</li><li><code>menu__item--active</code> 是 <code>menu__item</code> 的其中一種狀態</li></ul><p>優點: 以元件觀念進行開發，具有重用性。沒有 SMACSS 複雜的部分，同時有著 OOCSS 清楚的架構。<br>缺點: 命名方式過長<br>個人觀點: BEM 相對其他兩種方式更清楚簡單，並且達到模組化的效果。</p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>任何一種模式都有其優缺點以及適用的時機，並且可以互相搭配使用，達到 1+1 &gt; 2 的效果，後續的維護也更方便，畢竟一開始如果沒有一定規範，那麼之後就是一直還技術債啦www</p>","categories":["CSS"],"tags":["CSS"]},{"title":"CSS - 響應式圖片在 Retina 螢幕使用技巧","url":"/css/20201123/1810131633/","content":"<h2 id=\"檢查裝置\"><a href=\"#檢查裝置\" class=\"headerlink\" title=\"檢查裝置\"></a>檢查裝置</h2><p>一般螢幕下 <code>pixel-ratio</code> 是 1，也就代表在桌機顯示 1920*1080 圖片是不會失真的。然而 Retina 顯示器的 <code>pixel-ratio</code> 卻不一樣，有的是 2(iphoe5 ~ iphoe8)，也有些新出的是 3(iphoe6+ ~ iphoeX) 以上這些類型的裝置，在設計師出圖時就必須要同時給出適當倍率的圖片。<br>ex:<br>舉例 pixel-ratio = 2<br>在 iphoe5 ~ iphoe8 上就要顯示 2x 倍的圖<br>在 iphoe6+ ~ iphoeX 上就要顯示 3x 倍的圖<br>那要如何知道各裝置的 <code>舉例 pixel-ratio</code> 呢?</p><p>使用以下連結，可查詢目前裝置的 <code>CSS pixel-ratio</code> 跟 <code>Resolution (dpi)</code><br><a href=\"https://www.mydevice.io/\" target=\"_blank\" rel=\"noopener\">mydevice</a><br>並且搭配 CSS 的 <code>min-device-pixel-ratio</code> 即可依據裝置的 <code>pixel-ratio</code> 來決定到底該套用哪一張倍率的圖片。</p><h2 id=\"Retina-Display-Media-Query\"><a href=\"#Retina-Display-Media-Query\" class=\"headerlink\" title=\"Retina Display Media Query\"></a>Retina Display Media Query</h2><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span></span><br><span class=\"line\">(-webkit-min-device-pixel-ratio: 2),</span><br><span class=\"line\">(<span class=\"selector-tag\">min-resolution</span>: 192<span class=\"selector-tag\">dpi</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Retina-specific stuff here */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h2><p>注意:在出 2x、3x 圖時，不是將 1 倍圖片等比放大 2 倍或是 3 倍，而是反過來用 3 倍圖片等比縮小成 2 倍 跟 1倍圖片，這樣才不會產出模糊圖片</p><ul><li>375px up : 在手機時該圖片最大尺寸的 1x、2x、3x圖</li><li>768px up : 在平板時該圖片最大尺寸的 1x、2x、3x圖</li><li>1200px up : 在筆電、桌機時該圖片最大尺寸的 1x、2x 圖</li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/nick-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%AD%B8%E7%BF%92%E8%A8%98/%E7%B6%B2%E9%A0%81%E5%89%8D%E7%AB%AF%E5%84%AA%E5%8C%96-%E9%9F%BF%E6%87%89%E5%BC%8F%E5%9C%96%E7%89%87%E5%AF%A6%E4%BD%9C-3ab1989b9d9c\" target=\"_blank\" rel=\"noopener\">網頁前端優化 — 響應式圖片實作</a><br><a href=\"https://pjchender.github.io/2018/06/09/css-media-query/\" target=\"_blank\" rel=\"noopener\">[CSS] Media Query</a><br><a href=\"https://css-tricks.com/snippets/css/retina-display-media-query/\" target=\"_blank\" rel=\"noopener\">Retina Display Media Query</a><br><a href=\"https://www.mydevice.io/\" target=\"_blank\" rel=\"noopener\">Mydevice.io</a></p>","categories":["CSS"],"tags":["CSS","Image","RWD","圖片最佳化","Media Query"]},{"title":"Express.js - 基礎介紹","url":"/nodejs/20191226/3088328217/","content":"<h2 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h2><p><a href=\"https://zh.wikipedia.org/wiki/Express.js\" target=\"_blank\" rel=\"noopener\">Express.js Wiki</a><br>Express.js 是以 Node.js 為核心開發的一套 Web 應用框架，具有非常簡潔又靈活的特性，可以快速製作出 RESTful API，有利於軟體開發的效率。</p><h2 id=\"Hello-Express\"><a href=\"#Hello-Express\" class=\"headerlink\" title=\"Hello Express\"></a>Hello Express</h2><p>首先要創建 preject 資料夾，開啟 <code>CMD</code>、<code>終端機</code> 進入資料夾目錄。<br>接著，執行 <code>npm init</code>，一路 enter 下去即可，此時會生成 <code>package.json</code>。<br>最後輸入 <code>npm i express -S</code>。<br>進入資料夾，新增 <code>app.js</code> 並參考以下範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'測試'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>最後輸入 <code>node app.js</code> 並開啟 <code>localhost:3000</code> ， 如果有看到 <code>Hello Express</code> 的話就代表成功囉!!</p><h2 id=\"細節講解\"><a href=\"#細節講解\" class=\"headerlink\" title=\"細節講解\"></a>細節講解</h2><ul><li>引入 <code>Express</code>，並宣告變數以便之後使用。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br></pre></td></tr></table></figure></li><li>設定路由<br>使用 <code>get()</code> API 則可以新增一個路由，並當使用者進入此路由後回傳頁面內容給使用者。<br>路由規則:<br><code>/</code>: 代表網址列上輸入 <code>localhost:3000</code><br><code>/test</code>: test 可以更換成自定義名稱，並對應該路徑 <code>localhost:3000/test</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'測試'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li><li>開啟 Web Server<br>使用 <code>listen()</code> API 指定 <code>port</code> 號<br>註: <code>process.env.PORT</code> 當部屬到正式主機時，由於主機商會有自定的 <code>port</code> 號，所以必須加這行，如果沒有的話才用自定義的 <code>port</code> 號<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li></ul>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"什麼!! overflow:hidden 清除浮動","url":"/css/20191106/1889954039/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>overflow: hidden</code> 常用在隱藏溢出的範圍，也就是子層高度大於複層高度時會將超出部分隱藏。<br>然而，還有另一個用途就是清除包含子層的浮動。</p><h2 id=\"示範模板\"><a href=\"#示範模板\" class=\"headerlink\" title=\"示範模板\"></a>示範模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;child1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;child2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  width: 300px; </span><br><span class=\"line\">  background: #ddd; </span><br><span class=\"line\">  border: 1px solid;</span><br><span class=\"line\">  &#x2F;* overflow: hidden; &#x2F;&#x2F; 試著加入看看，浮動是否會被清除 *&#x2F;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">.child1 &#123; </span><br><span class=\"line\">  width: 100px; </span><br><span class=\"line\">  height: 100px; </span><br><span class=\"line\">  background-color: pink;</span><br><span class=\"line\">  float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child2 &#123; </span><br><span class=\"line\">  width: 200px; </span><br><span class=\"line\">  height: 50px; </span><br><span class=\"line\">  background-color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>你沒看錯，當加了 <code>overflow: hidden</code> 後，竟然就可以清除浮動了!!這是什麼妖術阿?!</p><h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><h3 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h3><p>BFC (Block Formatting Context)，塊格式化上下文<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"noopener\">MDN-塊格式上下文</a><br>塊格式化上下文包含創建它的元素內部的所有內容<br>浮動定位和清除浮動時只會應用於同一個 BFC 內的元素。浮動不會影響其它 BFC 中元素的佈局，而清除浮動只能清除同一 BFC 中在它前面的元素的浮動。<br>外邊距折疊（Margin collapsing）也只會發生在屬於同一 BFC 的塊級元素之間。</p><h3 id=\"BFC-創建\"><a href=\"#BFC-創建\" class=\"headerlink\" title=\"BFC 創建\"></a>BFC 創建</h3><p>請參考 MDN 文件即可，這裡就不多寫了。</p><h3 id=\"應用\"><a href=\"#應用\" class=\"headerlink\" title=\"應用\"></a>應用</h3><p>EX: 遇到需要清除浮動的情況產生時，這時候只需要建立一個 BFC 來包含這個浮動即可。<br>EX: 外邊距塌陷，此情況常發生在同一層的兩元素都有 margin-top 及 margin-bottom 時，當重疊時則會發現 margin 發生合併，這是因為兩者都同屬一個 BFC，此時只需要將兩者分離，並創建一個 BFC，就可以解決問題囉!!</p>","categories":["CSS"],"tags":["CSS"]},{"title":"Express.js - AJAX 傳送表單資料","url":"/nodejs/20191227/1695463650/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>傳統的表單與 AJAX 的差異可以先自行 Google ，本篇就不再多贅述了。</p><h2 id=\"建立-template\"><a href=\"#建立-template\" class=\"headerlink\" title=\"建立 template\"></a>建立 template</h2><p>在 <code>views</code> 資料夾內新增 <code>search.ejs</code> 檔，並參考以下範例程式碼:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% layout(&#39;layout&#39;) %&gt;</span><br><span class=\"line\">  &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;inputText&quot; id&#x3D;&quot;inputText&quot; placeholder&#x3D;&quot;請輸入內容&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;submit&quot; id&#x3D;&quot;inputSend&quot; value&#x3D;&quot;送出&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;form&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;&#x2F;all.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>這裡的 <code>action</code> 跟 <code>method</code> 都不需要填入呦!!</p><h2 id=\"建立-js-檔\"><a href=\"#建立-js-檔\" class=\"headerlink\" title=\"建立 js 檔\"></a>建立 js 檔</h2><p>在 <code>public</code> 資料夾內新增 <code>all.js</code> 檔，並參考以下範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#inputText'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> send = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#inputSend'</span>);</span><br><span class=\"line\">  send.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = content.value;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">'post'</span>, <span class=\"string\">'/search'</span>); <span class=\"comment\">// 搭配 app.js 中的 post 路由</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// x-www-form-urlencoded 格式</span></span><br><span class=\"line\">    <span class=\"comment\">// xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');</span></span><br><span class=\"line\">    <span class=\"comment\">// const data = `content=$&#123;value&#125;`;</span></span><br><span class=\"line\">    <span class=\"comment\">// xhr.send(data);</span></span><br><span class=\"line\">    <span class=\"comment\">// xhr.onload = function() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   console.log(JSON.parse(xhr.responseText));</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// json 格式</span></span><br><span class=\"line\">    xhr.setRequestHeader(<span class=\"string\">'Content-type'</span>, <span class=\"string\">'application/json'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"built_in\">JSON</span>.stringify(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        content: value,</span><br><span class=\"line\">        list: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    xhr.send(data);</span><br><span class=\"line\">    xhr.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.parse(xhr.responseText));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>在 <code>app.js</code> 中加入以下設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加靜態檔案路徑 ， 必須寫在最前面</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 EJS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> engine = <span class=\"built_in\">require</span>(<span class=\"string\">'ejs-locals'</span>);</span><br><span class=\"line\">app.engine(<span class=\"string\">'ejs'</span>, engine);</span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./views'</span>);</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">  extended: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    documentTitle: <span class=\"string\">'首頁'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/search'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'search'</span>, &#123;</span><br><span class=\"line\">    documentTitle: <span class=\"string\">'搜尋頁'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重點 post</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/search'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'post'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  res.send(req.body);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure><p><code>app.post()</code> 中的 <code>/search</code> 就是前端所稱的 <code>API</code>。</p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>開啟 <code>Web Server</code> 後輸入 <code>http://localhost:3000/search</code>，在欄位輸入內容送出，此時觀察瀏覽器是否有 loading 狀態以及 <code>CMD</code>、<code>終端機</code> 有沒有收到資料，如果有收到資料，但瀏覽器沒有跳轉，代表已經透過 Ajax 達成非同步傳輸資料囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - Cookie 和 session 應用","url":"/nodejs/20200102/1975209315/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有一點必須先釐清，這邊所以提 Session 是屬於後端儲存庫，而跟 HTML5 中的 SessionStorage 是不一樣的。</p><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>通常用來儲存登入狀態、造訪紀錄，具備以下特性:</p><ul><li>儲存空間僅 4KB</li><li>由 key/value 寫入</li><li>可設置失效時間</li><li>可在 Client 與 Server 讀取與寫入資料</li><li>每次請求都會攜帶在 header 中，保存過多數據會導致效能降低</li></ul><h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>Session 具備以下特點:</p><ul><li>儲存在 Server 的暫存資料，可依開發設計放置記憶體或是資料庫上</li><li>Session 可以在 Cookie 中儲存 UUID，並透過驗證確認使用者</li></ul><h2 id=\"Cookie-語法\"><a href=\"#Cookie-語法\" class=\"headerlink\" title=\"Cookie 語法\"></a>Cookie 語法</h2><ul><li>寫入 Cookie 資料</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">'myname=Cloud'</span>;</span><br></pre></td></tr></table></figure><p>即可在 <code>application</code> 的 Cookie 看見資料<br><img src=\"https://i.imgur.com/IJ2OyJg.png\" alt=\"Cookie\"></p><ul><li>設定失效時間<br><code>expires</code>: 失效時間，使用 GMT 時間<br><code>path</code>: 路徑</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">document.cookie &#x3D; &#39;myname&#x3D;Cloud;expires&#x3D;Thu, 02 Jan 2020 07:48:48 GMT;path&#x3D;&#x2F;&#39;;</span><br></pre></td></tr></table></figure><p>但我們總不能去手寫時間吧，有方法可以直接取得</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toGMTString();</span><br></pre></td></tr></table></figure><ul><li>設定時效<br><code>max-age</code>: 幾秒後 Cookie 失效，如此一來就不用設定時間</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = <span class=\"string\">'myname=Cloud;max-age=10;path=/'</span>;</span><br></pre></td></tr></table></figure><h2 id=\"Express-Cookie\"><a href=\"#Express-Cookie\" class=\"headerlink\" title=\"Express Cookie\"></a>Express Cookie</h2><p>可以使用 <code>req.cookies</code> 取得 cookie 資料，當然如果要回傳並寫入 cookie 也是可行的。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'myname'</span>, <span class=\"string\">'Cloud'</span>, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">5000</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>安全性寫法:<br>為了避免駭客或其他不肖開發人員使用 JS 抓取 Cookie 資料，可加入安全性參數</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">res.cookie(<span class=\"string\">'myname'</span>, <span class=\"string\">'Cloud'</span>, &#123;</span><br><span class=\"line\">  maxAge: <span class=\"number\">5000</span>,</span><br><span class=\"line\">  httpOnly: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>但即便如此，還是可以在 <code>application</code> 中清楚看見資料，所以會建議採用 Session 給一組 UUID 來綁定資料。</p><h2 id=\"Express-Session\"><a href=\"#Express-Session\" class=\"headerlink\" title=\"Express Session\"></a>Express Session</h2><p>要在 Expres 中使用 Session 必須安裝 <code>express-session</code> 套件<br><a href=\"https://github.com/expressjs/session\" target=\"_blank\" rel=\"noopener\">express-session github</a><br><a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"noopener\">express-session npm</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i express-session -S</span><br></pre></td></tr></table></figure><p>並在 <code>app.js</code> 中加入設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>);</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  secret: <span class=\"string\">'keyboard cat'</span>, <span class=\"comment\">// 安全方式，會依照裡面的字串去做加密邏輯</span></span><br><span class=\"line\">  resave: <span class=\"literal\">true</span>, <span class=\"comment\">// 是否要每次進入網頁時重新設置 seesion cookie，如果有設置失效，例如 5 分鐘，重新整理後又有 5 分鐘，但是必須要改成 ture 才有效，但是建議改成 true</span></span><br><span class=\"line\">  saveUninitialized: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  cookie: &#123; </span><br><span class=\"line\">    maxAge: <span class=\"number\">5000</span> <span class=\"comment\">// 可以設置 cookie 過期時間，例如 5 秒後過期</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure><ul><li>Express 接收前端 <code>表單</code> or <code>AJAX</code> 資料並寫入 Session</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">req.session.XXX = req.body.XXX;</span><br></pre></td></tr></table></figure><p>註: 不論顯示或寫入，都是使用 <code>req</code> 而不會用到 <code>res</code> 呦!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs","Storage"]},{"title":"Express.js - Gmail 發送信件實作 + OAuth 2.0","url":"/nodejs/20200106/4047671532/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原本在 nodemailer 中輸入 Gmail 的帳號密碼就能夠發送信件，但 Google 基於安全性考量，在近幾年推出 OAuth 2.0 驗證機制。也就是必須跟 Google 取得 token 才能使用該帳號進行寄信功能</p><h2 id=\"建立-OAuth\"><a href=\"#建立-OAuth\" class=\"headerlink\" title=\"建立 OAuth\"></a>建立 OAuth</h2><p>首先到 Google Cloud Platform 創建一個新專案<br><img src=\"https://i.imgur.com/X6tN1VT.png\" alt=\"Google Cloud Platform\"><br><img src=\"https://i.imgur.com/eBEGfdF.png\" alt=\"新增專案\"><br>創建完專案後，到左邊選單找到 <b>API 服務</b>，並點選啟用 API 服務<br><img src=\"https://i.imgur.com/edSizp1.png\" alt=\"API 服務\"><br>搜尋 Gmail API，然後點選 <b>啟用</b><br><img src=\"https://i.imgur.com/jE3LrnH.png\" alt=\"Gmail API\"><br><img src=\"https://i.imgur.com/a1Cq9aZ.png\" alt=\"Gmail API 啟用\"><br>啟用之後會來到 Gmail API 頁面，接下來要建立憑證。<br>點擊左方 <b>憑證</b> 然後 <b>建立憑證</b> 選擇 <b>OAuth 用戶端ID</b><br>接著會要求同意設定<br><img src=\"https://i.imgur.com/3Nwgzsl.png\" alt=\"同意設定\"><br>User Type 選擇 <b>外部</b><br><img src=\"https://i.imgur.com/Fvd5fgB.png\" alt=\"User Type\"><br>接下來只需填寫名稱並儲存即可<br><img src=\"https://i.imgur.com/LSjyfcY.png\" alt=\"OAuth 同意畫面\"><br>到左邊選 <b>憑證</b> <b>建立憑證</b> 選擇 <b>OAuth 用戶端ID</b><br><img src=\"https://i.imgur.com/qJPFu4m.png\" alt=\"選擇憑證\"><br>選擇 <b>網路應用程式</b>，並且在下方 <b>已授權的重新導向URL</b> 中填入 <code>https://developers.google.com/oauthplayground</code>。<br><img src=\"https://i.imgur.com/VWE1NmV.png\" alt=\"網路應用程式\"><br>完成後會得到兩筆資料 <b>用戶端ID</b>、<b>用戶端密鑰</b> ，之後會用到。<br><img src=\"https://i.imgur.com/kxSxWpz.png\" alt=\"OAuth\"></p><h2 id=\"取得-Refrsh-Token\"><a href=\"#取得-Refrsh-Token\" class=\"headerlink\" title=\"取得 Refrsh Token\"></a>取得 Refrsh Token</h2><p>開啟 <a href=\"https://developers.google.com/oauthplayground\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/oauthplayground</a> ，點選右上角齒輪，將 <b>Use your own OAuth credentials</b>打勾，並填入剛剛取得的 Client ID 以及 Client Secret<br><img src=\"https://i.imgur.com/X6ah8jN.png\" alt=\"Client ID 以及 Client Secret\"><br>左邊的部分輸入 <code>https://mail.google.com/</code>後按下 Authorize APIs<br><img src=\"https://i.imgur.com/W6uhkwI.png\" alt=\"Authorize APIs\"><br>選擇要使用的 Google 帳戶<br><img src=\"https://i.imgur.com/9E1kXA8.png\" alt=\"Google 帳戶\"><br>這邊因為 Google 的安全機制會先擋一下，只需在 <b>進階</b> 裡面點選前往連結即可。<br><img src=\"https://i.imgur.com/jrkPl8x.png\" alt=\"未經驗證\"><br>進入之後 Google 會再詢問一次是否允許。<br><img src=\"https://i.imgur.com/urNqgzD.png\" alt=\"權限授予\"><br>再驗證一次是否允許應用程式<br><img src=\"https://i.imgur.com/B3qQdx8.png\" alt=\"應用程式權限\"><br>接著畫面會回到原本的頁面，這時點選 <b>Exchange authorization code for tokens</b> 就可取得 Refresh Token<br><img src=\"https://i.imgur.com/i2wying.png\" alt=\"Imgur\"></p><h2 id=\"模版建立\"><a href=\"#模版建立\" class=\"headerlink\" title=\"模版建立\"></a>模版建立</h2><p>開啟專案資料夾輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">express --view&#x3D;ejs</span><br></pre></td></tr></table></figure><p>在 <code>views</code> 建立 <code>contact.ejs</code> 以及 <code>contactReview.ejs</code>，可以參考下範例:</p><ul><li><p>contact.ejs</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>傳送表單內容<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/contact/post\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>聯絡我們<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"username\"</span>&gt;</span>姓　　名：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"email\"</span>&gt;</span>電子郵件：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"email\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"title\"</span>&gt;</span>標　　題：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"description\"</span>&gt;</span>訊息內容：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"30\"</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"送出訊息\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>contactReview.ejs</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>傳送成功<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>傳送成功<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>回到 聯絡我們<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id=\"Express-修正\"><a href=\"#Express-修正\" class=\"headerlink\" title=\"Express 修正\"></a>Express 修正</h2><p>到 <code>App.js</code> 中加入以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contactRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/contact'</span>);</span><br><span class=\"line\">app.use(<span class=\"string\">'/contact'</span>, contactRouter);</span><br></pre></td></tr></table></figure><h2 id=\"nodemailer-設定\"><a href=\"#nodemailer-設定\" class=\"headerlink\" title=\"nodemailer 設定\"></a>nodemailer 設定</h2><p>來到 <code>routes</code> 建立 <code>contact.js</code> 並加入範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router(); </span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">'nodemailer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'contact'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.get(<span class=\"string\">'/review'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'contactReview'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(<span class=\"string\">'/post'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = req.body;</span><br><span class=\"line\">  <span class=\"comment\">// 前端傳進資料，用傳統表單形式，也能用 AJAX 呦!</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> transporter = nodemailer.createTransport(&#123;</span><br><span class=\"line\">    service: <span class=\"string\">'Gmail'</span>,</span><br><span class=\"line\">    auth: &#123;</span><br><span class=\"line\">      type: <span class=\"string\">'OAuth2'</span>,</span><br><span class=\"line\">      user: <span class=\"string\">'要使用的 Gmail'</span>,</span><br><span class=\"line\">      clientId: <span class=\"string\">'填入用戶端ID'</span>,</span><br><span class=\"line\">      clientSecret: <span class=\"string\">'填入用戶端金鑰'</span>,</span><br><span class=\"line\">      refreshToken: <span class=\"string\">'填入 Refresh Token'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mailOptions = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span>: <span class=\"string\">'\"來自XXX\"&lt;xxx@gmail.com&gt;'</span>,</span><br><span class=\"line\">    to: <span class=\"string\">'收件人信箱'</span>,</span><br><span class=\"line\">    subject: <span class=\"string\">`<span class=\"subst\">$&#123;req.body.username&#125;</span>寄了一封測試信`</span>,</span><br><span class=\"line\">    text: req.body.description,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  transporter.sendMail(mailOptions, (err, info) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.redirect(<span class=\"string\">'/contact/review'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>接著開啟服務，在 <code>http://localhost:3000/contact</code> 輸入一些內容並送出，並查看收件人信箱，如果有收到信件代表已經成功囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs","OAuth"]},{"title":"Express.js - env 環境變數","url":"/nodejs/20200107/3250754690/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前章節在使用 Google OAuth2.0 時有使用到 ID、金鑰以及 Token，這些資料雖然是寫在後端程式碼中，但在版控時還是要避免顯示。所以我們會新建一個環境變數檔，將往ˇ站的變數都放在此處，並且不會加入版控。到部屬到服務器時(ex:heroku)會有設定可以加入環境變數。</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>套件名稱: <code>dotenv</code><br><a href=\"https://github.com/motdotla/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv github</a><br><a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install dotenv -S</span><br></pre></td></tr></table></figure><h2 id=\"建立-env-檔\"><a href=\"#建立-env-檔\" class=\"headerlink\" title=\"建立 .env 檔\"></a>建立 .env 檔</h2><p>在專案 <code>根目錄</code> 新建 <code>.env</code> 檔，其內容可參考以下寫法:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DB_HOST&#x3D;localhost</span><br><span class=\"line\">DB_USER&#x3D;root</span><br><span class=\"line\">DB_PASS&#x3D;s1mpl3</span><br></pre></td></tr></table></figure><h2 id=\"Express-引入設定\"><a href=\"#Express-引入設定\" class=\"headerlink\" title=\"Express 引入設定\"></a>Express 引入設定</h2><p>在 <code>app.js</code> 中加入以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'dotenv'</span>).config();</span><br></pre></td></tr></table></figure><h2 id=\"使用-env-環境變數\"><a href=\"#使用-env-環境變數\" class=\"headerlink\" title=\"使用 env 環境變數\"></a>使用 env 環境變數</h2><p>將原先的機密資料使用 <code>process.env.環境變數名稱</code> 即可。<br><code>XXX</code> 為 <code>.env</code> 檔中的名稱。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = process.env.XXX;</span><br></pre></td></tr></table></figure>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - EJS template","url":"/nodejs/20191227/3824472555/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前在撰寫 HTML 檔時是不是每支檔案都必須要有 <code>!DOCTYPE html</code>、<code>head</code>、<code>header</code>、<code>footer</code> 等標籤，而當網站頁數一多起來，在維護上就變得不容易了。<br>最簡單的例子就是當 <code>header</code> 有變更時，所有頁面的 <code>header</code> 必須修正，這就得一頁一頁的修改，效率極為慘烈。<br>於是 <code>template</code> 模版語言就是因此而被開發出來，不僅能夠讓所有頁面共用同一份 <code>layout</code> ，還能使用 <code>迴圈</code>、<code>判定參數</code>、<code>傳入資料</code>等行為，將開發效率提升了一個檔次，其實很多前端開發者到後來都不再寫 <code>HTML</code> 了，而轉成寫 <code>ejs</code>、<code>pug</code>等模版語言，只需要搭配編譯工具轉成 <code>HTML</code> 即可達到 <code>具有簡潔的架構</code>、<code>易維護</code> 的成效。</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>我們使用的是 <code>ejs-locals</code> 的套件，以下附上官方 github 及 npm 連結<br><a href=\"https://github.com/randometc/ejs-locals\" target=\"_blank\" rel=\"noopener\">ejs-locals github</a><br><a href=\"https://www.npmjs.com/package/ejs-locals\" target=\"_blank\" rel=\"noopener\">ejs-locals npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install ejs-locals --save</span><br></pre></td></tr></table></figure><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>在 <code>app.js</code> 中加入以下引入設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 EJS template</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> engine = <span class=\"built_in\">require</span>(<span class=\"string\">'ejs-locals'</span>);</span><br><span class=\"line\">app.engine(<span class=\"string\">'ejs'</span>, engine);</span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./views'</span>);</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定路由 &gt; 渲染特定 ejs 檔 &gt; 傳入參數(物件格式)</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"comment\">// 指定 index.ejs</span></span><br><span class=\"line\">    show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    documentTitle: <span class=\"string\">'首頁'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'&lt;h1&gt;部落格名稱: Cloud F2E Blog&lt;/h1&gt;'</span>,</span><br><span class=\"line\">    boss: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">    course: [<span class=\"string\">'html'</span>, <span class=\"string\">'js'</span>, <span class=\"string\">'bootstrap'</span>, <span class=\"string\">'vue'</span>],</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'user'</span>, &#123; <span class=\"comment\">// 指定 user.ejs</span></span><br><span class=\"line\">    documentTitle: <span class=\"string\">'使用者頁'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure><h2 id=\"template-建立\"><a href=\"#template-建立\" class=\"headerlink\" title=\"template 建立\"></a>template 建立</h2><p>來到根目錄，建立 <code>views</code> 資料夾，名稱可以隨便取，但必須跟上方 <code>./views</code> 一樣才行呦。<br><img src=\"https://i.imgur.com/k8SZMkx.png\" alt=\"views\"><br>在底下建立 <code>layout.ejs</code>、<code>index.ejs</code>、<code>header.ejs</code></p><ul><li>layout.ejs 內容<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">documentTitle</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">body</span> %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">include</span> <span class=\"attr\">header</span> %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>index.ejs 內容<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">layout</span>('<span class=\"attr\">layout</span>') %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">if</span> (<span class=\"attr\">show</span>) &#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>顯示資料: show = true<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; <span class=\"attr\">else</span> &#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>不顯示資料: show = false<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">title</span> %&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>主辦人: <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">boss</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    &lt;% for(i = 0;i &lt; course.length; i++) &#123; %&gt;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">course</span>[<span class=\"attr\">i</span>] %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>header.ejs 內容<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I'm in the header.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>輸出及引入 template 的方法:</li><li><code>&lt;% layout(&#39;layout&#39;) %&gt;</code>: 找到 <code>layout.ejs</code> 並搭配 <code>layout.ejs</code> 中的 <code>&lt;%- body %&gt;</code> 渲染內容</li><li><code>&lt;% include header %&gt;</code>: 找到 <code>header.ejs</code> 並搭配 <code>HTML</code> 渲染內容</li></ul><p>此範例中有寫入 <code>if</code>、<code>for迴圈</code> 的方法，其實跟寫 JavaScript 很雷同，差在要顯示時需要加入 ejs 的引入寫法而已<br>在 ejs 內顯示傳入參數的方法:</p><ul><li><code>&lt;%= 傳入參數的屬性 %&gt;</code>: 此方法會將傳入資料以 <code>字串</code> 形式渲染出來</li><li><code>&lt;%- 傳入參數的屬性 %&gt;</code>: 此方法會將傳入資料以 <code>HTML</code> 形式渲染出來</li></ul>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - 加入 favicon","url":"/nodejs/20200110/3431640210/","content":"<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>套件名稱: serve-favicon<br><a href=\"https://github.com/expressjs/serve-favicon\" target=\"_blank\" rel=\"noopener\">serve-favicon github</a><br><a href=\"https://www.npmjs.com/package/serve-favicon\" target=\"_blank\" rel=\"noopener\">serve-favicon npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install serve-favicon -S</span><br></pre></td></tr></table></figure><h2 id=\"加入-favicon\"><a href=\"#加入-favicon\" class=\"headerlink\" title=\"加入 favicon\"></a>加入 favicon</h2><p>在 <code>public</code> 目錄下，將網所需的 <code>favicon.ico</code> 檔加入<br><img src=\"https://i.imgur.com/2fwm2vE.png\" alt=\"favicon\"></p><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>加入以下程式碼即可</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\">app.use(favicon(path.join(__dirname, <span class=\"string\">'public'</span>, <span class=\"string\">'favicon.ico'</span>)));</span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>都完成以上步驟後開啟服務，就能看見自定義的 favicon 囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - CSRF 驗證機制","url":"/nodejs/20200106/2486447807/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>根據上一篇 <code>Express.js - Gmail 發送信件實作 + OAuth 2.0</code> 做的寄信程式，只要知道 POST 位址就能使用 postman 填入相關參數並讓該應用程式寄信。<br>這會讓網站變得很不安全，一不小心就會被駭客攻擊到應用程式崩潰，而 Node.js 也將 CSRF 驗證機制加入其中，一起 CSRF 的攻擊吧!!</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>本次使用的套件為 <code>csurf</code> 不是 <code>csrf</code> 喔。<br><a href=\"https://github.com/expressjs/csurf\" target=\"_blank\" rel=\"noopener\">csurf github</a><br><a href=\"https://www.npmjs.com/package/csurf\" target=\"_blank\" rel=\"noopener\">csurf npm</a><br>輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install csurf -S</span><br></pre></td></tr></table></figure><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>專案資料夾則是採用 Express.js - Gmail 這篇建立的。<br>來到 <code>routes/contact.js</code>中，引入 <code>csurf</code> 服務。<br>一開始就加入下設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> csrf = <span class=\"built_in\">require</span>(<span class=\"string\">'csurf'</span>);</span><br><span class=\"line\"><span class=\"comment\">// setup route middlewares</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> csrfProtection = csrf(&#123; <span class=\"attr\">cookie</span>: <span class=\"literal\">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>路由修改範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'contact'</span>, &#123; <span class=\"attr\">csrfToken</span>: req.csrfToken() &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">router.post(<span class=\"string\">'/post'</span>, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 中間省略</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>分別在兩個路由都加入 <code>middlewares</code>，接下來是修改模版</p><h2 id=\"模版修改\"><a href=\"#模版修改\" class=\"headerlink\" title=\"模版修改\"></a>模版修改</h2><p>位置: <code>views/contact.ejs</code><br>在 form 表單加入 <code>csurf</code> 設定</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>傳送表單內容<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/contact/post\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    // name 、 value 必填</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"_csrf\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"&lt;%= csrfToken %&gt;\"</span>&gt;</span></span><br><span class=\"line\">    // 中間省略</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>開啟服務，進入 <code>http://localhost:3000/contact</code> 看一下 F12 中的 <code>cookie</code> 是否有 <code>_csurf</code> 的值，以及 <code>input</code> 元素有沒有寫入 <code>csrfToken</code> 變數，如果都有的話就成功囉!!<br>這時使用 postman 即使知道路由也是無法傳送資訊到後端並寄發信件的喔!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - firebase 會員註冊登入功能","url":"/nodejs/20200113/1315044221/","content":"<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>套件名稱: <code>firebase</code><br><a href=\"https://github.com/firebase/firebase-js-sdk\" target=\"_blank\" rel=\"noopener\">firebase github</a><br><a href=\"https://www.npmjs.com/package/firebase\" target=\"_blank\" rel=\"noopener\">firebase npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install firebase -S</span><br></pre></td></tr></table></figure><h2 id=\"取得-Firebase-環境變數\"><a href=\"#取得-Firebase-環境變數\" class=\"headerlink\" title=\"取得 Firebase 環境變數\"></a>取得 Firebase 環境變數</h2><p>首先在 Firebase 新建專案，並新增 <code>網路應用程式</code><br><img src=\"https://i.imgur.com/X7gEGGj.png\" alt=\"網路應用程式\"><br>完成後在設定區塊可以到環境變數<br><img src=\"https://i.imgur.com/8RClT42.png\" alt=\"環境變數\"></p><h2 id=\"引入環境變數\"><a href=\"#引入環境變數\" class=\"headerlink\" title=\"引入環境變數\"></a>引入環境變數</h2><p>使用 <code>.env</code> 檔將 Firebase 資料引入，<code>.env</code> 相關作法可以參照 <a href=\"https://syj0905.github.io/Express-js/20200107/express-env/\">Express.js - env 環境變數</a><br>在 <code>根目錄</code> 建立 <code>plugins</code> 資料夾，新增 <code>firebase.js</code> 並加入 Firebase 設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firebase = <span class=\"built_in\">require</span>(<span class=\"string\">'firebase'</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'dotenv'</span>).config();</span><br><span class=\"line\"></span><br><span class=\"line\">firebase.initializeApp(&#123;</span><br><span class=\"line\">  apiKey: process.env.FIREBASE_APIKEY,</span><br><span class=\"line\">  authDomain: process.env.FIREBASE_AUTHDOMAIN,</span><br><span class=\"line\">  databaseURL: process.env.FIREBASE_DATABASEURL,</span><br><span class=\"line\">  projectId: process.env.FIREBASE_PROJECTID,</span><br><span class=\"line\">  storageBucket: process.env.FIREBASE_STORAGEBUCKET,</span><br><span class=\"line\">  messagingSenderId: process.env.FIREBASE_MESSAGINGSENDERID,</span><br><span class=\"line\">  appId: process.env.FIREBASE_APPID,</span><br><span class=\"line\">  measurementId: process.env.FIREBASE_MEASUREMENTID,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = firebase;</span><br></pre></td></tr></table></figure><h2 id=\"模板建立\"><a href=\"#模板建立\" class=\"headerlink\" title=\"模板建立\"></a>模板建立</h2><p>在 <code>views</code> 中建立 <code>signup.ejs</code>，並參考以下範例:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/signup\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>註冊<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"email\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>nickname:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"nickname\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"註冊\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">errorMsg</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>views</code> 中建立 <code>login.ejs</code>，並參考以下範例:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登入<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>Email:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"email\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"\"</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Log In\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">errorMsg</span> %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"路由設定\"><a href=\"#路由設定\" class=\"headerlink\" title=\"路由設定\"></a>路由設定</h2><p>在 <code>app.js</code> 加入以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> signup = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/signup'</span>);</span><br><span class=\"line\">app.use(<span class=\"string\">'/signup'</span>, signup);</span><br></pre></td></tr></table></figure><p>接著在 <code>routes</code> 新增 <code>signup.js</code> 檔，最後就是撰寫註冊功能囉!!</p><h2 id=\"註冊邏輯\"><a href=\"#註冊邏輯\" class=\"headerlink\" title=\"註冊邏輯\"></a>註冊邏輯</h2><p>除了 Firebase 註冊的 <code>API</code> 有區別外，其餘都是先前已會的程式碼，不會太過艱深，可參照以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> firebase = <span class=\"built_in\">require</span>(<span class=\"string\">'../plugins/firebase'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> firebaseAdmin = <span class=\"built_in\">require</span>(<span class=\"string\">'../plugins/firebase-admin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> firebaseAuth = firebase.auth();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// route: /signup</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'signup'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'註冊'</span>,</span><br><span class=\"line\">    errorMsg: req.flash(<span class=\"string\">'errorMsg'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// route: /signup</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> email = req.body.email;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = req.body.passwd;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> nickname = req.body.nickname;</span><br><span class=\"line\">  firebaseAuth.createUserWithEmailAndPassword(email, password)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> userInfo = &#123;</span><br><span class=\"line\">        uid: user.user.uid,</span><br><span class=\"line\">        email: user.user.email,</span><br><span class=\"line\">        nickname,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      firebaseAdmin.ref(<span class=\"string\">`/user/<span class=\"subst\">$&#123;user.user.uid&#125;</span>`</span>).set(userInfo);</span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/signup/success'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> errorMsg = error.message;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'errorMsg'</span>, errorMsg);</span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/signup'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/success'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'success'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'註冊成功'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id=\"登入邏輯\"><a href=\"#登入邏輯\" class=\"headerlink\" title=\"登入邏輯\"></a>登入邏輯</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> firebase = <span class=\"built_in\">require</span>(<span class=\"string\">'../plugins/firebase'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> firebaseAuth = firebase.auth();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// route: /login</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'login'</span>, &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'登入'</span>,</span><br><span class=\"line\">    errorMsg: req.flash(<span class=\"string\">'errorMsg'</span>),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> email = req.body.email;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = req.body.passwd;</span><br><span class=\"line\">  firebaseAuth.signInWithEmailAndPassword(email, password)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      req.session.uid = user.user.uid;</span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> errorMsg = error.message;</span><br><span class=\"line\">      req.flash(<span class=\"string\">'errorMsg'</span>, errorMsg);</span><br><span class=\"line\">      res.redirect(<span class=\"string\">'/login'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>避免篇幅太冗長，以上範例請搭配 <code>完整 Demo</code> 服用，以免出現錯誤!!</p><h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/SYJ0905/Express-Admin\" target=\"_blank\" rel=\"noopener\">Express - 會員留言板</a></p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs","Firebase"]},{"title":"Express.js - 取得表單內容及轉址","url":"/nodejs/20191227/1299330094/","content":"<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>我們使用的是 <code>body-parser</code> 的套件，以下附上官方 github 及 npm 連結<br><a href=\"https://github.com/expressjs/body-parser\" target=\"_blank\" rel=\"noopener\">body-parser github</a><br><a href=\"https://www.npmjs.com/package/body-parser\" target=\"_blank\" rel=\"noopener\">body-parser npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install body-parser --save</span><br></pre></td></tr></table></figure><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>在 <code>app.js</code> 中加入以下設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 設定 EJS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> engine = <span class=\"built_in\">require</span>(<span class=\"string\">'ejs-locals'</span>);</span><br><span class=\"line\">app.engine(<span class=\"string\">'ejs'</span>, engine);</span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./views'</span>);</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json()); <span class=\"comment\">// 支援 json</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"comment\">// 解析表單內容</span></span><br><span class=\"line\">  extended: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">    documentTitle: <span class=\"string\">'首頁'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/search'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'search'</span>, &#123;</span><br><span class=\"line\">    documentTitle: <span class=\"string\">'搜尋頁'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 有兩種寫法，需針對 action 修改路由</span></span><br><span class=\"line\"><span class=\"comment\">// action 為 /searchList</span></span><br><span class=\"line\">app.post(<span class=\"string\">'/searchList'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'轉址'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  <span class=\"comment\">// 轉址</span></span><br><span class=\"line\">  res.redirect(<span class=\"string\">'/search'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// action 為 /search</span></span><br><span class=\"line\"><span class=\"comment\">// app.post('/search', function(req, res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log('渲染');</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log(req.body);</span></span><br><span class=\"line\"><span class=\"comment\">//   // 渲染</span></span><br><span class=\"line\"><span class=\"comment\">//   res.render('/search', &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     documentTitle: '搜尋頁',</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure><p>細節說明:</p><ul><li><code>req.body</code>: 為物件格式，可紀錄前端表單 <code>name</code> 的屬性內容。</li><li><code>res.redirect(&#39;指定路由&#39;)</code>: 收到資料後，轉址到該路由，並渲染畫面。<br>註: 如果沒有 <code>轉址</code> 的話，會到導致網頁上方還在轉圈圈，也就是 loading 中，必須要正確轉址才算完成</li></ul><h2 id=\"建立搜尋頁面\"><a href=\"#建立搜尋頁面\" class=\"headerlink\" title=\"建立搜尋頁面\"></a>建立搜尋頁面</h2><p>由於有使用 <code>ejs</code> 當模版語言，還不清楚的可以看我之前的 <code>ejs</code> 的文章呦!<br>在 <code>views</code> 資料夾內新增 <code>search.ejs</code> 檔，並參考以下表單範例程式碼:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% layout(&#39;layout&#39;) %&gt;</span><br><span class=\"line\">  &lt;h1&gt;&lt;%&#x3D; documentTitle %&gt;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;form action&#x3D;&quot;&#x2F;searchList&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;inputText&quot; placeholder&#x3D;&quot;請輸入內容&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;送出&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>開啟 <code>Web Server</code> 後輸入 <code>http://localhost:3000/search</code>，在欄位輸入內容送出，此時觀察 <code>CMD</code>、<code>終端機</code> 是否有接收到一個物件資料 <code>req.body</code>，其內容有包含輸入的資料，如果有正確收到代表成功囉!!</p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>這算是後端的表單驗證，在轉址前收到資料並進行一系列判斷，來決定要轉址到之後的網站內容。可想而知，如果驗證機制都交給後端的話，當計算量過大就會導致效能降低且網頁速度變慢。<br>以目前表單驗證來說，會在前端初步做驗證，由使用者的載具 cpu 來處理計算，畢竟平常用量就很低所以不用白不用，所以當使用者不斷輸入欄位內容時就判斷是否符合驗證規則之類的，這樣傳到後端時才不會導致伺服器計算量過大。</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - generator 應用產生器","url":"/nodejs/20191230/2267746451/","content":"<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>我們使用的是 <code>express-generator</code> 的套件，以下附上官方 github 及 npm 連結<br><a href=\"https://github.com/expressjs/generator\" target=\"_blank\" rel=\"noopener\">express-generator github</a><br><a href=\"https://www.npmjs.com/package/express-generator\" target=\"_blank\" rel=\"noopener\">express-generator npm</a><br>在專案內輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g express-generator</span><br></pre></td></tr></table></figure><p>必須安裝在 <code>全域環境</code>才行哩。</p><h2 id=\"產生應用程式\"><a href=\"#產生應用程式\" class=\"headerlink\" title=\"產生應用程式\"></a>產生應用程式</h2><p>開啟專案資料夾，並且執行 <code>CMD</code> 到該目錄，<br>執行 <code>express --view=ejs</code>，接下來就會自動產生結構哩<br><img src=\"https://i.imgur.com/GzulQ17.png\" alt=\"express-generator\"></p><h2 id=\"個人設定\"><a href=\"#個人設定\" class=\"headerlink\" title=\"個人設定\"></a>個人設定</h2><p>個人是使用 <code>ejs</code> 以及 <code>scss</code> 做開發，所以我的應用器產生代碼是</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">express --view&#x3D;ejs --css&#x3D;sass</span><br></pre></td></tr></table></figure><p>相關參數設定都可在<a href=\"https://github.com/expressjs/generator\" target=\"_blank\" rel=\"noopener\">官方文件</a>裡找到</p><p>設定 <code>scss</code> 後，還需在 <code>app.js</code> 調整，調整以紅色箭頭處設定，<br>即可在 <code>public/stylesheets</code> 中撰寫 <code>scss</code> 檔囉!!<br><img src=\"https://i.imgur.com/XzeMus8.png\" alt=\"scss\"></p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>執行 <code>npm i</code> 後輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure><p>如果有正常出現畫面，並且有吃到 <code>scss</code> 的樣式就成功囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - Route 模組化","url":"/nodejs/20191230/447901249/","content":"<h2 id=\"建立模組化檔案\"><a href=\"#建立模組化檔案\" class=\"headerlink\" title=\"建立模組化檔案\"></a>建立模組化檔案</h2><p>首先在 <code>根目錄</code> 新建一個 <code>routes</code> 資料夾，並建一支 <code>admin.js</code> 檔，<br>並在 <code>admin.js</code> 中撰寫以下範例程式碼:<br><code>middleware</code> 的部分可以寫在 app.js 或是 模組內呦!</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> login = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'已登入'</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外層會設定父層路由 /admin</span></span><br><span class=\"line\"><span class=\"comment\">// 此路由就等於 /admin ， 因為指向 '/'</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Admin'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外層會設定父層路由 /admin</span></span><br><span class=\"line\"><span class=\"comment\">// 此路由就等於 /admin/account</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/account'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Account'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>在 <code>app.js</code> 中引入 <code>routes</code> 內的模組化路由檔</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> adminRoute = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/admin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// middleware 設定，也可寫在核心 app.js 內呦</span></span><br><span class=\"line\"><span class=\"comment\">// const login = function (req, res, next) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log('已登入');</span></span><br><span class=\"line\"><span class=\"comment\">//   next();</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/admin'</span>, adminRoute);</span><br><span class=\"line\"><span class=\"comment\">// 有需要在引入的模組化路由加入 middleware 則參考以下寫法</span></span><br><span class=\"line\"><span class=\"comment\">// app.use('/admin', login, adminRoute); </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首頁</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Cloud'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// app.get('/', login, function(req, res) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   res.send('Hello Cloud');</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure><p>這裡會將 <code>routes</code> 資料夾內的 <code>admin.js</code> 引入，並且設定該路由模組的 <code>根目錄</code>，也就是 <code>/admin</code>，最後在將<code>middleware</code> 加入</p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>開啟 <code>Web Server</code> 後輸入以下兩個路徑<br><code>http://localhost:3000/admin</code><br><code>http://localhost:3000/admin/account</code><br>如果開啟後有顯示正常的字串就代表成功囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - middleware","url":"/nodejs/20191226/2878403792/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>舉凡電商網站、CMS後台管理系統等含有個人隱私資料或會員系統這類的網站就會需要在特定的隱私頁面做使用者驗證，避免其他人透過任何手法取得網址就直接進入個人頁面竄改資料等行為</p><h2 id=\"middleware\"><a href=\"#middleware\" class=\"headerlink\" title=\"middleware\"></a>middleware</h2><ul><li><code>middleware</code>: 又稱中界軟體、中間組件等。常用於導航守衛(登入驗整等)功能</li></ul><p>在 Express 中使用 <code>app.use()</code> 來建立導航守衛，需要注意幾點:</p><ul><li><code>middleware</code> 有先後順序問題</li><li><code>next()</code> 必須設定，不加入無法進入到下一步驟</li><li><code>res.status(404)</code> 頁面不存在，不代表程式出錯</li><li><code>res.status(500)</code> 程式錯誤，頁面可能存在，網頁會出現錯誤訊息，為了避免給使用者看到天書，會導入其他自定頁面</li></ul><p>參考範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'有人造訪網頁'</span>);</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;Hello Express&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'有人進來特定頁面'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// kk(); // 測試 500 時請開啟</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;Hello Cloud&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.status(<span class=\"number\">404</span>).send(<span class=\"string\">'抱歉，您的頁面找不到'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.status);</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'程式有點問題，請稍後嘗試'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure><h2 id=\"進階-middleware\"><a href=\"#進階-middleware\" class=\"headerlink\" title=\"進階 middleware\"></a>進階 middleware</h2><p>由於上述寫法必須在每個路由前面都寫入 middleware 的函式，會造成多餘的程式碼。<br>Express 提供另一種寫法，可以在每個路由的參數中添加 middleware 在接著後面的 <code>callback function</code> or <code>promise</code><br>參考範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> login = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _url = req.url;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'有人進來首頁'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(_url);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_url !== <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'您的登入資料有錯'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, login, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;Hello Express&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'有人進來特定頁面'</span>);</span><br><span class=\"line\">  <span class=\"comment\">// kk(); // 測試 500 時請開啟</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.status(<span class=\"number\">404</span>).send(<span class=\"string\">'抱歉，您的頁面找不到'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(err.status);</span><br><span class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'程式有點問題，請稍後嘗試'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - 路由 Route 介紹","url":"/nodejs/20191226/1852101665/","content":"<h2 id=\"網址組成\"><a href=\"#網址組成\" class=\"headerlink\" title=\"網址組成\"></a>網址組成</h2><p>首先要介紹網址的組成，這裡選擇 Google 搜尋 <code>express</code> 當例子。<br>以下是範例網址，實際操作時網址可能很長一串，不過是可以簡化成這樣子的，其他多餘的都是 Google 的設定<br><code>https://www.google.com/search?q=exprss</code></p><ul><li><code>https</code>: 傳輸協定，有兩種類型，對應的 port 也不同<ul><li>http: port 80，有安全性問題</li><li>htpps: port 443，代表安全傳輸協定，又稱 <code>SSL</code></li></ul></li><li><code>www</code>: 子網域，掛在主網域底下，也就是說一個主網域底下可能有多個子網域，並提供服務(ex: mail.google.com、drive.google.com)</li><li><code>google.com</code>: 主網域，透過網域供應商購買</li><li><code>search</code>: 路由 route</li><li><code>?q=exprss</code>: 網址參數 query</li></ul><h2 id=\"Express-Route\"><a href=\"#Express-Route\" class=\"headerlink\" title=\"Express Route\"></a>Express Route</h2><p>參考之前的範例，我們可以在根目錄 <code>/</code> 下新建一個 <code>/user</code> 的路由</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'測試'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>如果要在 <code>/user</code> 底下在建一個路由呢 ? 只需在建一個 <code>get()</code> 並再 <code>/user/欲加入的路由名稱</code> 即可</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'測試'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/user/test2'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'測試2'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"網址參數\"><a href=\"#網址參數\" class=\"headerlink\" title=\"網址參數\"></a>網址參數</h2><p>如同前面 google 的搜尋參數 <code>?q=exprss</code>，如何在進入到 <code>http://localhost:8080/user?search=express</code> 這個網址時，後端 express 也能收到我的參數呢?</p><p>在 Express 中是使用了 <code>req.query</code> 來紀錄資料<br>註: <code>query</code> 中文應該是詢問的意思，不確定為什麼會被翻成參數</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.query);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = req.query.search; <span class=\"comment\">// search 必須跟網址對應到的 ?search 要是相同的呦</span></span><br><span class=\"line\">  res.send(<span class=\"string\">`測試 <span class=\"subst\">$&#123;query&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>這時進入到 <code>http://localhost:8080/user?search=express</code> 時，頁面就會有 <code>測試 express</code> 的字樣囉，並且在 <code>CMD</code> or <code>終端機</code> 會有 <code>req.query</code> 的物件。<br>如果參數有很多個的話，就在 <code>?search=express</code> 後面加個 <code>&amp;</code> 再繼續寫 <code>?search=express&amp;name=Cloud</code>， 就可以囉。</p><h2 id=\"網址路由\"><a href=\"#網址路由\" class=\"headerlink\" title=\"網址路由\"></a>網址路由</h2><p>先前提到的路由都是預先設定好的，像是 <code>/</code>、<code>/user</code> 等等，假設有一個路徑是 <code>/user/Cloud</code> 指定到個人頁面的話，該怎麼再 Express 設定呢?<br>Express 使用 <code>req.params</code> 來接收動態的路徑資料<br>參考以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'Hello Express'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.params);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = req.params.name;</span><br><span class=\"line\">  res.send(<span class=\"string\">`測試 <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>以下是本篇路徑所講的所有內容統整，可以執行 <code>http://localhost:3000/user/Cloud/0905?limit=10&amp;q=hello</code> 來看觀察資料結構<br>範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;Hello Express&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http://localhost:3000/user/Cloud/0905?limit=10&amp;q=hello</span></span><br><span class=\"line\">app.get(<span class=\"string\">'/user/:name/:date'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.params);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.query);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> myName = req.params.name;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = req.params.date;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> limit = req.query.limit;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> q = req.query.q;</span><br><span class=\"line\">  res.send(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h1&gt;我的名字:<span class=\"subst\">$&#123; myName &#125;</span>&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;日期: <span class=\"subst\">$&#123; date &#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;P&gt;筆數: <span class=\"subst\">$&#123; limit &#125;</span>&lt;/P&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;p&gt;尋找關鍵字: <span class=\"subst\">$&#123; q &#125;</span>&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Express.js - 載入靜態 static 檔","url":"/nodejs/20191227/1171150845/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>截至目前為止，都只會有一支 <code>app.js</code> 在撰寫程式碼，如果我們希望使用者進網頁時有看到一些畫面或圖片的話，該怎麼渲染呢?<br>又該在哪裡存放靜態檔案，最後是該如何正確的引入，以下就會介紹 Express 中引入 static 檔的方法吧!!</p><h2 id=\"建立-public-資料夾\"><a href=\"#建立-public-資料夾\" class=\"headerlink\" title=\"建立 public 資料夾\"></a>建立 public 資料夾</h2><p>首先在 <code>根目錄</code> 創建一個 <code>public</code> 資料夾，之後存放檔案用的。<br>並可以依分類建立子資料夾 css、js、images 做區隔，之後引入只要路徑沒錯是沒有問題的。<br><img src=\"https://i.imgur.com/r2udHZC.png\" alt=\"public\"></p><h2 id=\"Express-設定\"><a href=\"#Express-設定\" class=\"headerlink\" title=\"Express 設定\"></a>Express 設定</h2><p>此設定必須要寫在路由最前面，這樣所有路由才能正確引入。<br>在 <code>app.js</code> 添加以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</span><br></pre></td></tr></table></figure><h2 id=\"引入-static-檔\"><a href=\"#引入-static-檔\" class=\"headerlink\" title=\"引入 static 檔\"></a>引入 static 檔</h2><p>這邊會先示範使用 <code>res.send()</code> 來渲染畫面，後續會使用 template 引入。<br><code>/</code>: 指向 public 當根目錄開始找檔案<br>參考範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(</span><br><span class=\"line\">    <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;img src=\"/image/logo.png\" alt=\"\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"完整範例程式碼\"><a href=\"#完整範例程式碼\" class=\"headerlink\" title=\"完整範例程式碼\"></a>完整範例程式碼</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加靜態檔案路徑 ， 必須寫在最前面</span></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(</span><br><span class=\"line\">    <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;head&gt;&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">          &lt;img src=\"/image/logo.png\" alt=\"\"/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽 port</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> port = process.env.PORT || <span class=\"number\">3000</span>;</span><br><span class=\"line\">app.listen(port);</span><br></pre></td></tr></table></figure>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs"]},{"title":"Firebase - TodoList","url":"/firebase/20191225/4123263101/","content":"<h2 id=\"基本環境設置\"><a href=\"#基本環境設置\" class=\"headerlink\" title=\"基本環境設置\"></a>基本環境設置</h2><p>請記得引入 Firebase 的初始化設定</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">\"todo_input\"</span>&gt;</span>代辦事項:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo_input\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"請輸入代辦事項\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"送出\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo_send\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todo_list\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"範例程式碼\"><a href=\"#範例程式碼\" class=\"headerlink\" title=\"範例程式碼\"></a>範例程式碼</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOM</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> todo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#todo_input'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> send = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#todo_send'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> todoList = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#todo_list'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dataRef = firebase.database().ref(<span class=\"string\">'todos'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 送出事項</span></span><br><span class=\"line\">send.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> todoContent = &#123;</span><br><span class=\"line\">    content: todo.value,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dataRef.push(todoContent);</span><br><span class=\"line\">  todo.value = <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 監聽資料庫即時更新</span></span><br><span class=\"line\">dataRef.on(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataSnapshot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = dataSnapshot.val();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">    str += <span class=\"string\">`&lt;li data-key=\"<span class=\"subst\">$&#123;item&#125;</span>\"&gt;<span class=\"subst\">$&#123;data[item].content&#125;</span>&lt;/li&gt;`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  todoList.innerHTML = str;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 刪除邏輯</span></span><br><span class=\"line\">todo_list.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName === <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = e.target.dataset.key;</span><br><span class=\"line\">    dataRef.child(key).remove();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","categories":["Firebase"],"tags":["JavaScript","Firebase"]},{"title":"Firebase - 基礎介紹","url":"/firebase/20191225/2037953785/","content":"<h2 id=\"基本環境建立\"><a href=\"#基本環境建立\" class=\"headerlink\" title=\"基本環境建立\"></a>基本環境建立</h2><p>首先請到 Firebase 建立一份新的專案，並依照下圖紅色箭頭新建一個網路應用程式。<br><img src=\"https://i.imgur.com/E6nUBkN.png\" alt=\"Firebase\"><br>新建完成後會給一段 <code>script</code> ，這是之後要在 HTML 中引入的。<br><img src=\"https://i.imgur.com/DS1e33O.png\" alt=\"新建應用程式\"><br>註:由於新版的 Firebase 將核心程式碼獨立出來，其他功能拆分成各個模組。<br>會使用到 Firebase 中的 Database 功能，所以必須額外引入套件，請參照以下 <code>script</code>。<br>版本號的部分請跟 <code>firebase-app.js</code> 核心模組相同即可。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.gstatic.com/firebasejs/7.6.1/firebase-app.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.gstatic.com/firebasejs/7.6.1/firebase-database.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"引入檔案\"><a href=\"#引入檔案\" class=\"headerlink\" title=\"引入檔案\"></a>引入檔案</h2><p>開啟一份專案資料夾，並創建 <code>index.html</code>，將 Firebase 的 script 加入到 body 的最後面。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.gstatic.com/firebasejs/7.5.2/firebase-app.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.gstatic.com/firebasejs/7.5.2/firebase-database.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://www.gstatic.com/firebasejs/7.5.2/firebase-analytics.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// Your web app's Firebase configuration</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">var</span> firebaseConfig = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      apiKey: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      authDomain: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      databaseURL: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      projectId: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      storageBucket: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      messagingSenderId: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      appId: <span class=\"string\">\"不給你看\"</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">      measurementId: <span class=\"string\">\"不給你看\"</span></span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// Initialize Firebase</span></span></span><br><span class=\"line\">    firebase.initializeApp(firebaseConfig);</span><br><span class=\"line\">    firebase.analytics();</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下來就開始介紹 Firebase 中 Database 的各種操作囉!!</p><h2 id=\"ref-、set\"><a href=\"#ref-、set\" class=\"headerlink\" title=\"ref()、set()\"></a>ref()、set()</h2><ul><li><code>ref()</code>: 尋找資料庫路徑</li><li><code>set()</code>: 新增資料<br>在 Firebase 中，資料全部都是物件格式，不能是陣列格式</li></ul><p>參考範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"literal\">null</span>;</span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">  food: &#123;</span><br><span class=\"line\">    coke: &#123;</span><br><span class=\"line\">      price: <span class=\"number\">30</span>,</span><br><span class=\"line\">      num: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fries: &#123;</span><br><span class=\"line\">      price: <span class=\"number\">35</span>,</span><br><span class=\"line\">      num: <span class=\"number\">50</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  order: &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span>: &#123;</span><br><span class=\"line\">      coke: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2</span>: &#123;</span><br><span class=\"line\">      coke: <span class=\"number\">2</span>,</span><br><span class=\"line\">      fries: <span class=\"number\">50</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">firebase.database().ref().set(data);</span><br><span class=\"line\">firebase.database().ref(<span class=\"string\">'stu1/name'</span>).set(<span class=\"string\">'Cloud'</span>);</span><br></pre></td></tr></table></figure><p>之後打開 <code>Web Server</code>，再切到 Firebase 後台就可以看到資料已經寫入囉!!<br><img src=\"https://i.imgur.com/zWihB4c.png\" alt=\"資料寫入Firebase\"></p><h2 id=\"once-、on\"><a href=\"#once-、on\" class=\"headerlink\" title=\"once()、on()\"></a>once()、on()</h2><ul><li><code>once()</code>: 讀取一次資料庫的資料</li><li><code>on()</code>: 隨時監聽資料庫<br>註: 回傳的參數 snapshot 等於 dataSnapshot，兩者在官方文件都有出現過</li></ul><p>參考範例:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"subtitle\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"number\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">id</span>=<span class=\"string\">\"subnumber\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myNameRef = firebase.database().ref(<span class=\"string\">'myName'</span>);</span><br><span class=\"line\">myNameRef.set(<span class=\"string\">'Cloud'</span>);</span><br><span class=\"line\"><span class=\"comment\">// callback 寫法</span></span><br><span class=\"line\">myNameRef.once(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">snapshot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'title'</span>).textContent = snapshot.val();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Promise 寫法</span></span><br><span class=\"line\">myNameRef.once(<span class=\"string\">'value'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">dataSnapshot</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'subtitle'</span>).textContent = dataSnapshot.val();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numberRef = firebase.database().ref(<span class=\"string\">'myNumber'</span>);</span><br><span class=\"line\">numberRef.set(<span class=\"string\">'7'</span>);</span><br><span class=\"line\">numberRef.on(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">snapshot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'number'</span>).textContent = snapshot.val();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 測試 once() 與 on() 差異</span></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  firebase.database().ref(<span class=\"string\">'myName'</span>).set(<span class=\"string\">'Tom'</span>);</span><br><span class=\"line\">  firebase.database().ref(<span class=\"string\">'myNumber'</span>).set(<span class=\"string\">'20'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure><p>同樣開啟 <code>Web Server</code> 會發現 <code>5</code> 秒前的顯示內容與資料庫相同，但 <code>5</code> 秒後的數字已經變成 <code>20</code>，確實與資料庫相同，但 <code>title</code> 卻依舊是 <code>Cloud</code>，此時資料庫已經更換成 <code>Tom</code>，這就是 <code>once()</code> 與 <code>on()</code> 的差異。<br>5秒前 Firebase<br><img src=\"https://i.imgur.com/1OiMzxB.png\" alt=\"5秒前 Firebase\"><br>5秒後 Firebase<br><img src=\"https://i.imgur.com/WWckntp.png\" alt=\"5秒後 Firebase\"></p><h2 id=\"push-、remove\"><a href=\"#push-、remove\" class=\"headerlink\" title=\"push()、remove()\"></a>push()、remove()</h2><ul><li><code>push()</code>: 傳入資料，必須是物件格式</li><li><code>key</code>: push 之後 firebase 給的唯一值</li><li><code>remove()</code>: 刪除資料</li><li><code>child()</code>: 子路徑</li></ul><p>參考範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dataArray = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    content: <span class=\"string\">'今天要記得刷牙'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    content: <span class=\"string\">'今天要記得看牙醫'</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">var</span> todos = firebase.database().ref(<span class=\"string\">'todos'</span>);</span><br><span class=\"line\">dataArray.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  todos.push(item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> todosChild = firebase.database().ref().child(<span class=\"string\">'todos'</span>);</span><br><span class=\"line\"><span class=\"comment\">// id 請填入 key</span></span><br><span class=\"line\"><span class=\"comment\">// todosChild.child('id').remove();</span></span><br></pre></td></tr></table></figure><p>開啟 <code>Web Server</code>，Firebase 就會寫入資料並將每一筆資料都帶有 <code>key</code>，如果要刪除特定一筆資料就在 <code>child(&#39;key&#39;)</code> 填入 <code>key</code> 接著 <code>remove()</code> 就能刪除資料庫資料了<br><img src=\"https://i.imgur.com/bwqvUYt.png\" alt=\"Firebase\"></p><h2 id=\"orderByChild\"><a href=\"#orderByChild\" class=\"headerlink\" title=\"orderByChild()\"></a>orderByChild()</h2><p>路徑 &gt; 排序(‘屬性’) &gt; 過濾 &gt; 限制筆數 &gt; 讀取 &gt; forEach 依序撈出<br>必需搭配 <code>forEach()</code> 取出資料才行，<br>是對 <code>dataSnapshot</code> 做 <code>forEach()</code>，不是對 <code>dataSnapshot.val()</code></p><ul><li><code>orderByChild()</code>: 排序(‘屬性’)</li><li><code>startAt()</code>: 過濾多少以上的資料</li><li><code>endAt()</code>: 過濾多少以下的資料</li><li><code>equalTo()</code>: 過濾特定數值的資料</li><li><code>limitToFirst()</code>: 限制比數，從頭開始算</li><li><code>limitToLast()</code>: 限制比數，從尾開始算</li></ul><p>參考範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">  mike: &#123;</span><br><span class=\"line\">    length: <span class=\"number\">12.5</span>,</span><br><span class=\"line\">    weight: <span class=\"number\">5000</span>,</span><br><span class=\"line\">    height: <span class=\"number\">50</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  casper: &#123;</span><br><span class=\"line\">    length: <span class=\"number\">9</span>,</span><br><span class=\"line\">    weight: <span class=\"number\">4500</span>,</span><br><span class=\"line\">    height: <span class=\"number\">25</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bob: &#123;</span><br><span class=\"line\">    length: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    weight: <span class=\"number\">2500</span>,</span><br><span class=\"line\">    height: <span class=\"number\">55</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  john: &#123;</span><br><span class=\"line\">    length: <span class=\"number\">9</span>,</span><br><span class=\"line\">    weight: <span class=\"number\">3500</span>,</span><br><span class=\"line\">    height: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ,</span><br><span class=\"line\">  josh: &#123;</span><br><span class=\"line\">    length: <span class=\"number\">9</span>,</span><br><span class=\"line\">    weight: <span class=\"number\">2500</span>,</span><br><span class=\"line\">    height: <span class=\"number\">30</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> peopleRef = firebase.database().ref(<span class=\"string\">'people'</span>);</span><br><span class=\"line\">peopleRef.set(people);</span><br><span class=\"line\">peopleRef.orderByChild(<span class=\"string\">'height'</span>).once(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dataSnapshot</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注意 是對 dataSnapshot 做 forEach，不是對 dataSnapshot.val()</span></span><br><span class=\"line\">  dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'orderByChild'</span>, item.val());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// startAt() 過濾多少以上的資料</span></span><br><span class=\"line\"><span class=\"comment\">// endAt() 過濾多少以下的資料</span></span><br><span class=\"line\">peopleRef.orderByChild(<span class=\"string\">'weight'</span>).startAt(<span class=\"number\">3500</span>).endAt(<span class=\"number\">4500</span>).once(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dataSnapshot</span>) </span>&#123;</span><br><span class=\"line\">  dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'startAt endAt'</span>, item.val());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equalTo() 過濾特定數值的資料</span></span><br><span class=\"line\">peopleRef.orderByChild(<span class=\"string\">'weight'</span>).equalTo(<span class=\"number\">2500</span>).once(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dataSnapshot</span>) </span>&#123;</span><br><span class=\"line\">  dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'equalTo'</span>, item.val());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// limit</span></span><br><span class=\"line\">peopleRef.orderByChild(<span class=\"string\">'weight'</span>).startAt(<span class=\"number\">2500</span>).limitToLast(<span class=\"number\">1</span>).once(<span class=\"string\">'value'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dataSnapshot</span>) </span>&#123;</span><br><span class=\"line\">  dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'limitTofirst'</span>, item.val());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","categories":["Firebase"],"tags":["JavaScript","Firebase"]},{"title":"Google Analytics - GA分析無法做到的事","url":"/analytics/20200412/3846114323/","content":"<h2 id=\"GA-未提供以下功能\"><a href=\"#GA-未提供以下功能\" class=\"headerlink\" title=\"GA 未提供以下功能\"></a>GA 未提供以下功能</h2><ul><li>無法永久刪除報表內資料，只能透過篩選條件來過濾資料。</li><li>沒有即時通知功能</li><li>無法查看使用者 IP</li><li>沒有主機傳輸量統計</li><li>沒有競爭分析比較</li></ul><h2 id=\"GA-報表誤差來源\"><a href=\"#GA-報表誤差來源\" class=\"headerlink\" title=\"GA 報表誤差來源\"></a>GA 報表誤差來源</h2><ol><li><p>客戶端環境影響</p><ul><li>防火牆或防毒的設定</li><li>封鎖資訊的瀏覽器套件(AdBlock)</li><li>瀏覽器 JS 功能被停用</li><li>GA 分析的 JS 載入速度過慢</li></ul></li><li><p>無法辨認新訪客正確度</p><ul><li>同一使用者使用不同網域進入</li><li>多人共用裝置</li><li>單一使用者使用多款裝置</li></ul></li></ol><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>本篇只著重說明 “GA 本身無法做到的事”，其他很多需求都可以透過 GA 所提供的 API 文件來達到分析功能。</p><h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><p><a href=\"https://blog.user.today/google-analytics-could-not-do/\" target=\"_blank\" rel=\"noopener\">https://blog.user.today/google-analytics-could-not-do/</a></p>","categories":["Analytics"],"tags":["w3HexSchool","Analytics"]},{"title":"Git Flow 與 Commit 團隊協作規範","url":"/git/20201104/138987188/","content":"<h2 id=\"Git-Flow\"><a href=\"#Git-Flow\" class=\"headerlink\" title=\"Git Flow\"></a>Git Flow</h2><p>於 2010 年提出的<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener\"><code>開發流程觀念</code></a>，往後還有其他諸如 <code>GitHub Flow</code>、<code>Gitlab Flow</code>，而這些流程的最終目的都是 <code>讓專案變得更好維護管理</code></p><h2 id=\"分支介紹\"><a href=\"#分支介紹\" class=\"headerlink\" title=\"分支介紹\"></a>分支介紹</h2><p>主要會有 <code>main</code>、<code>develop</code>、<code>hotfix</code>、<code>release</code> 以及 <code>feature</code>，除了 <code>main</code>、<code>develop</code> 兩個以外，其餘都會因為完成該分支任務後就被刪除，而這兩個又被稱為長期分支，一直會保存在整份版控內。<br>以下將介紹各分支的主要負責範疇:</p><ul><li><p>main (原為 master，於 2020/10變更)<br><a href=\"https://www.ithome.com.tw/news/140094\" target=\"_blank\" rel=\"noopener\">master更名成main</a><br>主要為穩定、上線的版本，分支來源僅能從其他分支合併過來，不該允許開發者直接 <code>commit</code> 到 <code>main</code> 分支。一般在專案初期環境建好後都會拉出 <code>develop</code> 分支出去，並維持 main 分支獨立性。</p></li><li><p>develop<br>為所有開發分支的基礎，也就是說當新增/修改功能的時候，都由此分支切出去，而完成之後會合併於此分支</p></li><li><p>hotfix<br>當線上版本發生緊急問題需要修復的時候，會由 <code>main</code> 切出一個 <code>hotfix</code> 分支修復進級問題，修復完成後也會合併回 <code>main</code> 分支，但也記得要合併到 develop 分支。<br>由於 develop 可能還在開發中，所以一開始並不會從 develop 切出 <code>hotfix</code> 分支，避免在合併到 <code>main</code> 分支時出現更嚴重問題。</p></li><li><p>feature<br>當需要開發新功能時，會從 develop 切出 <code>feature</code> 分支，並且在分支命名上會採用 <code>feature/功能名稱</code> 的形式，是由於若只使用 <code>feature</code> 作為分支名稱，會讓其他團隊成員無法開 <code>feature/功能名稱</code> 的分支，這是 Git 開分支原則所導致的。</p></li><li><p>release<br>由 develop 切出來，是當仗勢上線前的最終測試分支，測試通過後會將 <code>release</code> 合併到 <code>main</code> 以及 <code>develop</code>，以確保在 <code>release</code> 時有修正一些問題能同步到 <code>main</code> <code>develop</code>。</p></li></ul><h2 id=\"Git-Commit-規範\"><a href=\"#Git-Commit-規範\" class=\"headerlink\" title=\"Git Commit 規範\"></a>Git Commit 規範</h2><p>Commit 的 type</p><ul><li><code>feat</code> - 新增/修改功能</li><li><code>fix</code> - 修正 Bug</li><li><code>docs</code> - 修改/新增文件</li><li><code>style</code> - 修改程式碼格式或風格，不影響原有運作，ex: ESLint、stylelint..etc</li><li><code>refactor</code> - 重構 or 優化，不屬於 bug 也不屬於新增功能等</li><li><code>test</code> - 增加測試功能</li><li><code>chore</code> - 增加或修改第三方套件等</li></ul><p>必須將以往執行 <code>git commit -m &#39;xxxx&#39;</code> 方式改成 <code>git commit</code>，會出現 <code>vi編輯器</code>，隨後開始編輯([i]鍵)，完成後則結束編輯([:] 鍵)，最後輸入 <code>wq</code>(儲存[q]、編輯[q])，就會上傳 Commit。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://gitbook.tw/chapters/gitflow/why-need-git-flow.html\" target=\"_blank\" rel=\"noopener\">Git Flow 是什麼？為什麼需要這種東西？</a><br><a href=\"https://hsiangfeng.github.io/git/20200914/1124442109/\" target=\"_blank\" rel=\"noopener\">淺談 Git Flow 與 commit 規範</a></p>","categories":["Git"],"tags":["Git","Git Flow"]},{"title":"Git - 重新命名分支","url":"/git/20201115/2627644797/","content":"<h2 id=\"指令介紹\"><a href=\"#指令介紹\" class=\"headerlink\" title=\"指令介紹\"></a>指令介紹</h2><ul><li><p><code>git branch -m [old branch name] [new branch name]</code></p><ul><li>old branch name: 舊分支名稱 ex: Cloud</li><li>new branch name: 新分支名稱 ex: newCloud</li></ul></li><li><p><code>git push origin -m [new branch name] :[old branch name]</code><br>ex: git push origin -m newCloud :Cloud<br>如此一來，就可以在 github 上看到重新命名的分支了。</p></li></ul><h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>由於 <code>master</code> 是主分支，所以並不能替 <code>master</code> 重新命名，這點要特別注意。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://hsiangfeng.github.io/git/20190802/1198998279/\" target=\"_blank\" rel=\"noopener\">GitHub 重新命名分支名稱</a></p>","categories":["Git"],"tags":["Git","GitHub"]},{"title":"Git 多平台換行符問題","url":"/git/20190909/4060533944/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前開發者使用的作業系統大多分為兩類，Mac 以及 Windows 。<br>前者是使用 LF 當作換行符，後者使用的是 CRLF，這兩者差異這邊就不多說明。<br>在 Github 上做版本控管時，都是採用 LF 在紀錄的，此時 Windows 用戶就必須調整成 LF 格式才行提交，<code>git</code> 有提供相關配置制來解決這問題。</p><h2 id=\"配置指令\"><a href=\"#配置指令\" class=\"headerlink\" title=\"配置指令\"></a>配置指令</h2><p>可參考以下配置命令，在 git bash 環境執行就行</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 提交時轉換為 LF，檢出時轉換為CRLF</span><br><span class=\"line\">git config --global core.autocrlf true</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交時轉換為 LF，檢出時不转换</span><br><span class=\"line\">git config --global core.autocrlf input</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交檢出均不轉換</span><br><span class=\"line\">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><p>調整 <code>autocrlf</code> 後，也要再調整 <code>safecrlf</code> 設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 拒絕提交包含混合换行符的文件</span><br><span class=\"line\">git config --global core.safecrlf true</span><br><span class=\"line\"></span><br><span class=\"line\"># 允許提交包含混合換行符的文件</span><br><span class=\"line\">git config --global core.safecrlf false</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交包含混合換行符的文件時给出警告</span><br><span class=\"line\">git config --global core.safecrlf warn</span><br></pre></td></tr></table></figure><h2 id=\"多平台配置-推薦\"><a href=\"#多平台配置-推薦\" class=\"headerlink\" title=\"多平台配置(推薦)\"></a>多平台配置(推薦)</h2><p>目前我也是使用以下配置:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.autocrlf input</span><br><span class=\"line\">git config --global core.safecrlf true</span><br></pre></td></tr></table></figure><p>說明: 此配置在代碼中若有 CRLF 文件將無法提交，可使用 <code>dos2unix</code> 方法來完成，若文件都為 LF 格式則可以提交，在檢出時也都會是 LF 格式</p>","categories":["Git"],"tags":["Git"]},{"title":"Hexo 架站攻略 - 加入 Facebook 點讚與分享","url":"/hexo/20190904/2088167264/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好文章就是要點讚與分享，怎麼可以少了這個功能呢?!!跟著我一起來加入 FB 的大拇指吧。</p><a id=\"more\"></a><h2 id=\"建立-FB-應用程式\"><a href=\"#建立-FB-應用程式\" class=\"headerlink\" title=\"建立 FB 應用程式\"></a>建立 FB 應用程式</h2><p>來到 FB 的開發人員模式，點選 “新增應用程式”，輸入網站名稱後即可。這邊要注意的是，FB 有時會改版畫面，但都大同小異，找到相同字樣幾乎就對啦!!<br><img src=\"https://i.imgur.com/JBnCc7q.png\" alt=\"\"><br><img src=\"https://i.imgur.com/3GwvhBS.png\" alt=\"\"><br>接著到基本設定中填寫 “網址” 後儲存，由於使用 FB 的功能會需要設定隱私權頁面，稍後會說明該如何設定<br><img src=\"https://i.imgur.com/GlSv2TF.png\" alt=\"\"></p><h2 id=\"設定-FB-隱私權政策\"><a href=\"#設定-FB-隱私權政策\" class=\"headerlink\" title=\"設定 FB 隱私權政策\"></a>設定 FB 隱私權政策</h2><p>輸入以下建立指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page &#39;Privacy Policy&#39;</span><br></pre></td></tr></table></figure><p>在 <code>source/Privacy-Policy</code> 中的 <code>index.md</code> 輸入以下隱私權政策內容<br><img src=\"https://i.imgur.com/4gisExJ.png\" alt=\"\"></p><p>建立完頁面後回到 FB 將之前紅箭頭處所指的 <code>隱私權政策網址</code> 填入 <code>https://syj0905.github.io/Privacy-Policy</code>，前面記得改成自己的網站喔!!<br><img src=\"https://i.imgur.com/9yzawFD.png\" alt=\"\"><br>輸入完成後開啟上方的服務即可</p><h2 id=\"設置-FB-留言板\"><a href=\"#設置-FB-留言板\" class=\"headerlink\" title=\"設置 FB 留言板\"></a>設置 FB 留言板</h2><p>開啟 <code>主題配置文件</code> _config.yml 搜尋 <code>Facebook SDK Support</code>，修改設定檔配置，應用程式編號在 FB 控制台可以看到，貼上它吧。<br><img src=\"https://i.imgur.com/f5vReIp.png\" alt=\"\"></p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"fatal unable to access XXX The requested URL returned error 403","url":"/git/20190909/4277318126/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下先說明一下情境:<br>Cloud 在公司第一天，就直接登入公司的 Github 並 clone 下一份專案，開啟分支進行他的第一份任務。完成後 push 上遠端也沒什麼問題。隔天，Cloud 想要紀錄一下昨天開發時遇到的問題，就登入自己的 Github clone 自己的部落格資料夾，一樣開始撰寫文章，等到要 push 上遠端時，git 出現了以下情形:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">remote: Permission to SYJ0905&#x2F;SYJ0905.github.io.git denied to XXX.</span><br><span class=\"line\">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;SYJ0905&#x2F;SYJ0905.github.io.git&#x2F;&#39;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure><p>究竟為什麼會發生無法上傳的問題呢?</p><h2 id=\"找出問題\"><a href=\"#找出問題\" class=\"headerlink\" title=\"找出問題\"></a>找出問題</h2><p>會發生第二個專案無法 push 是因為目前的使用者已經綁定了第一個專案的 repo，導致對應的 repo 對不上。這裡提供兩個解決方法</p><h3 id=\"第一個-調整設定檔\"><a href=\"#第一個-調整設定檔\" class=\"headerlink\" title=\"第一個 : 調整設定檔\"></a>第一個 : 調整設定檔</h3><p>進到專案料夾找尋 <code>.git</code> 檔，這需要開啟 “顯示隱藏的項目” 設定才會看到<br><img src=\"https://i.imgur.com/rpO1WYl.png\" alt=\"\"><br>進到 <code>.git</code> 中打開 <code>config</code> 檔案，加入以下範例</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl &#x3D; https:&#x2F;&#x2F;github帳號:github密碼@github.com&#x2F;xxx&#x2F;xxx.git</span><br><span class=\"line\">\tfetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br></pre></td></tr></table></figure><p>修改完後就可以安心的 push 啦!!</p><h3 id=\"第二個-調整-Windows-設定\"><a href=\"#第二個-調整-Windows-設定\" class=\"headerlink\" title=\"第二個 : 調整 Windows 設定\"></a>第二個 : 調整 Windows 設定</h3><p>搜尋 <code>Windows 認證</code> ，找到 github 相關資訊，編輯 github 帳號密碼後重新 push 即可。<br><img src=\"https://i.imgur.com/El9VyEd.png\" alt=\"Windows 認證\"><br><img src=\"https://i.imgur.com/GJJ8pzh.png\" alt=\"\"></p><h3 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h3><p>這方法也不算很完美，真正應該是用 SSH 的方法才對，但 ssh 在 Windows 上的路徑一直都很奇怪，網上的資源教學照著做了根本連第一步都無法達成，簡直是太難搞了!!<br>於是，找了很久才找到這兩種方法，真是一個屎坑啊QQ</p><h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><p><a href=\"https://www.jianshu.com/p/93b8f3a794a0\" target=\"_blank\" rel=\"noopener\">解決多用戶時git push失敗，Permission denied返回403的問題</a><br><a href=\"https://hsiangfeng.github.io/git/20190614/391412804/\" target=\"_blank\" rel=\"noopener\">Welcome.Web.World</a></p>","categories":["Git"],"tags":["Git"]},{"title":"Gulp - 使用 Browserify 解決 JavaScript 模塊化問題","url":"/git/20200405/2647002883/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信各位使用 <code>Gulp</code> 時都會搭配 <code>gulp-concat</code> 合併檔案，但如果是 <code>JS</code> 要 <code>import</code> 其他檔案(ex: JS、JSON) 就不能用 <code>gulp-concat</code>　合併而已，因為這樣會在使用的時候，出現　xxx(import 進來的變數宣告) is not defined。<br><code>gulp-concat</code> 只是純粹合併檔案，沒有包括 <code>ES6</code> 的解析功能，所以若是不加以處理的話，會在合併過後的 <code>JS</code> 檔依舊出現 <code>import xxx from &#39;../data.js&#39;</code> 這樣的程式碼哩。</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>輸入以下安裝代碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install  browserify -S</span><br><span class=\"line\">npm install vinyl-source-stream -S</span><br><span class=\"line\">npm install vinyl-buffer -S</span><br></pre></td></tr></table></figure><p>並在 <code>gulp.js</code> 添加任務</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> browserify = <span class=\"built_in\">require</span>(<span class=\"string\">'browserify'</span>); <span class=\"comment\">/* 插件，實際是 node 系 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stream = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-source-stream'</span>); <span class=\"comment\">/* 轉成 stream 流，gulp 系 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"built_in\">require</span>(<span class=\"string\">'vinyl-buffer'</span>); <span class=\"comment\">/* 轉成二進制流，gulp 系 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'browserify'</span>, () =&gt; </span><br><span class=\"line\">  browserify(<span class=\"string\">'./src/js/main.js'</span>) <span class=\"comment\">/* 合併過後的 js 檔 */</span></span><br><span class=\"line\">    .bundle()</span><br><span class=\"line\">    .pipe(stream(<span class=\"string\">'main.js'</span>))</span><br><span class=\"line\">    .pipe(buffer())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'./dist/js'</span>)) <span class=\"comment\">/* 輸出檔案位置 */</span></span><br><span class=\"line\">    .pipe(browserSync.stream()) <span class=\"comment\">/* 若有使用 browserSync 就需要加 */</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">/* 清除編譯後 js */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'cleanJs'</span>, () =&gt;</span><br><span class=\"line\">  gulp.src([<span class=\"string\">'./src/js/main.js'</span>, <span class=\"string\">'./src/js/main.js.map'</span>], &#123; <span class=\"attr\">read</span>: <span class=\"literal\">false</span>, <span class=\"attr\">allowEmpty</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">    .pipe($.clean())</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 正式環境任務 */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'build'</span>,</span><br><span class=\"line\">  gulp.series(</span><br><span class=\"line\">    <span class=\"string\">'js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'browserify'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cleanJs'</span>,</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 測試環境任務 */</span></span><br><span class=\"line\">gulp.task(<span class=\"string\">'default'</span>,</span><br><span class=\"line\">  gulp.series(</span><br><span class=\"line\">    <span class=\"string\">'js'</span>,</span><br><span class=\"line\">    <span class=\"string\">'browserify'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cleanJs'</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">done</span>) </span>&#123;</span><br><span class=\"line\">      browserSync.init(&#123;</span><br><span class=\"line\">        server: &#123;</span><br><span class=\"line\">          baseDir: <span class=\"string\">\"./dist\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        reloadDebounce: <span class=\"number\">2000</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      gulp.watch([<span class=\"string\">'./src/js/**/*.js'</span>, <span class=\"string\">'!./src/js/main.js'</span>, <span class=\"string\">'!./src/js/main.js.map'</span>], gulp.series(<span class=\"string\">'js'</span>, <span class=\"string\">'browserify'</span>, <span class=\"string\">'cleanJs'</span>));</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>接下來在就可以在個別的 <code>JS</code> 檔中使用 <code>import</code>、<code>export</code> 功能<br>ex: 在 <code>all.js</code> 中引入 <code>json</code> 檔</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* all.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> languageData <span class=\"keyword\">from</span> <span class=\"string\">'../data/language.json'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(languageData);</span><br><span class=\"line\">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>執行 <code>gulp</code> 後即可看到 <code>import</code> 進來的 json 資料，同理也可使用在 <code>js</code> 的 <code>modules function</code> 上。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://csspod.com/using-browserify-with-gulp/\" target=\"_blank\" rel=\"noopener\">在 Gulp 中使用 Browserify</a><br><a href=\"https://www.jianshu.com/p/34d9782f9cd6\" target=\"_blank\" rel=\"noopener\">gulp + browserify 搭建es6环境</a></p>","categories":["Git"],"tags":["JavaScript","w3HexSchool","Gulp"]},{"title":"Hexo 架站攻略 - 壓縮檔案，榨出更多效能","url":"/hexo/20190903/2956452565/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>效能是網站很重要的一個指標，使用者的時間都是寶貴的，那怕是 1~2 秒的等待時間都有可能關掉分頁並另外尋找其他資訊。<br>為了讓大家願意停留在我的網站上，咱們就來壓縮吧，榨出更多的效能。</p><a id=\"more\"></a><h2 id=\"安裝壓縮套件\"><a href=\"#安裝壓縮套件\" class=\"headerlink\" title=\"安裝壓縮套件\"></a>安裝壓縮套件</h2><p>輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h2 id=\"加入設定\"><a href=\"#加入設定\" class=\"headerlink\" title=\"加入設定\"></a>加入設定</h2><p>在根目錄上的 _config.yml 加入以下程式碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## hexo-neat</span><br><span class=\"line\"># 壓縮</span><br><span class=\"line\">neat_enable: true</span><br><span class=\"line\"># 壓縮HTML</span><br><span class=\"line\">neat_html:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\"># 壓縮CSS</span><br><span class=\"line\">neat_css:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  exclude:</span><br><span class=\"line\">    - &#39;**&#x2F;*.min.css&#39;</span><br><span class=\"line\"># 壓縮JS</span><br><span class=\"line\">neat_js:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  mangle: true</span><br><span class=\"line\">  output:</span><br><span class=\"line\">  compress:</span><br><span class=\"line\">  exclude:</span><br></pre></td></tr></table></figure><p>JS 壓縮暫時沒有做，容易出問題，等測試過後會在更新文章。</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - NexT 分類與標籤頁不要有留言板","url":"/hexo/20190903/1869961432/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>來看看底下這張圖有沒有覺得哪裡奇怪了??</p><a id=\"more\"></a><p><img src=\"https://i.imgur.com/j6wj8bq.png\" alt=\"\"><br>有看出來不?沒錯，就是標籤頁多出了留言板，不只如此，在分類頁也有狀況，本篇就來解決這個問題。</p><h2 id=\"修改模板\"><a href=\"#修改模板\" class=\"headerlink\" title=\"修改模板\"></a>修改模板</h2><p>會出現留言板代表與文章內頁是套用同一個模板，所以就來找一下到底是用了哪一個模板，並加入判斷式來決定到底要不要出現留言板就行了。<br>首先來到 themes/layout/_layout.swig，搜尋 <code>comments.swig</code> 依照下圖紅箭頭處加入判斷式<br><img src=\"https://i.imgur.com/CkhMfCH.png\" alt=\"\"><br>最後重啟服務就能看到標籤頁與分類頁已經沒有留言板囉!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - NexT 相關設定","url":"/hexo/20190902/2780600461/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>NexT 提供很多設定可以讓每位使用者依據個人喜好來做修改，建立專屬於你的個人配置。本身有點強迫症的我來說，文章必須要井然有序的分類整齊，而不單單只是紀錄而已，畢竟之後開發時如果忘記一些資訊也比較好找。<br>有關 NexT 的設置均在 themes 中的 <code>_config.yml</code> 來做修改，而不是在根目錄的 <code>_config.yml</code> 喔!!</p><a id=\"more\"></a><h2 id=\"選擇-Scheme\"><a href=\"#選擇-Scheme\" class=\"headerlink\" title=\"選擇 Scheme\"></a>選擇 Scheme</h2><p><img src=\"https://i.imgur.com/omz7nSs.png\" alt=\"選擇 Scheme\" title=\"選擇 Scheme\"></p><ul><li>Muse - 默認Scheme</li><li>Mist - Muse 的緊湊版本</li><li>Pisces - 雙欄Scheme</li><li>Gemini - 雙欄Scheme(跟 Pisces 好像一樣 ??)</li></ul><h2 id=\"選單分類\"><a href=\"#選單分類\" class=\"headerlink\" title=\"選單分類\"></a>選單分類</h2><p>在 _config.yml 搜尋 <code>Menu Settings</code> 即可找到<br><img src=\"https://i.imgur.com/9ZUfXUm.png\" alt=\"選單分類\" title=\"選單分類\"><br>依據個人喜好選擇即可<br>另外，在 source 底下要根據你的設定新增資料夾與頁面</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure><p><img src=\"https://i.imgur.com/G6xrCDr.png\" alt=\"設定\"></p><h2 id=\"側欄設定\"><a href=\"#側欄設定\" class=\"headerlink\" title=\"側欄設定\"></a>側欄設定</h2><h3 id=\"修改選單位置\"><a href=\"#修改選單位置\" class=\"headerlink\" title=\"修改選單位置\"></a>修改選單位置</h3><p>在 _config.yml 搜尋 <code>Sidebar Position</code> ，將位置更改為左或右(你爽就好)</p><h3 id=\"修改頭像\"><a href=\"#修改頭像\" class=\"headerlink\" title=\"修改頭像\"></a>修改頭像</h3><p>在 _config.yml 搜尋 <code>avatar</code>，可參考以下範例</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">avatar:</span><br><span class=\"line\">  url: &#x2F;images&#x2F;avatar.png</span><br><span class=\"line\">  rounded: true</span><br><span class=\"line\">  opacity: 1</span><br><span class=\"line\">  rotated: false</span><br></pre></td></tr></table></figure><p>至於頭像檔案可以放在 themes 底下的 source <code>img</code> 資料夾內</p><p><img src=\"https://i.imgur.com/QzI3bCh.png\" alt=\"修改頭像\" title=\"修改頭像\"></p><h3 id=\"修改滾動效果\"><a href=\"#修改滾動效果\" class=\"headerlink\" title=\"修改滾動效果\"></a>修改滾動效果</h3><p>在 _config.yml 搜尋 <code>scrollpercent</code> ，並將 <code>scrollpercent: false</code> 改為 <code>scrollpercent: true</code>，可以看到滾動時的百分比呦!!</p><h3 id=\"社群連結\"><a href=\"#社群連結\" class=\"headerlink\" title=\"社群連結\"></a>社群連結</h3><p>在 _config.yml 搜尋 <code>Social Links</code>，可以看到很多社群連結的設定<br><img src=\"https://i.imgur.com/7HhII0s.png\" alt=\"社群連結\" title=\"社群連結\"><br>想顯示哪個就取消註解並更改連結就能使用了。</p><h3 id=\"加入友情連結\"><a href=\"#加入友情連結\" class=\"headerlink\" title=\"加入友情連結\"></a>加入友情連結</h3><p>在 _config.yml 搜尋 <code>links_settings</code>，加入其他部落格連結</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Blog rolls</span><br><span class=\"line\">links_settings:</span><br><span class=\"line\">  icon: link</span><br><span class=\"line\">  title: 友情連結</span><br><span class=\"line\">  # Available values: block | inline</span><br><span class=\"line\">  layout: block</span><br><span class=\"line\"></span><br><span class=\"line\">links:</span><br><span class=\"line\">  顯示名稱: &#x2F;&#x2F; 網址</span><br></pre></td></tr></table></figure><h2 id=\"版權設置\"><a href=\"#版權設置\" class=\"headerlink\" title=\"版權設置\"></a>版權設置</h2><p>在 _config.yml 搜尋 <code>copyright</code>，不輸入則顯示網站作者名稱<br>其他有 Hexo 預設的字也能清除，可參考底下圖片及紅箭頭處<br><img src=\"https://i.imgur.com/k9MhWH2.png\" alt=\"版權設置\" title=\"版權設置\"><br>版權文字前有個小圖示，可以增加動畫效果，須將 <code>animated</code> 改為 <code>true</code> ，但不是很明顯，斟酌使用。</p><h2 id=\"美化效果\"><a href=\"#美化效果\" class=\"headerlink\" title=\"美化效果\"></a>美化效果</h2><h3 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h3><p>在 _config.yml 搜尋 <code>codeblock</code>，可調整樣式<br><img src=\"https://i.imgur.com/B4Sr5Dm.png\" alt=\"程式碼區塊\" title=\"程式碼區塊\"></p><h3 id=\"Github-follow-me-右上角圖示\"><a href=\"#Github-follow-me-右上角圖示\" class=\"headerlink\" title=\"Github follow me 右上角圖示\"></a>Github follow me 右上角圖示</h3><p>在 _config.yml 搜尋 <code>github_banner</code>，照以下範例即可享有右上角圖示</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">github_banner:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  permalink: https:&#x2F;&#x2F;github.com&#x2F;SYJ0905</span><br><span class=\"line\">  title: Follow me on GitHub</span><br></pre></td></tr></table></figure><h3 id=\"頁面切換時動畫\"><a href=\"#頁面切換時動畫\" class=\"headerlink\" title=\"頁面切換時動畫\"></a>頁面切換時動畫</h3><p>在 _config.yml 搜尋 <code>motion</code><br><img src=\"https://i.imgur.com/iUDYoaz.png\" alt=\"loading動畫\" title=\"loading動畫\"><br>有很多效果可以套用，任君挑選!!</p><h3 id=\"lightbox-效果\"><a href=\"#lightbox-效果\" class=\"headerlink\" title=\"lightbox 效果\"></a>lightbox 效果</h3><p>直接照著官方文件就可以運行起來了，工程師不要連英文都懶得看喔~~<br><a href=\"https://github.com/theme-next/theme-next-fancybox3\" target=\"_blank\" rel=\"noopener\">theme-next-fancybox3</a><br><img src=\"https://i.imgur.com/oidfcis.png\" alt=\"\"></p><h3 id=\"背景效果\"><a href=\"#背景效果\" class=\"headerlink\" title=\"背景效果\"></a>背景效果</h3><p>效果有分 “粒子” 與 “3D” 兩種，我來教大家怎麼找這些資源，首先來到 _config.yml ， 接著搜尋 <code>Animation Settings</code>，這部分以下都是插件，並且都有附網址可直接參照文件來進行配置。<br><img src=\"https://i.imgur.com/GG8hYGA.png\" alt=\"\"></p><h2 id=\"進度條效果\"><a href=\"#進度條效果\" class=\"headerlink\" title=\"進度條效果\"></a>進度條效果</h2><p>直接照著官方文件就可以運行起來了。<br><a href=\"https://github.com/theme-next/theme-next-pace\" target=\"_blank\" rel=\"noopener\">theme-next-pace</a><br><img src=\"https://i.imgur.com/so2TEoY.png\" alt=\"\"></p><h2 id=\"增加留言板\"><a href=\"#增加留言板\" class=\"headerlink\" title=\"增加留言板\"></a>增加留言板</h2><p>先到 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus</a> 點選 GET STARTED<br><img src=\"https://i.imgur.com/z147laC.png\" alt=\"Disqus\"><br>選擇 I want to install Disqus on my site<br><img src=\"https://i.imgur.com/CfAtRjw.png\" alt=\"\"><br>創建一個 new site</p><ul><li>Websit Name 是自訂名稱(不要填寫部落格網址)，位置會在下圖紅箭頭處<br><img src=\"https://i.imgur.com/mU0KmVq.png\" alt=\"\"><br>接下來到右上角的控制台選擇 <code>Settings</code>，進畫面後再次到右上角齒輪選擇 <code>Admin</code>，點選紅色箭頭處的連結<br><img src=\"https://i.imgur.com/cAAeIEI.png\" alt=\"\"><br>點擊右方 <code>Edit Setting</code><br><img src=\"https://i.imgur.com/6kDruMS.png\" alt=\"\"><br>會看到你剛剛所建立的 <code>short name</code><br><img src=\"https://i.imgur.com/Ugj7UPe.png\" alt=\"\"><br>在 themes 的 _config.yml 中搜尋 <code>Disqus</code>，修改相關設定<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  shortname: clouds-blog &#x2F;&#x2F; 填入您專屬的 short name</span><br><span class=\"line\">  count: true</span><br><span class=\"line\">  lazyload: false</span><br><span class=\"line\">  #post_meta_order: 0</span><br></pre></td></tr></table></figure>我也不知道為什麼我的會多一個 s 在那邊 = =</li></ul><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>Hexo 跟 NexT 有很多有趣的設定跟各式各樣的插件可以玩，本篇文章在後續也會繼續更新，目前寫的配置跟我的網站配置是一樣的，所以各位小夥伴如果還不知道怎麼配置，不仿先看看整個網頁是不是你喜歡的，如果是就一步一步照著做吧!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - 加入 GA 及 Sitemap","url":"/hexo/20190905/2530705383/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>寫技術部落格不光是記錄自己的開發過程，也希望能讓其他開發者在踩坑時能夠幫助到他們，畢竟我到目前為止都還是會看其他人的踩坑紀錄和文章。在這個前端大坑裡，有太多東西要學了，總是希望有人能稍微提點一下，於是能讓爬蟲抓到，以便其他人搜尋時能更快找到解答。</p><a id=\"more\"></a><h2 id=\"加入-GA-追蹤碼\"><a href=\"#加入-GA-追蹤碼\" class=\"headerlink\" title=\"加入 GA 追蹤碼\"></a>加入 GA 追蹤碼</h2><p>這部分網路上有很多教學，最後我們會得到一組 GA 追蹤碼<br>EX: <code>UA-XXXXXX-1</code><br>來到主題配置 _config.yml 搜尋 <code>Google Analytics</code>，依據個人 GA 修改</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">google_analytics:</span><br><span class=\"line\">  tracking_id: UA-XXXXXX-1</span><br><span class=\"line\">  localhost_ignored: true</span><br></pre></td></tr></table></figure><h2 id=\"加入-Sitemap\"><a href=\"#加入-Sitemap\" class=\"headerlink\" title=\"加入 Sitemap\"></a>加入 Sitemap</h2><p>首先要安裝插件</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure><p>到 <a href=\"https://search.google.com/search-console/about?hl=zh-tw\" target=\"_blank\" rel=\"noopener\">Google Search</a>加入我們網站，並取得驗證碼<br>在主題配置 _config.yml 搜尋 <code>Google Webmaster</code></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Google Webmaster tools verification.</span><br><span class=\"line\">See: https:&#x2F;&#x2F;www.google.com&#x2F;webmasters</span><br><span class=\"line\">google_site_verification: &#x2F;&#x2F; 驗證碼</span><br></pre></td></tr></table></figure>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - 加入 RSS 通知","url":"/hexo/20190905/3148275584/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>RSS（簡易資訊聚合）是一種訊息來源格式規範，用以聚合經常發布更新資料的網站。訂閱 RSS 意味著當網站更新時，方便用戶獲取最新內容，可以時時關注最新文章。</p><a id=\"more\"></a><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>參考來源: <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a><br>輸入以下安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h2 id=\"設定-RSS-配置\"><a href=\"#設定-RSS-配置\" class=\"headerlink\" title=\"設定 RSS 配置\"></a>設定 RSS 配置</h2><p>到站點 _config.yml 中，加入以下範例</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br><span class=\"line\">  content_limit: 140</span><br><span class=\"line\">  content_limit_delim: &#39; &#39;</span><br><span class=\"line\">  order_by: -date</span><br><span class=\"line\">  icon: icon.png</span><br></pre></td></tr></table></figure><p>重啟服務後就能看到 RSS 圖像囉!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - SEO 優化","url":"/hexo/20190906/285599935/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本篇文章會記錄該如何進一步優化網站 SEO，優化方法有很多種，會陸續更新內容。</p><h2 id=\"建立-sitemap\"><a href=\"#建立-sitemap\" class=\"headerlink\" title=\"建立 sitemap\"></a>建立 sitemap</h2><p>安裝站點地圖套件</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>在 <a href=\"https://search.google.com/search-console/about\" target=\"_blank\" rel=\"noopener\">Google Search Console</a> 提交 sitemap.xml<br><img src=\"https://i.imgur.com/FqRYG8P.png\" alt=\"Google Search Console\"></p><h2 id=\"加入-robots-txt\"><a href=\"#加入-robots-txt\" class=\"headerlink\" title=\"加入 robots.txt\"></a>加入 robots.txt</h2><p><code>Robots.txt</code> 主要行為就是在搜尋引擎檢索網站時，告訴它網站哪些內容可以被檢索，哪些內容可以不用被檢索。<br>在 <code>source</code> 下新增 <code>robots.txt</code> 檔案，並加入以下範例說明即可<br><img src=\"https://i.imgur.com/jeqORKI.png\" alt=\"robots.txt\"></p><h3 id=\"相關參數介紹\"><a href=\"#相關參數介紹\" class=\"headerlink\" title=\"相關參數介紹 :\"></a>相關參數介紹 :</h3><ul><li>User-agent =&gt; 定義下述規則對哪些搜尋引擎生效，即是對象。</li><li>Disallow =&gt; 指定哪些目錄或檔案類型不想被檢索，需指名路徑，否則將會被忽略。</li><li>Allow =&gt; 指定哪些目錄或檔案類型可能被檢索，需指名路徑，否則將會被忽略。</li><li>Sitemap =&gt; 指定網站內的sitemap檔案放置位置，需使用絕對路徑。</li></ul><h3 id=\"常見應用方式與環境\"><a href=\"#常見應用方式與環境\" class=\"headerlink\" title=\"常見應用方式與環境 :\"></a>常見應用方式與環境 :</h3><ul><li>允許所有搜尋引擎檢索所有內容(通常建議使用)<ul><li>User-agent: *</li><li>Disallow:</li></ul></li><li>拒絕所有搜尋引擎檢索所有內容(正式環境請避免使用)<ul><li>User-agent: *</li><li>Disallow: /</li></ul></li><li>拒絕所有搜尋引擎檢索 /members/ 底下所有內容。<ul><li>User-agent: *</li><li>Disallow: /members/</li></ul></li><li>拒絕 Google 爬蟲檢索 /images/ 底下所有內容。<ul><li>User-agent: Googlebot-image</li><li>Disallow:/images/</li></ul></li><li>[萬用字元]拒絕所有搜尋引擎檢索網站內png為副檔名的圖檔。<ul><li>User-agent: *</li><li>Disallow: *.png$</li></ul></li><li>[萬用字元]拒絕 Bing 搜尋引擎檢索網站內 /wp-admin 目錄底下所有內容及網站內開頭為 test 的所有檔名。<ul><li>User-agent: bingbot</li><li>Disallow: /wp-admin/</li><li>Disallow: ^test*</li></ul></li></ul><h2 id=\"開啟-NexT-內建-SEO-優化功能\"><a href=\"#開啟-NexT-內建-SEO-優化功能\" class=\"headerlink\" title=\"開啟 NexT 內建 SEO 優化功能\"></a>開啟 NexT 內建 SEO 優化功能</h2><p>在主題配置 _config.yml 搜尋 <code>SEO Settings</code>，將 <code>seo</code> 改為 <code>true</code> 即可</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Change headers hierarchy on site-subtitle (will be main site description) and on all post &#x2F; page titles for better SEO-optimization.</span><br><span class=\"line\">seo: true</span><br></pre></td></tr></table></figure><h2 id=\"修改連結設定\"><a href=\"#修改連結設定\" class=\"headerlink\" title=\"修改連結設定\"></a>修改連結設定</h2><p>使用 <code>nofollow</code> 技巧避免爬蟲遇到連結後進去回不來的情況產生，目前 NexT 模板有兩處連結需要修正。<br>找到 在 themes 文件中的 <code>themes/next-reloaded/layout/_partials/footer.swig</code></p><ol><li>搜尋 <code>theme-next.org</code>，修改成以下範例<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#&#125;&#123;&#123; __(&#39;footer.theme&#39;) &#125;&#125; – &lt;a href&#x3D;&#39;https:&#x2F;&#x2F;theme-next.org&#39; class&#x3D;&#39;theme-link&#39; rel&#x3D;&#39;external nofoolow&#39;&gt; NexT.Pisces &lt;&#x2F;a&gt;&#123;#</span><br></pre></td></tr></table></figure></li><li>搜尋 <code>hexo.io</code>，將原本的程式碼修改成以下範例<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a href&#x3D;&#39;https:&#x2F;&#x2F;hexo.io&#39; class&#x3D;&#39;theme-link&#39; rel&#x3D;&#39;external nofollow&#39;&gt; Hexo &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id=\"另一種方法-hexo-autonofollow\"><a href=\"#另一種方法-hexo-autonofollow\" class=\"headerlink\" title=\"另一種方法 hexo-autonofollow\"></a>另一種方法 hexo-autonofollow</h3><p>覺得看不懂上方的改寫嗎?又或者是擔心下次改版後又得重新設定嫌麻煩嗎?<br>那就用套件來幫我們自動為非友情連結加上 <code>nofollow</code> 吧!!<br>安裝自動加入連結套件<br><a href=\"https://github.com/liuzc/hexo-autonofollow\" target=\"_blank\" rel=\"noopener\">hexo-autonofollow</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-autonofollow --save</span><br></pre></td></tr></table></figure><p>在站點配置 _config.yml 加入設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nofollow:</span><br><span class=\"line\">\tenable: true</span><br><span class=\"line\">\texclude:</span><br><span class=\"line\">    - &#x2F;&#x2F; 可以加入友情連結，會讓連結不加上 nofollow</span><br></pre></td></tr></table></figure>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - 加入搜尋功能","url":"/hexo/20190905/1239192813/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平常找資源時都會下關鍵字找資料，當然在部落格也希望能夠快速地找到符合自己需求的文章，正所謂時間就是金錢，跟著以下操作為部落格加入搜尋功能吧!!</p><a id=\"more\"></a><h2 id=\"安裝搜尋套件\"><a href=\"#安裝搜尋套件\" class=\"headerlink\" title=\"安裝搜尋套件\"></a>安裝搜尋套件</h2><p>NexT 有提供本身的搜尋功能，輸入以下指令即可<br><a href=\"https://github.com/theme-next/hexo-generator-searchdb\" target=\"_blank\" rel=\"noopener\">hexo-generator-searchdb</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>進到站點(根目錄)下的 _config.yml 複製以下搜尋功能代碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 搜尋功能</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  format: html</span><br><span class=\"line\">  limit: 10000</span><br></pre></td></tr></table></figure><p>相關參數可參考官方 Github 說明</p><h2 id=\"開啟搜尋功能\"><a href=\"#開啟搜尋功能\" class=\"headerlink\" title=\"開啟搜尋功能\"></a>開啟搜尋功能</h2><p>在主題配置 _config.yml 中搜尋 <code>Local Search</code>，將底下的 <code>enable</code> 修改為 <code>true</code>，重啟服務後就可以看到搜尋功能囉!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"Hexo 架站攻略 - 建立與部署","url":"/hexo/20190901/2738918637/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>為了避免其他架站教學的文章遺失，乾脆就自己架站紀錄一下，順便來跟各位小夥伴說明會遇到那些意想不到的坑喔!!<br>本系列教學文來自 Ray 的系列文章在此附上連結，感謝大神的踩雷紀錄!!</p><a id=\"more\"></a><p>Ray 的 <a href=\"https://hsiangfeng.github.io/categories/hexo/\" target=\"_blank\" rel=\"noopener\">Hexo 全系列</a><br><img src=\"https://i.imgur.com/SmnCmdV.png\" alt=\"Hexo\" title=\"Hexo 官網\"></p><h2 id=\"建立-Github-Repo\"><a href=\"#建立-Github-Repo\" class=\"headerlink\" title=\"建立 Github Repo\"></a>建立 Github Repo</h2><p><img src=\"https://i.imgur.com/zEkAKDf.png\" alt=\"建立 Github Repo\" title=\"建立 Github Repo\"><br>Repository name 必須依照以下格式輸入:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">帳戶名稱.github.io</span><br></pre></td></tr></table></figure><h2 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo\"></a>安裝 Hexo</h2><p>依照官網安裝方式，開啟 CMD 輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id=\"建立-Hexo-資料夾環境\"><a href=\"#建立-Hexo-資料夾環境\" class=\"headerlink\" title=\"建立 Hexo 資料夾環境\"></a>建立 Hexo 資料夾環境</h2><p>請先到想要建立資料夾的目錄，並輸入建立指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init projectname</span><br></pre></td></tr></table></figure><p>註: projectname 若已在資料夾內可不用加<br>接著，安裝 npm 相依套件，輸入以下指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure><h2 id=\"運行-Hexo\"><a href=\"#運行-Hexo\" class=\"headerlink\" title=\"運行 Hexo\"></a>運行 Hexo</h2><p>安裝套件後，來運行你的第一個部落格吧!!</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure><p>註: hexo s =&gt; hexo server 簡寫</p><h2 id=\"Hexo-基本設定\"><a href=\"#Hexo-基本設定\" class=\"headerlink\" title=\"Hexo 基本設定\"></a>Hexo 基本設定</h2><p>在 _config.yml 找到 <code>Site</code>，並設定您的內容</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: Cloud F2E Blog # 網站標題</span><br><span class=\"line\">subtitle: 前端開發紀錄 # 網站副標題</span><br><span class=\"line\">description: Front End Engineer # 網站敘述</span><br><span class=\"line\">keywords: # 關鍵字</span><br><span class=\"line\">author: Cloud # 網站作者</span><br><span class=\"line\">language: zh-TW # 網站語系</span><br><span class=\"line\">timezone:</span><br><span class=\"line\"></span><br><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class=\"line\">url: https:&#x2F;&#x2F;syj0905.github.io # 網址</span><br><span class=\"line\">root: &#x2F;</span><br><span class=\"line\">permalink: :category&#x2F;:year:month:day&#x2F;:title&#x2F;</span><br><span class=\"line\">permalink_defaults:</span><br></pre></td></tr></table></figure><h2 id=\"加入版控，所有操作皆在-dev-環境\"><a href=\"#加入版控，所有操作皆在-dev-環境\" class=\"headerlink\" title=\"加入版控，所有操作皆在 dev 環境\"></a>加入版控，所有操作皆在 dev 環境</h2><p>撰寫文章時使用 dev 分支，會有指令直接部屬到 master ，此時遠端資料庫的 master 資料夾結構會變。<br>此做法是為了在兩地(家裡、公司)，皆能寫部落格的方法。<br>如果只在 master 撰寫文章並部屬後，在另一地 <code>git clone</code> 時，會發生沒有 Hexo 的原始碼，因為遠端 master 只會存在部屬的結構。<br>此舉相當重要!!<br>在部落格資料夾路徑內開啟 git bash，依照以下方法加入版控</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add README.md</span><br><span class=\"line\">git commit -m &quot;first commit&quot;</span><br><span class=\"line\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;SYJ0905&#x2F;SYJ0905.github.io.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure><p>接下來開啟分支吧!!</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch dev</span><br><span class=\"line\">git checkout dev</span><br><span class=\"line\">git push origin dev (先推送一次版本)</span><br></pre></td></tr></table></figure><h2 id=\"部屬-GitHub\"><a href=\"#部屬-GitHub\" class=\"headerlink\" title=\"部屬 GitHub\"></a>部屬 GitHub</h2><p>這裡必須先安裝部屬套件，Hexo本身不會預設呦(人家哪知道你要部屬 Github 啦!!)<br><code>npm install hexo-deployer-git --save</code><br>此外，設定檔 _config.yml 內也需要設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;SYJ0905&#x2F;SYJ0905.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><p>可以部屬囉!!<br><code>hexo d g</code></p><p>註: d g =&gt; 部屬靜態頁面(不要寫反了!!)</p><h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><p><code>hexo clean</code><br>註: 刪除已生成的靜態頁面及快取檔案</p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>現在應該就能在 Github 專屬的網址上看到部落格囉!!接下來會開始針對部落格進行優化跟主題配置，有興趣的小夥伴還請多多關注，我將帶著大家一起踩雷!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"HTML - Mobile Safari Meta Tags","url":"/html/20191219/4131003289/","content":"<h2 id=\"Apple-特有的-Meta-Tag-Keys\"><a href=\"#Apple-特有的-Meta-Tag-Keys\" class=\"headerlink\" title=\"Apple 特有的 Meta Tag Keys\"></a>Apple 特有的 Meta Tag Keys</h2><ul><li>apple-mobile-web-app-capable</li><li>apple-mobile-web-app-status-bar-style</li><li>format-detection</li></ul><h3 id=\"apple-mobile-web-app-capable\"><a href=\"#apple-mobile-web-app-capable\" class=\"headerlink\" title=\"apple-mobile-web-app-capable\"></a>apple-mobile-web-app-capable</h3><p>範例程式碼</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>參數設定:<br><code>content</code> : <code>yes</code> or <code>no</code> ，決定是否以全螢幕模式顯示，不會顯示 navigation bar (網址那條)。<br>註:選擇 <code>yes</code>時，狀態列的字都會是黑色的，導致看不見最上方的 status bar(wifi、4G、時間)等等的資訊，如果只想不顯示 navigation bar 但能看到這些資訊該如何呢?<br>那就要搭配 <code>apple-mobile-web-app-status-bar-style</code></p><h3 id=\"apple-mobile-web-app-status-bar-style\"><a href=\"#apple-mobile-web-app-status-bar-style\" class=\"headerlink\" title=\"apple-mobile-web-app-status-bar-style\"></a>apple-mobile-web-app-status-bar-style</h3><p>這個屬性只有在 <code>apple-mobile-web-app-capable</code> 設定為不是全螢幕的狀態下，也就是 <code>apple-mobile-web-app-capable</code> 為 <code>no</code> 時是不會有效果的。<br>範例程式碼</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>參數設定:<br><code>default</code> : 不會顯示出 status bar 的資訊。<br><code>black</code> : 會在 status bar 加上黑色背景，讓 status bar 的內容以白色顯示。<br><code>black-translucent</code> : 這個效果會讓 status bar fiexd 在最上端，而網頁內容則是在下層。</p><h3 id=\"format-detection\"><a href=\"#format-detection\" class=\"headerlink\" title=\"format-detection\"></a>format-detection</h3><p>範例程式碼</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mobile Safari 在預設中會解析網頁的數字，有可能會解析成超連結點擊。<br>設定成 <code>telephone=no</code> 後，則會不解析網頁數字，避免出現問題。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html#//apple_ref/doc/uid/TP40008193-SW1\" target=\"_blank\" rel=\"noopener\">Safari HTML Reference</a></p>","categories":["HTML"],"tags":["HTML"]},{"title":"Hexo 架站攻略 - 主題配置","url":"/hexo/20190902/3237703376/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>總是要來點跟別人不一樣的，Hexo 預先會有一個預設樣式，但我相信各位小夥伴或許都不是很滿意，這邊提供一個相當多用戶所使用的主題配置</p><a id=\"more\"></a><p><a href=\"https://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">NexT</a><br><a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT Github</a><br><img src=\"https://i.imgur.com/9GsDWAo.png\" alt=\"NexT\" title=\"NexT 官網\"></p><h2 id=\"下載主題\"><a href=\"#下載主題\" class=\"headerlink\" title=\"下載主題\"></a>下載主題</h2><p>按照官方文件 <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code> ，此版本有可能是 5.1.4，要注意的一點是該版本並不能透過 <code>git pull</code> 來進行更新。<br><img src=\"https://i.imgur.com/svNOt9S.png\" alt=\"下載 NexT\" title=\"下載 NexT\"><br>這邊來教各位如何取得 6.0 以上的版本，首先來到 <a href=\"https://github.com/theme-next/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">NexT Github</a>，找到 <code>Update</code> 並進入 <code>here</code><br><img src=\"https://i.imgur.com/DNZcGEX.png\" alt=\"NexT Github\"><br>中間有一段可以直接取得 6.0 以上的版本， <code>git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded</code> ，也不知道為什麼官網沒有更新到，還特地寫了一個說明文件，真的有點奇怪。<br><img src=\"https://i.imgur.com/WL483Ys.png\" alt=\"download updated NexT version\"></p><h2 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h2><p>將 clone 下來的 themes 資料夾放入 Hexo 的 themes 內<br><img src=\"https://i.imgur.com/NIBPCA4.png\" alt=\"change themes\"><br>接著到根目錄 _config.yml 將主題更換至 NexT，注意不要跑錯地方喔!<br><img src=\"https://i.imgur.com/BxRV2CJ.png\" alt=\"change themes\"><br>更換後重啟服務即可看到 NexT 主題囉!!</p>","categories":["Hexo"],"tags":["Hexo"]},{"title":"HTML - 響應式圖片技巧","url":"/html/20201117/3198070904/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>覺得圖片載入太慢嗎?覺得圖片在某些裝置模糊嗎?在網頁上使用適當的圖片格式、尺寸能有效的讓網站體驗更加，以下將介紹如何使用 <code>&lt;picture&gt; 、 &lt;source&gt; 、 &lt;img&gt;</code> 來讓瀏覽器根據自身環境決定最適當的圖檔。</p><h2 id=\"圖片依據條件\"><a href=\"#圖片依據條件\" class=\"headerlink\" title=\"圖片依據條件\"></a>圖片依據條件</h2><ul><li>DPR(Device Pixel Ratio): 裝置像素密度，指每一英吋裡含有多少像素。</li><li>Viewport: 網頁可視區域</li></ul><h2 id=\"圖片模糊\"><a href=\"#圖片模糊\" class=\"headerlink\" title=\"圖片模糊\"></a>圖片模糊</h2><p>現在螢幕的 DPR 大多是 1，而貧果裝置就與別人不同，iPhone 的 DPR 是 2，iPad 則是 3，這也就導致圖片在蘋果裝置就會顯得模糊不少。解決辦法則是製作兩張不同解析度的圖片，並根據 DPR 來決定要載入哪張圖片。<br>參考代碼:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"small.jpg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">srcset</span>=<span class=\"string\">\"small.jpg 1x, small_2x.jpg 2x\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"DPR-不清楚怎麼辦\"><a href=\"#DPR-不清楚怎麼辦\" class=\"headerlink\" title=\"DPR 不清楚怎麼辦\"></a>DPR 不清楚怎麼辦</h2><p>可以使用 <code>w</code> 依照 DPR 與 Viewport 兩者決定適當圖片。<br>以下是當螢幕寬度為 500px DPR 為 2，則選擇圖片尺寸為 500px*2 = 1000px，所以就會使用 cloud_m.jpg 。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"small.jpg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">srcset</span>=<span class=\"string\">\"small.jpg 500w, medium.jpg 1000w, large.jpg 1500w\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure><p>而使用 <code>w</code> 就必須指定圖片大小，<code>size</code> 屬性只是選擇條件，不設定 <code>size</code> 就會當成 <code>100vw</code>。<br>以下是當 <code>Viewport</code> 小於or等於 <code>500px</code>，則圖片寬度為 <code>90% Viewport</code>，剩餘為 <code>60% Viewport</code>。當螢幕寬為 500px DPR 是 1，就會選擇 <code>small.jpg</code>(500 <em>0.9</em> 1=450px)</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"small.jpg\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">sizes</span>=<span class=\"string\">\"(max-width: 500px) 90vw, 60vw\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">srcset</span>=<span class=\"string\">\"small.jpg 500w, medium.jpg 1000w, large.jpg 1500w\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"Viewport-選擇適當圖片\"><a href=\"#Viewport-選擇適當圖片\" class=\"headerlink\" title=\"Viewport 選擇適當圖片\"></a>Viewport 選擇適當圖片</h2><p>可使用 <code>media</code> 根據 <code>Viewport</code> 選擇適當圖片。<br>Viewport &gt;= 1200px =&gt; 選擇 large.jpg<br>Viewport &gt;= 768px =&gt; 選擇 medium.jpg<br>都不符合則選擇 small.jpg</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(min-width: 1200px)\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"large.jpg\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(min-width: 768px)\"</span> <span class=\"attr\">srcset</span>=<span class=\"string\">\"medium.jpg\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"small.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"small\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"DPR-、-Viewport-兩者兼得\"><a href=\"#DPR-、-Viewport-兩者兼得\" class=\"headerlink\" title=\"DPR 、 Viewport 兩者兼得\"></a>DPR 、 Viewport 兩者兼得</h2><p>當 Viewport 為 700px 且 DPR 為 2 ，就會選擇 sample-large-2x.jpg 這張圖片</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">picture</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">media</span>=<span class=\"string\">\"(min-width: 600px)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">srcset</span>=<span class=\"string\">\"sample-large-1x.jpg 1x, sample-large-2x.jpg 2x\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">source</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">media</span>=<span class=\"string\">\"(min-width: 400px)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">srcset</span>=<span class=\"string\">\"sample-medium-1.jpg 1x, sample-medium-2.jpg 2x\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"sample-small.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Sample\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"加載效能\"><a href=\"#加載效能\" class=\"headerlink\" title=\"加載效能\"></a>加載效能</h2><p>由於直接使用 <code>&lt;picture&gt;、&lt;source&gt;、&lt;img&gt;</code> 的關係，瀏覽器解析 HTML 時，就會依條件決定要<code>下載</code>哪一張圖片，與 css 中的 <code>Media Query</code> 使用 <code>display:none</code>不同(全部圖片都下載，再依 css 決定顯示與否)，後者會導致浪費過多網路資源，導致選染延遲等等。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://cythilya.github.io/2018/08/24/responsive-images/\" target=\"_blank\" rel=\"noopener\">響應式圖片（Responsive Images）</a><br><a href=\"https://hamisme.blogspot.com/2019/11/html5-picture-tag.html\" target=\"_blank\" rel=\"noopener\">使用picture tag來做到響應式圖片</a><br><a href=\"https://shubo.io/responsive-image/#img-srcset-%E5%B1%AC%E6%80%A7\" target=\"_blank\" rel=\"noopener\">用 img srcset 與 HTML5 picture，讓圖片也能RWD</a></p>","categories":["HTML"],"tags":["Image","RWD","圖片最佳化","Media Query","HTML","Picture","效能調校","加載效能"]},{"title":"HTML - 解決點擊輸入框時，畫面放大情況","url":"/html/20201001/2564304135/","content":"<h2 id=\"meta-tag-方法\"><a href=\"#meta-tag-方法\" class=\"headerlink\" title=\"meta tag 方法\"></a>meta tag 方法</h2><p>在<code>&lt;head&gt;</code>輸入以下設定，會讓裝置的縮放功能給禁止，可謂相當暴力的解法之一。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"CSS-設定\"><a href=\"#CSS-設定\" class=\"headerlink\" title=\"CSS 設定\"></a>CSS 設定</h2><p>在 <code>input</code>、<code>textarea</code>等元素設定 <code>font-size</code>，可以保留畫面縮放功能，並且達到點及輸入框畫面放大問題勒。</p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">textarea</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: initial;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"http://blog.shihshih.com/how-to-disable-zoom-in-when-focusing-on-the-input-box-on-mobile/\" target=\"_blank\" rel=\"noopener\">如何在行動裝置上避免點擊輸入框時畫面放大</a></p>","categories":["HTML"],"tags":["HTML"]},{"title":"JavaScript - 如何獲取前 7 天日期","url":"/javascript/20210222/3564669203/","content":"<h2 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h2><p><code>parseInt(string, radix)</code></p><ul><li><code>string</code> : 待轉成數字的字串。若 string 參數類型不是字串的話，會先將其轉成字串</li><li><code>radix</code> : 從 2 到 36，能代表該進位系統的數字</li></ul><h2 id=\"parseInt-vs-parseFloat-vs-Number\"><a href=\"#parseInt-vs-parseFloat-vs-Number\" class=\"headerlink\" title=\"parseInt() vs parseFloat() vs Number()\"></a>parseInt() vs parseFloat() vs Number()</h2><p>在本範例中，使用這三個函式都是相同結果的，之後會寫一篇專門來介紹這三者的差異</p><h2 id=\"參考程式碼\"><a href=\"#參考程式碼\" class=\"headerlink\" title=\"參考程式碼\"></a>參考程式碼</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> nowMs = now.getTime();</span><br><span class=\"line\"><span class=\"keyword\">const</span> beforeMs = nowMs - (<span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"built_in\">parseInt</span>(<span class=\"number\">7</span>, <span class=\"number\">10</span>));</span><br><span class=\"line\"><span class=\"comment\">// const beforeMs = nowMs - (1000 * 60 * 60 * 24 * parseFloat(7, 10));</span></span><br><span class=\"line\"><span class=\"comment\">// const beforeMs = nowMs - (1000 * 60 * 60 * 24 * Number(7, 10));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> test_1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(beforeMs).toISOString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> test_2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toISOString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'test_1 =&gt; '</span>, test_1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'test_2 =&gt; '</span>, test_2);</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://blog.csdn.net/liuguochao1024/article/details/79576365?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control\" target=\"_blank\" rel=\"noopener\">js获取前七天的日期</a></p>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"Cookie、LocalStorage、SessionStorage 差異","url":"/html/20191112/861460379/","content":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>為伺服器傳送給使用者瀏覽器的一個小片段資料。瀏覽器可能儲存並在下一次請求回傳 cookie 至相同的伺服器。Cookie 通常被用來保持使用者的登入狀態，一般不能超過 20 個。</p><h2 id=\"LocalStorage-SessionStorage\"><a href=\"#LocalStorage-SessionStorage\" class=\"headerlink\" title=\"LocalStorage / SessionStorage\"></a>LocalStorage / SessionStorage</h2><p>兩者皆是 HTML5 標準中新加入的技術，彌補了 Cookie 儲存量小，不適用於大量資料本地儲存的問題。兩者在操作上的 API 都相同，差異在於時效性以及儲存的位置不同。</p><h3 id=\"LocalStorage\"><a href=\"#LocalStorage\" class=\"headerlink\" title=\"LocalStorage\"></a>LocalStorage</h3><p>資料儲存於客戶端本地，不會過期，除非手動清除資料</p><h3 id=\"SessionStorage\"><a href=\"#SessionStorage\" class=\"headerlink\" title=\"SessionStorage\"></a>SessionStorage</h3><p>資料儲存於 session 中，每次分頁或瀏覽器關掉後就會清除，而另開新分頁的話，又會是一個新的 SessionStorage。</p><h2 id=\"三者差異比較\"><a href=\"#三者差異比較\" class=\"headerlink\" title=\"三者差異比較\"></a>三者差異比較</h2><p><img src=\"https://i.imgur.com/IfuUsS3.png\" alt=\"Cookie、LocalStorage、SessionStorage 差異\"></p><h2 id=\"應用時機\"><a href=\"#應用時機\" class=\"headerlink\" title=\"應用時機\"></a>應用時機</h2><h3 id=\"Cookie-1\"><a href=\"#Cookie-1\" class=\"headerlink\" title=\"Cookie:\"></a>Cookie:</h3><p>判斷用戶是否登入，並針對登入過的用戶在服務器端的 Cookies 中插入 token ，而下次只需取 token 就得知當前用戶是否登錄啦。<br>電商的購物車也能使用 Cookies 來儲存。</p><h3 id=\"LocalStorage-1\"><a href=\"#LocalStorage-1\" class=\"headerlink\" title=\"LocalStorage:\"></a>LocalStorage:</h3><p>有了 localStorage ，就能將 Cookie 的工作也交給它來辦了，此外，HTML5 遊戲也會產生很多數據，對於 Cookies 來說不是很友善(儲存量小)，則可使用 localStorage 來儲存資料。</p><h3 id=\"SessionStorage-1\"><a href=\"#SessionStorage-1\" class=\"headerlink\" title=\"SessionStorage:\"></a>SessionStorage:</h3><p>有時為了用戶體驗，不希望單一頁面有太多資訊或填寫步驟，則會採用多分頁的處理，這時 SessionStorage 就能夠派上用場啦!!</p><h2 id=\"安全性問題\"><a href=\"#安全性問題\" class=\"headerlink\" title=\"安全性問題\"></a>安全性問題</h2><p>三者儲存庫都有 XSS 的風險，所以千萬不要用它們存儲系統中的敏感數據。</p>","categories":["HTML"],"tags":["HTML","Cookie","LocalStorage","SessionStorage"]},{"title":"JavaScript - 常見陣列方法(基礎篇)","url":"/javascript/20200510/3218585467/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>JavaScript 陣列方法有十幾種操作，我會依照使用次數以及難易程度分成三篇來介紹。</p><h2 id=\"陣列分類方法\"><a href=\"#陣列分類方法\" class=\"headerlink\" title=\"陣列分類方法\"></a>陣列分類方法</h2><p>此表格會在後續的陣列介紹中陸續加入，此處只標註本篇會介紹的方法</p><table><thead><tr><th style=\"width:150px\">分類</th><th>操作方法</th></tr></thead><tbody><tr><td>改變原始陣列</td><td></td></tr><tr><td>回傳特定資訊</td><td><a href=\"#filter\">filter()</a>、 <a href=\"#find\">find()</a></td></tr><tr><td>處理每個元素</td><td><a href=\"#forEach\">forEach()</a></td></tr><tr><td>產生新陣列or值</td><td><a href=\"#map\">map()</a>、 <a href=\"#reduce\">reduce()</a></td></tr><tr><td>回傳布林值</td><td><a href=\"#every\">every()</a>、 <a href=\"#some\">some()</a></td></tr><tr><td>其餘用法</td><td></td></tr></tbody></table><h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach()\"></a>forEach()</h2><p>會將陣列中每個元素套用到指定的函式裡進行運算，函式有三個參數，第一個參數表示每個元素的值(必填)，第二個參數為該元素的索引值(選填)，第三個參數則表示原本的陣列(選填)。<br>其實很多方法都可以透過 <code>forEach()</code>與 <code>if else</code> 等判斷方法來達成。，但程式碼就很冗長以及效能較低。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">a.forEach(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    b = b + item;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* 15 ( 1+2+3+4+5 ) */</span></span><br></pre></td></tr></table></figure><h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find()\"></a>find()</h2><p>會將陣列中的「每一個」元素帶入指定的函式內做<code>判斷</code>，並會回傳<code>第一個</code>符合判斷條件的元素，如果沒有元素符合則會回傳 <code>undefined</code>。<br>注意，<code>find()</code> 只會回傳一次值，且是第一次為 <code>true</code> 的<code>值</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.find(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* 4 只回傳第一個為 ture 的值 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.find(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* undefined */</span></span><br></pre></td></tr></table></figure><h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>會將陣列中的「每一個」元素帶入指定的函式內做判斷，如果元素符合判斷條件則會傳出，成為一個<code>新的陣列元素</code>。<br>應用: 很適合用在搜尋符合條件的資料。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.filter(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;));  <span class=\"comment\">/* [4, 5, 6, 7, 8] */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.filter(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item%<span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* [2, 4, 6, 8] */</span></span><br></pre></td></tr></table></figure><h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h2><p>處理陣列中每個元素，透過函式內所回傳的值組合成一個陣列。<br>註:回傳陣列的長度<code>等於</code>原始陣列長度，若是不回傳則會預設填入 <code>undefined</code>。<br>應用: 將原始的變數運算後重新組合一個新的陣列。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.map(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* [11, 12, 13, 14, 15, 16, 17, 18] */</span></span><br></pre></td></tr></table></figure><h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>可以檢查所有的元素是否符合條件，只要有任何一個元素<code>不符合判斷條件</code>，會回傳 <code>false</code>，如果全部符合，就會回傳 <code>true</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* fasle */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.every(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>可以檢查所有的元素是否符合條件，只要有任何一個元素<code>符合判斷條件</code>，就會回傳 <code>true</code>，如果全都不符合，就會回傳 <code>false</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* true 4 5 6 大於 3 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.some(<span class=\"function\">(<span class=\"params\">item, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item &gt; <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;)); <span class=\"comment\">/* false 沒有元素大於 6 */</span></span><br></pre></td></tr></table></figure><h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p>可以將陣列中每個元素進行計算，每次計算的結果會再與下個元素作計算，直到結束為止。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = a.reduce(<span class=\"function\">(<span class=\"params\">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(accumulator, currentValue);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* 36 ( 1+2+3+4+5+6+7+8=36 ) */</span></span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>基礎篇的陣列操作技巧對於中、小型專案而言其實就足以應付，下篇開始會介紹進階一點的方法，一起來學習更多陣列技巧吧。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://wcc723.github.io/javascript/2017/06/29/es6-native-array/#Array-prototype-every\" target=\"_blank\" rel=\"noopener\">JavaScript 陣列處理方法 [filter(), find(), forEach(), map(), every(), some(), reduce()]</a><br><a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html#array_reduce\" target=\"_blank\" rel=\"noopener\">JavaScript Array 陣列操作方法大全 ( 含 ES6 )</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array MDN</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript 核心 (27) - 物件 - 陣列","url":"/javascript/20210104/4202138340/","content":"<h2 id=\"陣列\"><a href=\"#陣列\" class=\"headerlink\" title=\"陣列\"></a>陣列</h2><p>陣列常被誤以為是 JavaScript 中的一個型別，但千萬要記得 JS 中只有兩種型別:</p><ul><li>原始型別(七種)</li><li>物件型別<br>好了，試問陣列是哪一種呢?<br>反正只要<code>不是原始型別</code>，一律都屬於物件型別，想都不用想。</li></ul><h2 id=\"陣列實字\"><a href=\"#陣列實字\" class=\"headerlink\" title=\"陣列實字\"></a>陣列實字</h2><p>JavaScript 的陣列中可以加入任何型別，部分程式語言是無法像 JavaScript 這麼隨性的</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><h2 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h2><p>陣列的順序是從 <code>0</code> 開始計算</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">2</span>]; <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><p>使用 <code>push()</code>，可在陣列最後新增內容</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(<span class=\"string\">'Cloud'</span>);</span><br></pre></td></tr></table></figure><h2 id=\"新增屬性\"><a href=\"#新增屬性\" class=\"headerlink\" title=\"新增屬性!?\"></a>新增屬性!?</h2><p>陣列還可新增屬性喔，並且這個屬性不會影響到陣列的長度。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\">arr.name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.length); <span class=\"comment\">/* 5 */</span></span><br></pre></td></tr></table></figure><h2 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h2><p>直接賦予值在指定順序的位置，若中間有空的順序，則以 <code>empty</code> 表示</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\">arr[<span class=\"number\">10</span>] = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">6</span>]); <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">/* [1, \"1\", true, undefined, &#123;…&#125;, empty × 5, \"Cloud\"] */</span></span><br></pre></td></tr></table></figure><h2 id=\"迴圈找值\"><a href=\"#迴圈找值\" class=\"headerlink\" title=\"迴圈找值\"></a>迴圈找值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrLen = arr.length</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* for　迴圈 */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt;= arrLen; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* forEach　迴圈 */</span></span><br><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201108/33884/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(31)-物件-陣列</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (11) - 運算子、型別與文法 - ASI 自動插入分號","url":"/javascript/20201223/1504038266/","content":"<h2 id=\"ASI\"><a href=\"#ASI\" class=\"headerlink\" title=\"ASI\"></a>ASI</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion\" target=\"_blank\" rel=\"noopener\">MDN ASI</a><br>Automatic Semicolon Insertion 自動插入分號<br>理論上 JS 是允許不寫分號的，但實際開發中除非很了解 JS 的斷行機制，不然不加分號會產生很多問題哩</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"string\">'ASI is Good!'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a())  <span class=\"comment\">/* return undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ASI is Good!'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b())  <span class=\"comment\">/* return ASI is Good! */</span></span><br></pre></td></tr></table></figure><p><code>return</code> 後面不加回傳值的話，ASI機制就會自動加入分號，所以在 <code>a()</code> 只會回傳 <code>undefined</code> 而不會回傳 <code>ASI is Good!</code>。</p><h2 id=\"立即函式\"><a href=\"#立即函式\" class=\"headerlink\" title=\"立即函式\"></a>立即函式</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure><p>當有多個立即函式時，兩兩之間必須要有 <code>;</code> ，不論是在開頭還是結尾都可以，否則瀏覽器會報錯誤 <code>Uncaught TypeError: (intermediate value)(...) is not a function</code></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200613/3587770435/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(12)-運算子、型別與文法-ASI 自動插入分號</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (33) - 函式以及 This 的運作 - 工廠模式及私有方法","url":"/javascript/20210106/546505187/","content":"<h2 id=\"工廠模式\"><a href=\"#工廠模式\" class=\"headerlink\" title=\"工廠模式\"></a>工廠模式</h2><p>可以理解成 <code>給不同材料數量，生產出相對應的產品數量</code>，類似工廠在生產產品的流程。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storeMoney</span>(<span class=\"params\">initValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = initValue || <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</span><br><span class=\"line\">    money = money + price;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> CloudMoney = storeMoney(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(CloudMoney(<span class=\"number\">500</span>)); <span class=\"comment\">/* 600 */</span></span><br></pre></td></tr></table></figure><p>上面這個範例是回傳一個函式，在回傳一個值，那如果是包在一個回傳物件呢?</p><p>下面就來介紹閉包強大的私有方法。</p><h2 id=\"私有方法\"><a href=\"#私有方法\" class=\"headerlink\" title=\"私有方法\"></a>私有方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storeMoney</span>(<span class=\"params\">initValue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = initValue || <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    increase: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> money += price;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    decrease: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">price</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> money -= price;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    value: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 第一位 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CloudMoney = storeMoney(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(CloudMoney.increase(<span class=\"number\">100</span>)); <span class=\"comment\">/* 200 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(CloudMoney.decrease(<span class=\"number\">25</span>)); <span class=\"comment\">/* 175 */</span> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(CloudMoney.value());  <span class=\"comment\">/* 175 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 第二位 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> TestMoney = storeMoney(<span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(TestMoney.increase(<span class=\"number\">100</span>)); <span class=\"comment\">/* 600 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(TestMoney.decrease(<span class=\"number\">25</span>)); <span class=\"comment\">/* 575 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(TestMoney.value());  <span class=\"comment\">/* 575 */</span></span><br></pre></td></tr></table></figure><p>透過<code>回傳物件</code>的型式，可以讓函式增加許多功能，並且各自獨立呼叫閉包函式時，各自互不干擾。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201220/423870936/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(39)-函式以及 This 的運作-閉包進階：工廠模式及私有方法</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (50) - ES6 章節：Let 及 Const - Let, Const 基本概念","url":"/javascript/20210201/807133580/","content":"<h2 id=\"var-盲點\"><a href=\"#var-盲點\" class=\"headerlink\" title=\"var 盲點\"></a>var 盲點</h2><p>記著 <code>var 作用域</code>是在<code>函式的區塊內</code><br>來看看 <code>var</code> 在使用上會有那些問題吧</p><ul><li>重複宣告，後者覆蓋前者</li><li>汙染全域變數</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 重複宣告，後者覆蓋前者 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"string\">'克勞德'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"string\">'克勞德_2'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud); <span class=\"comment\">/* 克勞德_2 */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 汙染全域變數 */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* 0 1 2 3 4 5 6 7 8 9 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (answer) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myFeedback = <span class=\"string\">'同意'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myFeedback); <span class=\"comment\">/* 同意 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFeedback); <span class=\"comment\">/* 同意 */</span></span><br></pre></td></tr></table></figure><h2 id=\"let-const-var-差異\"><a href=\"#let-const-var-差異\" class=\"headerlink\" title=\"let const var 差異\"></a>let const var 差異</h2><ul><li><code>let</code>: 變數，可重新賦值，<code>Block</code> 為作用域 ex: <code>{}</code> 大括號內</li><li><code>const</code>: 常數，不可重新賦值</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Cloud = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> Cloud = <span class=\"string\">'克勞德'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud); <span class=\"comment\">/* Identifier 'Cloud' has already been declared */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test_1 = <span class=\"string\">'測試_1'</span>;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> test_1 = <span class=\"string\">'測試_括號'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test_1); <span class=\"comment\">/* 測試_1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* 0 1 2 3 4 5 6 7 8 9 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* i is not defined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> answer = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (answer) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myFeedback = <span class=\"string\">'同意'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(myFeedback); <span class=\"comment\">/* 同意 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myFeedback); <span class=\"comment\">/* myFeedback is not defined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j); <span class=\"comment\">/* 0 1 2 3 4 5 6 7 8 9 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(j);</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (51) - ES6 章節：Let 及 Const - Let, Const 實戰運用技巧","url":"/javascript/20210202/542658997/","content":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>由下圖可知，<code>var</code> 會互相汙染，導致 <code>console.log</code> 出錯</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'這執行第'</span> + i + <span class=\"string\">'次'</span>); <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* (10) 這執行第10次 */</span></span><br></pre></td></tr></table></figure><p>來看看替換成 let 會有什麼差異<br>上篇提到 <code>let</code> 的作用域是在 <code>Block</code> 內</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'這執行第'</span> + i + <span class=\"string\">'次'</span>); </span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第0次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第1次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第2次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第3次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第4次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第5次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第6次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第7次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第8次 */</span></span><br><span class=\"line\">    <span class=\"comment\">/* 這執行第9次 */</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* i is not defined */</span></span><br></pre></td></tr></table></figure><p>再換成 <code>const</code> 試試<br><code>const</code> 是常數不能變更，且作用域也是再 <code>Block</code> 內<br>所以在執行<code>第一次 i++</code>時就會報錯</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; <span class=\"comment\">/* Assignment to constant variable. 不能變更 */</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i); <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'這執行第'</span> + i + <span class=\"string\">'次'</span>); <span class=\"comment\">/* 這執行第0次 */</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'測試'</span>, i); <span class=\"comment\">/* 無回應 */</span></span><br></pre></td></tr></table></figure><h2 id=\"物件屬性差異\"><a href=\"#物件屬性差異\" class=\"headerlink\" title=\"物件屬性差異\"></a>物件屬性差異</h2><p>雖然說 <code>const</code> 是常數不能變更，但如果不是純值的話，就都會依照物件傳參考的特性，變成可以修改內部屬性</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  money: <span class=\"number\">500</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.name = <span class=\"string\">'Cloud_2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person =&gt;'</span>, person); <span class=\"comment\">/* person =&gt; &#123; name: \"Cloud_2\", money: 500 &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">name = <span class=\"string\">'Cloud_3'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'name =&gt;'</span>, name); <span class=\"comment\">/* Assignment to constant variable. */</span></span><br></pre></td></tr></table></figure><p>使用 <code>Object.freeze()</code> 凍結時，<code>const</code> 跟 <code>var</code> 也會有所不同</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  money: <span class=\"number\">500</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">'Cloud_2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(person); <span class=\"comment\">/* freeze() 只針對物件內屬性 */</span></span><br><span class=\"line\">person.money = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person =&gt;'</span>, person); <span class=\"comment\">/* person =&gt; &#123; name: \"Cloud_2\", money: 500 &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person =&gt;'</span>, person); <span class=\"comment\">/* person =&gt; &#123;&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person_const = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  money: <span class=\"number\">500</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person_const.name = <span class=\"string\">'Cloud_2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(person_const); <span class=\"comment\">/* freeze() 只針對物件內屬性 */</span></span><br><span class=\"line\">person_const.money = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person_const =&gt;'</span>, person_const); <span class=\"comment\">/* person_const =&gt; &#123; name: \"Cloud_2\", money: 500 &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\">person_const = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person_const =&gt;'</span>, person_const); <span class=\"comment\">/* Assignment to constant variable. */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (13) - 運算子、型別與文法 - 原始型別與物件型別","url":"/javascript/20201223/4037866813/","content":"<h2 id=\"原始型別\"><a href=\"#原始型別\" class=\"headerlink\" title=\"原始型別\"></a>原始型別</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Data_structures\" target=\"_blank\" rel=\"noopener\">JavaScript 的資料型別與資料結構</a></p><p>JavaScript 的原始型別有以下六種:</p><ul><li>String 字串</li><li>Boolean 布林</li><li>Number 數值</li><li>Undefined 未定義</li><li>Null 空</li><li>BigInt 整數數值</li><li>Symbol Symbol</li></ul><p>而上述除了 <code>undefined</code> 、 <code>null</code> 以外，其他原始型別都有各自的<code>包裹物件</code>可以使用</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">String</span>();</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>();</span><br><span class=\"line\">BigInt();</span><br><span class=\"line\"><span class=\"built_in\">Symbol</span>();</span><br></pre></td></tr></table></figure><p>而包裹物件會提供一些方法，ex: 改變大小寫、刪除空白等等函式可以使用</p><h2 id=\"物件型別\"><a href=\"#物件型別\" class=\"headerlink\" title=\"物件型別\"></a>物件型別</h2><p>只要不是上面那 7 種原始型別，就是物件型別，ex: <code>function() {}</code></p><h2 id=\"包裹物件是哪一種\"><a href=\"#包裹物件是哪一種\" class=\"headerlink\" title=\"包裹物件是哪一種?\"></a>包裹物件是哪一種?</h2><p>原始型別本身有各自的包裹物件，而如果宣告變數用包裹物件的話，會讓變數的型別是<code>物件型別</code>而不是原始型別。<br>上範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'Hello'</span>);  <span class=\"comment\">/* 稱為 `建構式` */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(a)); <span class=\"comment\">/* return object */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span>(b)); <span class=\"comment\">/* return string */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200621/3684249269/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(14)-運算子、型別與文法-原始型別及物件型別</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (23) - 物件 - 未定義的物件屬性預設值","url":"/javascript/20201228/1663111178/","content":"<h2 id=\"呼叫未定義屬性\"><a href=\"#呼叫未定義屬性\" class=\"headerlink\" title=\"呼叫未定義屬性\"></a>呼叫未定義屬性</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.age); <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.age.year); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'year' of undefined */</span></span><br></pre></td></tr></table></figure><p>上述範例出現兩個錯誤:</p><ul><li>第一個是因為物件沒有該屬性，所以呼叫是回傳 undefined。</li><li>第二個錯誤是因為運算子的相依性 <code>obj.age</code> 會是 <code>undefined</code>，並且會變成 <code>undefined.year</code>，而原始型別的 <code>undefined</code> 是不能新增屬性的，所以才會報錯。</li></ul><p>然而不是所以有原始型別都不能操作屬性，有幾個還是可以的。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Number */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.test = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Number.test =&gt; '</span>, <span class=\"built_in\">Number</span>.test); <span class=\"comment\">/* Number.test =&gt;  100 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\">a.test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test.test_2 =&gt; '</span>, a.test.test_2); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test_2' of undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* String */</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'String.test =&gt; '</span>, <span class=\"built_in\">String</span>.test); <span class=\"comment\">/* String.test =&gt;  Cloud */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\">a.test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test.test_2 =&gt; '</span>, a.test.test_2); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test_2' of undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Boolean */</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>.test  = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Boolean.test =&gt; '</span>, <span class=\"built_in\">Boolean</span>.test); <span class=\"comment\">/* Boolean.test =&gt;  Cloud */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test ); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\">a.test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test); <span class=\"comment\">/* a.test =&gt;  undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test.test_2 =&gt; '</span>, a.test.test_2 ); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test_2' of undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* null */</span></span><br><span class=\"line\"><span class=\"literal\">null</span>.test  = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* Uncaught TypeError: Cannot set property 'test' of null */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test ); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test' of null*/</span></span><br><span class=\"line\">a.test = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* Uncaught TypeError: Cannot set property 'test' of null*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test.test_2 =&gt; '</span>, a.test.test_2 ); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test' of null*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* undefined*/</span></span><br><span class=\"line\"><span class=\"literal\">undefined</span>.test  = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* Uncaught TypeError: Cannot set property 'test' of undefined */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test =&gt; '</span>, a.test ); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test' of undefined*/</span></span><br><span class=\"line\">a.test = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* Uncaught TypeError: Cannot set property 'test' of undefined*/</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a.test.test_2 =&gt; '</span>, a.test.test_2 ); <span class=\"comment\">/* Uncaught TypeError: Cannot read property 'test' of undefined*/</span></span><br></pre></td></tr></table></figure><h2 id=\"解決預設值\"><a href=\"#解決預設值\" class=\"headerlink\" title=\"解決預設值\"></a>解決預設值</h2><ul><li>預先定義物件屬性</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  status: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.status.id = <span class=\"number\">26</span>; <span class=\"comment\">/* 26 */</span></span><br></pre></td></tr></table></figure><ul><li>賦予屬性</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Ray'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.status = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.status.id = <span class=\"number\">26</span>; <span class=\"comment\">/* 26 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200808/2097513019/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(25)-物件-未定義的物件屬性預設值</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (32) - 函式以及 This 的運作 - 閉包 Closure","url":"/javascript/20210106/1355597142/","content":"<h2 id=\"閉包-Closure\"><a href=\"#閉包-Closure\" class=\"headerlink\" title=\"閉包 Closure\"></a>閉包 Closure</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">MDN 閉包 Closure</a><br>前面在介紹記憶體的垃圾回收機制有提到，假使參數或函式不再被使用實，就會釋放其記憶體空間。<br>不清楚的可以回去看這一篇文章<a href=\"https://syj0905.github.io/javascript/20201222/3236158139/\">JavaScript 核心 (8) - 執行環境與作用域 - 回收機制</a><br>閉包（Closure）是函式以及該函式被宣告時所在的作用域環境（lexical environment）的組合。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomString</span>(<span class=\"params\">length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> characters = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> charactersLength = characters.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    result += characters.charAt(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * charactersLength));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> demoData = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    demoData.push(randomString(<span class=\"number\">1000</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    demoData;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData();</span><br></pre></td></tr></table></figure><p>由於 <code>setTimeout</code> 有需要參考 <code>demoData</code> 參數，所以在10秒鐘前記憶體會占用，10秒後就釋放掉了。</p><h2 id=\"實用的閉包\"><a href=\"#實用的閉包\" class=\"headerlink\" title=\"實用的閉包\"></a>實用的閉包</h2><p>閉包實用之處，在於能讓你把一些資料（透過作用域環境）與操控這些資料的函式相關聯。很明顯地，這與把一些資料（物件屬性）與一些方法的相關聯的物件導向程式設計（object-oriented programming）相似。</p><p>來寫一個真正的閉包範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    money = money + num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* ƒ (num) &#123;money = money + num; return money;&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">/* 200 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">/* 300 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">/* 400 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">/* 500 */</span></span><br></pre></td></tr></table></figure><p>肯定會有人想問:為什麼傳入都是 <code>100</code>，但金額會不斷累加呢?<br>以下按步驟解析:</p><ol><li><code>fn()</code> 本身會回傳一個匿名函式，而此匿名函示又會回傳一個數值 <code>money</code>。</li><li>將 a 賦予 fn()，此時 a 釋回傳一個函式，而不是一個數值。</li><li>要回傳數值必須要使用 <code>a(傳入的數值)</code>，而不是單純呼叫 <code>a</code> 而已。</li><li>第一次執行 <code>a(100)</code> 後，函式內部的 money 因為重新被賦予成 <code>100 + 100 = 200</code>。</li><li>第二次執行 <code>a(100)</code> 後，注意，由於這個函式 <code>fn()</code> 又再次被調用參考，所以上一步的 money 仍會維持 200，最後回傳 200 + 100 = 300。</li><li>同上5.步驟，只要有一直參考到函式，這個函式內的 money 就不會被釋放掉。</li></ol><p>實際上閉包用單一個函式表現不出它的強大之處，來看看以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    money = money + num;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = fn();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">// 200</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">// 300</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">// 400</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a(<span class=\"number\">100</span>)); <span class=\"comment\">// 500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = fn();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b(<span class=\"number\">500</span>)); <span class=\"comment\">// 600</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b(<span class=\"number\">500</span>)); <span class=\"comment\">// 1100</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b(<span class=\"number\">500</span>)); <span class=\"comment\">// 1600</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b(<span class=\"number\">500</span>)); <span class=\"comment\">// 2100</span></span><br></pre></td></tr></table></figure><p>上述範例僅僅使用一個閉包，就能建立 <code>a</code>、<code>b</code> 兩個獨立的函式，但只需要寫一個閉包即可。</p><h2 id=\"實際應用範例\"><a href=\"#實際應用範例\" class=\"headerlink\" title=\"實際應用範例\"></a>實際應用範例</h2><p>來寫一個實際應用的閉包吧。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Some paragraph text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>some heading 1 text<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>some heading 2 text<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"size-12\"</span>&gt;</span>12<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"size-14\"</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"size-16\"</span>&gt;</span>16<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeSizer</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.style.fontSize = size + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> size12 = makeSizer(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> size14 = makeSizer(<span class=\"number\">14</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> size16 = makeSizer(<span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'size-12'</span>).onclick = size12; <span class=\"comment\">/* 為按鈕綁訂特定的函式 */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'size-14'</span>).onclick = size14; <span class=\"comment\">/* 為按鈕綁訂特定的函式 */</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'size-16'</span>).onclick = size16; <span class=\"comment\">/* 為按鈕綁訂特定的函式 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201220/3559993634/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(38)-函式以及 This 的運作-閉包 Closure</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 判斷瀏覽器版本及作業系統","url":"/javascript/20200203/4265752958/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前些日子，公司的購物網發現有少許用戶會重複在短時間內 call 相同的 API，為了抓出這些錯誤的來源，只用判定裝置已經是不夠了，必須還要知道使用者的瀏覽器是哪一款、版本號、以及作業系統，這樣後端接收到數據後就知道是哪邊出問題了。</p><h2 id=\"瀏覽器、作業系統列表\"><a href=\"#瀏覽器、作業系統列表\" class=\"headerlink\" title=\"瀏覽器、作業系統列表\"></a>瀏覽器、作業系統列表</h2><p>先整理好需要判斷的資料</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataBrowser: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'Chrome'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Chrome'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'OmniWeb'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'OmniWeb/'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'OmniWeb'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.vendor,</span><br><span class=\"line\">    subString: <span class=\"string\">'Apple'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Safari'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'Version'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    prop: <span class=\"built_in\">window</span>.opera,</span><br><span class=\"line\">    identity: <span class=\"string\">'Opera'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'Version'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.vendor,</span><br><span class=\"line\">    subString: <span class=\"string\">'iCab'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'iCab'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.vendor,</span><br><span class=\"line\">    subString: <span class=\"string\">'KDE'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Konqueror'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'Firefox'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Firefox'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.vendor,</span><br><span class=\"line\">    subString: <span class=\"string\">'Camino'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Camino'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// for newer Netscapes (6+)</span></span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'Netscape'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Netscape'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'MSIE'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Explorer'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'MSIE'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'Gecko'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Mozilla'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'rv'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// for older Netscapes (4-)</span></span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'Mozilla'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Netscape'</span>,</span><br><span class=\"line\">    versionSearch: <span class=\"string\">'Mozilla'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">],</span><br><span class=\"line\">dataOS: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.platform,</span><br><span class=\"line\">    subString: <span class=\"string\">'Win'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Windows'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.platform,</span><br><span class=\"line\">    subString: <span class=\"string\">'Mac'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Mac'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.userAgent,</span><br><span class=\"line\">    subString: <span class=\"string\">'iPhone'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'iPhone/iPod'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    string: navigator.platform,</span><br><span class=\"line\">    subString: <span class=\"string\">'Linux'</span>,</span><br><span class=\"line\">    identity: <span class=\"string\">'Linux'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure><h2 id=\"判定設定\"><a href=\"#判定設定\" class=\"headerlink\" title=\"判定設定\"></a>判定設定</h2><p>程式部分沒有太過艱深，就一直再迴圈判定 <code>navigator.userAgent</code> 及各種字串等等。<br>相關說明我會直接寫在註解內，最後會附上 Github 的完整 Demo 連結。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">detect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 初始化物件 */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> BrowserDetect = &#123;</span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.browser = <span class=\"keyword\">this</span>.searchString(<span class=\"keyword\">this</span>.dataBrowser) || <span class=\"string\">'An unknown browser'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.version = <span class=\"keyword\">this</span>.searchVersion(navigator.userAgent) || <span class=\"keyword\">this</span>.searchVersion(navigator.appVersion) || <span class=\"string\">'an unknown version'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.OS = <span class=\"keyword\">this</span>.searchString(<span class=\"keyword\">this</span>.dataOS) || <span class=\"string\">'an unknown OS'</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* 判定瀏覽器種類 */</span></span><br><span class=\"line\">    searchString(data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; data.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dataString = data[i].string;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dataProp = data[i].prop;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.versionSearchString = data[i].versionSearch || data[i].identity;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dataString) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (dataString.indexOf(data[i].subString) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> result = data[i].identity;</span><br><span class=\"line\">            <span class=\"comment\">/* 加強 Windows 作業系統版本判定 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result === <span class=\"string\">'Windows'</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">const</span> userAgentInfor = navigator.userAgent.toLowerCase();</span><br><span class=\"line\">              <span class=\"keyword\">const</span> windowsVersion = userAgentInfor.substr(userAgentInfor.indexOf(<span class=\"string\">'windows nt '</span>) + <span class=\"number\">11</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.searchOSversion(windowsVersion);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dataProp) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> data[i].identity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* 瀏覽器版本判定 */</span></span><br><span class=\"line\">    searchVersion(dataString) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = dataString.indexOf(<span class=\"keyword\">this</span>.versionSearchString);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">parseFloat</span>(dataString.substring(index + <span class=\"keyword\">this</span>.versionSearchString.length + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* Windows 作業系統版本判定 */</span></span><br><span class=\"line\">    searchOSversion(version) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> resultVersion = <span class=\"string\">''</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (version) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'5.1'</span>:</span><br><span class=\"line\">          resultVersion = <span class=\"string\">'Windows XP'</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'6.1'</span>:</span><br><span class=\"line\">          resultVersion = <span class=\"string\">'Windows 7'</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'6.3'</span>:</span><br><span class=\"line\">          resultVersion = <span class=\"string\">'Windows 8'</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'10.0'</span>:</span><br><span class=\"line\">          resultVersion = <span class=\"string\">'Windows 10'</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          resultVersion = <span class=\"string\">'Windows 其他'</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> resultVersion;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dataBrowser: [], <span class=\"comment\">/* 資料為上一步的陣列內容 */</span></span><br><span class=\"line\">    dataOS: [], <span class=\"comment\">/* 資料為上一步的陣列內容 */</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">/* 避免頁面重複判定(非必要) */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> BrowserDetect.browser === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">    BrowserDetect.init();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 回傳物件 */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">    info_os: BrowserDetect.OS,</span><br><span class=\"line\">    info_browser: BrowserDetect.browser,</span><br><span class=\"line\">    info_browser_version: BrowserDetect.version,</span><br><span class=\"line\">    info_resolution: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.screen.width&#125;</span> x <span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.screen.height&#125;</span>`</span>,</span><br><span class=\"line\">    BrowserDetect,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> detectDevice = detect();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(detectDevice);</span><br></pre></td></tr></table></figure><h2 id=\"結尾-Demo\"><a href=\"#結尾-Demo\" class=\"headerlink\" title=\"結尾 Demo\"></a>結尾 Demo</h2><p><a href=\"https://syj0905.github.io/detect_browser_os/\">JavaScript - 判斷瀏覽器版本及作業系統</a><br>開啟後查看一下 <code>console</code> 如果有出現以下圖片代表成功囉!!<br><img src=\"https://i.imgur.com/7Jqb0LD.png\" alt=\"判斷瀏覽器版本及作業系統\"><br>基本上以上範例是可以打包成 .js 檔的，其餘就是看各位的專案適用哪種方式再引入 JS 檔啦。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://frank198978104.github.io/2017/11/30/browser-and-os-detect/\" target=\"_blank\" rel=\"noopener\">JavaScript 判斷瀏覽器種類及作業系統</a><br><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/291616/\" target=\"_blank\" rel=\"noopener\">利用Javascript判斷作業系統的型別實現不同作業系統下的相容性</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript 核心 (42) - 繼承與原型鍊 - 使用建構式自定義原型","url":"/javascript/20210125/1855392321/","content":"<h2 id=\"建構式\"><a href=\"#建構式\" class=\"headerlink\" title=\"建構式\"></a>建構式</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"noopener\">MDN new operator</a><br>利用建構式創建多種物件，再利用 <code>prototype</code> 新增原型功能，即可讓所有藉此原型創建的物件都具備該<code>方法or屬性</code>。<br>這種方法可以有效地降低記憶體空間，因為若替每個物件都加上<code>相同方法or屬性</code>，會大幅增加記憶體的使用空間，而運用原型新增一次即可讓所有新物件都具備功能屬性，而只會使用到一個記憶體空間。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">  <span class=\"comment\">/* 沒有 return 物件的話，會默認 return this */</span></span><br><span class=\"line\">  <span class=\"comment\">// return this;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Bibi = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'比比'</span>, <span class=\"string\">'棕色'</span>, <span class=\"string\">'小'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Pupu = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'噗噗'</span>, <span class=\"string\">'白色'</span>, <span class=\"string\">'大'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi); <span class=\"comment\">/* Dog &#123;name: \"比比\", color: \"棕色\", size: \"小\"&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Pupu); <span class=\"comment\">/* Dog &#123;name: \"噗噗\", color: \"白色\", size: \"大\"&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Dog.prototype.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">`吠叫`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dog.prototype.test = <span class=\"string\">'測試'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.bark()); <span class=\"comment\">/* 比比吠叫 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Pupu.bark());  <span class=\"comment\">/* 噗噗吠叫 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.test); <span class=\"comment\">/* 測試 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Pupu.test); <span class=\"comment\">/* 測試 */</span></span><br></pre></td></tr></table></figure><h2 id=\"proto-vs-prototype\"><a href=\"#proto-vs-prototype\" class=\"headerlink\" title=\"proto vs prototype\"></a><strong>proto</strong> vs prototype</h2><ul><li><code>__proto__</code> : 物件連結原型的屬性，並非正式屬性，會造成原型來源不明，造成維護困難。</li><li><code>prototype</code> : 函式原型屬性<br>雖然這兩個是相同的，但操作原型都還是使用 <code>prototype</code> 為主</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Bibi = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'比比'</span>, <span class=\"string\">'棕色'</span>, <span class=\"string\">'小'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.prototype === Bibi.__proto__); <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (12) - 運算子、型別與文法 - 動態型別","url":"/javascript/20201223/2319355199/","content":"<h2 id=\"動態型別-Dynamic-typing\"><a href=\"#動態型別-Dynamic-typing\" class=\"headerlink\" title=\"動態型別 Dynamic typing\"></a>動態型別 Dynamic typing</h2><p>JavaScript 是弱型別，也說是動態的程式語言。<br>代表不必特別宣告變數的型別。程式在運作時，型別會<code>自動轉換</code>。這也代表可以<code>以不同的型別使用同一個變數</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;    <span class=\"comment\">/* foo 目前是數字 */</span></span><br><span class=\"line\">foo = <span class=\"string\">'bar'</span>;     <span class=\"comment\">/* foo 目前是字串 */</span></span><br><span class=\"line\">foo = <span class=\"literal\">true</span>;      <span class=\"comment\">/* foo 目前是布林值 */</span></span><br></pre></td></tr></table></figure><h2 id=\"顯性轉換與隱性轉換\"><a href=\"#顯性轉換與隱性轉換\" class=\"headerlink\" title=\"顯性轉換與隱性轉換\"></a>顯性轉換與隱性轉換</h2><p>雖說 JavaScript 沒有要預先定義型別，，但實際撰寫時仍會希望一開始先搞清楚變數型別，不然當無法確定型別的變數在做運算時會因為 JavaScript的規則導致問題產生。</p><p>顯性轉換(Explicit conversion)範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">42</span>;</span><br><span class=\"line\">foo = <span class=\"string\">'bar'</span>;</span><br></pre></td></tr></table></figure><p>隱性轉換(Implicit conversion)範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, <span class=\"keyword\">typeof</span>(num));    <span class=\"comment\">/* return 1 \"number\" */</span></span><br><span class=\"line\">num = num + <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, <span class=\"keyword\">typeof</span>(num));   <span class=\"comment\">/* return 11 string */</span></span><br></pre></td></tr></table></figure><p>上述的隱性轉換範例說明了除非真的很清楚運算時的型別轉換規則，否則，在做運算時都必需要清楚知道變數的型別才行，這樣可以減低 Bug 產生。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200621/3160672433/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(13)-運算子、型別與文法-動態型別</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 判斷是否為ie瀏覽器的方法(含 IE 11)","url":"/javascript/20191119/2879272524/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原先 IE10 以前都是採用 <code>userAgent</code> 中的 <code>MSIE</code> 標誌來識別，但到了 IE11 卻把它給移除了QQ。當然也是有方法可以判斷的，並且還同時兼顧 IE6 以上呦!!</p><h2 id=\"IE-10-以前-old\"><a href=\"#IE-10-以前-old\" class=\"headerlink\" title=\"IE 10 以前 (old)\"></a>IE 10 以前 (old)</h2><p>還是附上一下以前的寫法好了。</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isIE() &#123;</span><br><span class=\"line\">  if (window.navigator.userAgent.indexOf(&#39;MSIE&#39;) &gt;&#x3D; 1) &#123;</span><br><span class=\"line\">    console.log(&#39;我是 IE&#39;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(&#39;我不是 IE&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"IE11-new-for-IE6-up\"><a href=\"#IE11-new-for-IE6-up\" class=\"headerlink\" title=\"IE11 (new for IE6 up)\"></a>IE11 (new for IE6 up)</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isIE() &#123; &#x2F;&#x2F;ie?</span><br><span class=\"line\">  if (!!window.ActiveXObject || &#39;ActiveXObject&#39; in window) &#123;</span><br><span class=\"line\">    console.log(&#39;我是 IE&#39;);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    console.log(&#39;我不是 IE&#39;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>接下來如果專案不須支援 IE 的話，可以試著把 IE 頁面導入到下載其他瀏覽器的頁面喔~~<br>避免使用者不知道如何是好，稍微提升點使用者體驗也是能拉回客人的www</p>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript - 如何偵測使用者的裝置是否為行動裝置","url":"/javascript/20191118/1159365328/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>實務上有時會根據使用者的裝置來決定部分功能是否開啟或關閉，單純使用 CSS 的 media query 斷點有個缺點是手機有功能要開啟但桌面、平板是關閉的，而使用者縮放視窗到手機尺寸時則會變成能使用該功能。<br>有鑑於此，我們必須要使用 JavaScript 來判定使用者的裝置，而不是依據 media query 斷點。</p><h2 id=\"判斷依據\"><a href=\"#判斷依據\" class=\"headerlink\" title=\"判斷依據\"></a>判斷依據</h2><p>偵測瀏覽器的 userAgent 有沒有包含行動裝置的關鍵字，若有包含則回傳 true，沒有則 false。</p><h2 id=\"ES5-寫法\"><a href=\"#ES5-寫法\" class=\"headerlink\" title=\"ES5 寫法\"></a>ES5 寫法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isMobileDevice()&#123;</span><br><span class=\"line\">  var mobileDevices &#x3D; [&#39;Android&#39;, &#39;webOS&#39;, &#39;iPhone&#39;, &#39;iPad&#39;, &#39;iPod&#39;, &#39;BlackBerry&#39;, &#39;Windows Phone&#39;];</span><br><span class=\"line\">  var isMobileDevice &#x3D; false;</span><br><span class=\"line\">  var length &#x3D; mobileDevice.length;</span><br><span class=\"line\">  for(var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class=\"line\">    if(navigator.userAgent.match(mobileDevice[i]))&#123;</span><br><span class=\"line\">      isMobileDevice &#x3D; true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return isMobileDevice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"ES6-寫法\"><a href=\"#ES6-寫法\" class=\"headerlink\" title=\"ES6 寫法\"></a>ES6 寫法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function isMobileDevice() &#123;</span><br><span class=\"line\">  const mobileDevice &#x3D; [&#39;Android&#39;, &#39;webOS&#39;, &#39;iPhone&#39;, &#39;iPad&#39;, &#39;iPod&#39;, &#39;BlackBerry&#39;, &#39;Windows Phone&#39;];</span><br><span class=\"line\">  let isMobileDevice &#x3D; mobileDevice.some(e &#x3D;&gt; navigator.userAgent.match(e));</span><br><span class=\"line\">  return isMobileDevice;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript - 拖曳功能(一) - 拖曳","url":"/javascript/20191209/2561588379/","content":"<h2 id=\"名詞解釋\"><a href=\"#名詞解釋\" class=\"headerlink\" title=\"名詞解釋\"></a>名詞解釋</h2><ul><li><code>Drag Source</code> : 被點擊要拖曳的物件</li><li><code>Drop Target</code> : 拖曳物件要被放置的區域<br>兩者分別有對應的事件可以使用，請見下圖:<br><img src=\"https://i.imgur.com/tpQ8Koe.png\" alt=\"Drag Drop Event\"><h3 id=\"有關-Drag-Source-事件\"><a href=\"#有關-Drag-Source-事件\" class=\"headerlink\" title=\"有關 Drag Source 事件\"></a>有關 Drag Source 事件</h3></li><li><code>dragstart</code> : 當滑鼠點擊 Drag Source 時，並且拖曳的時間瞬間觸發。</li><li><code>drag</code> : 在 Drag Source 被拖曳持續觸發。</li><li><code>dragend</code> : 當滑鼠鬆開 Drag Source 時觸發。<h3 id=\"有關-Drop-Target-事件\"><a href=\"#有關-Drop-Target-事件\" class=\"headerlink\" title=\"有關 Drop Target 事件\"></a>有關 Drop Target 事件</h3></li><li><code>dragenter</code> : 當拖曳的 Drag Source 首次進入 Drop Target 範圍內時觸發。</li><li><code>dragover</code> : 當拖曳的 Drag Source 進入 Drop Target 範圍內時，持續觸發。</li><li><code>dragleave</code> : 當拖曳的 Drag Source 離開可放置區塊時觸發。</li><li><code>drop</code> : 當拖曳 Drag Source 在 Drop Target 的範圍內被釋放時所觸發</li></ul><h2 id=\"相關元素的前置作業\"><a href=\"#相關元素的前置作業\" class=\"headerlink\" title=\"相關元素的前置作業\"></a>相關元素的前置作業</h2><h3 id=\"HTML-Attribute\"><a href=\"#HTML-Attribute\" class=\"headerlink\" title=\"HTML Attribute\"></a>HTML Attribute</h3><p>針對要拖曳的元素，在其 HTML 標籤添加屬性 <code>draggable=&quot;true&quot;</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drag_source\"</span> <span class=\"attr\">draggable</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"SCSS-設定\"><a href=\"#SCSS-設定\" class=\"headerlink\" title=\"SCSS 設定\"></a>SCSS 設定</h3><p>為了避免使用者在拖曳元素時選取到元素內的內容，可以在 CSS 添加以下程式碼</p><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[draggable=<span class=\"string\">\"true\"</span>]</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   To prevent user selecting inside the drag source</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"attribute\">user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-moz-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-user-select</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-user-select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#drag_drop_basic</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#drag_drop_multiple</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">  .soruce_container,</span><br><span class=\"line\">  <span class=\"selector-class\">.target_container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">flex</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"built_in\">calc</span>(<span class=\"number\">50%</span> - <span class=\"number\">1rem</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#drag_source_basic</span>,</span><br><span class=\"line\">  <span class=\"selector-id\">#drag_source_multiple</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: skyblue;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dragging</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: .<span class=\"number\">25</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(red, <span class=\"number\">0.4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"基本範例說明\"><a href=\"#基本範例說明\" class=\"headerlink\" title=\"基本範例說明\"></a>基本範例說明</h2><p>直接按照以下程式碼就能做出單一元素拖曳效果囉!!(僅限一次拖曳)</p><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drag_drop_basic\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"soruce_container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drag_source_basic\"</span> <span class=\"attr\">draggable</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target_container\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target_container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><ul><li><code>Drag Source</code> :<br>將要被拖曳的元素設置 <code>dragstart</code> 事件。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dragSource = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#drag_drop_basic #drag_source_basic'</span>);</span><br><span class=\"line\">dragSource.addEventListener(<span class=\"string\">'dragstart'</span>, dragStart);</span><br><span class=\"line\">dragSource.addEventListener(<span class=\"string\">'dragend'</span>, dragEnd);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragStart</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.dataTransfer.setData(<span class=\"string\">'text/plain'</span>, e.target.id);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.add(<span class=\"string\">'dragging'</span>); <span class=\"comment\">// 加入 dragging 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnd</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'dragging'</span>); <span class=\"comment\">// 移除 dragging 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Drop Target</code> :<br>對要放置的容器設置 <code>dragenter</code>、<code>dragover</code>、<code>drop</code> 三個事件。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dropTarget = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#drag_drop_basic .target_container'</span>);</span><br><span class=\"line\">dropTarget.addEventListener(<span class=\"string\">'drop'</span>, droped);</span><br><span class=\"line\">dropTarget.addEventListener(<span class=\"string\">'dragenter'</span>, cancelDefault);</span><br><span class=\"line\">dropTarget.addEventListener(<span class=\"string\">'dragover'</span>, dragover);</span><br><span class=\"line\">dropTarget.addEventListener(<span class=\"string\">'dragleave'</span>, dragLeave);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">droped</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  cancelDefault(e);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> id = e.dataTransfer.getData(<span class=\"string\">'text/plain'</span>);</span><br><span class=\"line\">  e.target.appendChild(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;id&#125;</span>`</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 移除 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragover</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  cancelDefault(e);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.add(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 加入 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragLeave</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 移除 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 元素預設行為是不能被放置拖曳物的，因此在拖曳對象出現在放置目標上時，取消預設行為，讓放置目標可以被放置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelDefault</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 可加可不加</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"進階範例說明\"><a href=\"#進階範例說明\" class=\"headerlink\" title=\"進階範例說明\"></a>進階範例說明</h2>以下是針對多個元素進行多次拖曳的範例<h3 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drag_drop_multiple\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"soruce_container\"</span> <span class=\"attr\">data-role</span>=<span class=\"string\">\"drag_drop_container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"drag_source_multiple\"</span> <span class=\"attr\">draggable</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target_container\"</span> <span class=\"attr\">data-role</span>=<span class=\"string\">\"drag_drop_container\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"JavaScript-1\"><a href=\"#JavaScript-1\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3></li><li><code>Drag Source</code> :<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dragSources_multiple = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'#drag_drop_multiple #drag_source_multiple'</span>);</span><br><span class=\"line\">dragSources_multiple.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'dragstart'</span>, dragStart);</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'dragend'</span>, dragEnd);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragStart</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.dataTransfer.setData(<span class=\"string\">'text/plain'</span>, e.target.id);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.add(<span class=\"string\">'dragging'</span>); <span class=\"comment\">// 加入 dragging 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnd</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'dragging'</span>); <span class=\"comment\">// 移除 dragging 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Drop Target</code> :<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dropTargets_multiple = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'[data-role=\"drag_drop_container\"]'</span>);</span><br><span class=\"line\">dropTargets_multiple.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'drop'</span>, droped);</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'dragenter'</span>, cancelDefault);</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'dragover'</span>, dragover);</span><br><span class=\"line\">  item.addEventListener(<span class=\"string\">'dragleave'</span>, dragLeave);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">droped</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  cancelDefault(e);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> id = e.dataTransfer.getData(<span class=\"string\">'text/plain'</span>);</span><br><span class=\"line\">  e.target.appendChild(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">`#<span class=\"subst\">$&#123;id&#125;</span>`</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 移除 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragover</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  cancelDefault(e);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.add(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 加入 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragLeave</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.classList.remove(<span class=\"string\">'hover'</span>); <span class=\"comment\">// 移除 hover 自定義樣式</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 元素預設行為是不能被放置拖曳物的，因此在拖曳對象出現在放置目標上時，取消預設行為，讓放置目標可以被放置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cancelDefault</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  e.stopPropagation();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 可加可不加</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"完整-DEMO\"><a href=\"#完整-DEMO\" class=\"headerlink\" title=\"完整 DEMO\"></a>完整 DEMO</h2><a href=\"https://syj0905.github.io/drag-drop-demo/\">DEMO</a><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/HTML_Drag_and_Drop_API\" target=\"_blank\" rel=\"noopener\">HTML 拖放 API</a><br><a href=\"https://www.w3school.com.cn/html5/html_5_draganddrop.asp\" target=\"_blank\" rel=\"noopener\">HTML 5 拖放</a><br><a href=\"https://w3c.hexschool.com/blog/2f2c7c6e\" target=\"_blank\" rel=\"noopener\">使用拖曳效果，進化寶可夢吧！</a><br><a href=\"https://pjchender.blogspot.com/2017/08/html5-drag-and-drop-api.html\" target=\"_blank\" rel=\"noopener\">製作可拖曳的元素</a></li></ul>","categories":["JavaScript"],"tags":["JavaScript","HTML"]},{"title":"JavaScript 核心 (1) - 執行環境與作用域 - JavaScript 運作方式","url":"/javascript/20201221/2070232557/","content":"<h2 id=\"直譯語言-Interperted-language\"><a href=\"#直譯語言-Interperted-language\" class=\"headerlink\" title=\"直譯語言 Interperted language\"></a>直譯語言 Interperted language</h2><p>直接編譯的語言。<br>直譯式語言必須先一條一條將程式碼讀取出來並透過<code>直譯器</code>轉換成<code>機器碼</code>才能夠被運作，所以通常來講直譯式語言的錯誤訊息都是直接呈現於開發環境上，舉例來講 JavaScript 就是直接呈現在瀏覽器的 console Tools 中。</p><p>直譯語言列表:</p><ul><li>BASIC</li><li>LISP</li><li>Perl</li><li>Python</li><li>Ruby</li><li>JavaScript</li><li>PHP</li><li>R</li></ul><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(1)%20-%20%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%20-%20JavaScript%20%E9%81%8B%E4%BD%9C%E6%96%B9%E5%BC%8F%2F%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80%E9%81%8B%E4%BD%9C.jpg?alt=media&token=29b8f72f-42f4-458a-9c97-031c4752818d\" alt=\"運作流程\"></p><h2 id=\"編譯式語言-Compiled-language\"><a href=\"#編譯式語言-Compiled-language\" class=\"headerlink\" title=\"編譯式語言 Compiled language\"></a>編譯式語言 Compiled language</h2><p>是以編譯器，先將程式碼編譯為機器碼，再加以執行。由於已經在預先編譯，當遇到問題時就可以預先除錯，這就是編譯式語言的好處，通常來講效能也會比較好。</p><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(1)%20-%20%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%20-%20JavaScript%20%E9%81%8B%E4%BD%9C%E6%96%B9%E5%BC%8F%2F%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80%E9%81%8B%E4%BD%9C.jpg?alt=media&token=7b51be80-95e5-4558-93fb-02ea6eba55a5\" alt=\"運作過程\"></p><p>編譯語言列表:</p><ul><li>C++</li><li>Objective-C</li><li>C#</li></ul><h2 id=\"JavaScript-運作過程\"><a href=\"#JavaScript-運作過程\" class=\"headerlink\" title=\"JavaScript 運作過程\"></a>JavaScript 運作過程</h2><p>前面提到 JS 是屬於直譯式語言，需透過直譯器<code>轉譯</code>成機器碼才能夠執行，而這個轉換過程分成以下三個階段:</p><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(1)%20-%20%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%20-%20JavaScript%20%E9%81%8B%E4%BD%9C%E6%96%B9%E5%BC%8F%2FJS%20%E8%BD%89%E8%AD%AF%E9%81%8E%E7%A8%8B.jpg?alt=media&token=b7c9e0cf-cabe-4d8c-9eb5-2c483f208edd\" alt=\"JavaScript 轉換過程\"></p><p><a href=\"https://esprima.org/demo/parse.html\" target=\"_blank\" rel=\"noopener\">Esprima</a> 這是用來了解語法基本單元化以及抽象結構樹的小工具</p><ul><li>語法基本單元化: 透過逐行逐字的分析程式碼，<code>尚未定義完成</code></li><li>抽象結構樹: 將原始碼定義完成，<code>尚未運行</code></li><li>代碼生成: 生成機器碼，<code>運行程式碼</code></li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200307/1405700237/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(1)-執行環境與作用域-JavaScript 運作方式</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (16) - 運算子、型別與文法 - 寬鬆相等、嚴格相等","url":"/javascript/20201224/514409429/","content":"<h2 id=\"寬鬆相等\"><a href=\"#寬鬆相等\" class=\"headerlink\" title=\"寬鬆相等\"></a>寬鬆相等</h2><p>又稱<code>一般相等</code><br>先將比較值轉換成同型別後比較。接著進行的幾乎和嚴格相等（===）一樣。 寬鬆相等會對稱： A == B 等同 B == A ，無論 A 和 B 是什麼。</p><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener\">MDN 相等比較</a></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> == <span class=\"string\">'1'</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"comment\">/* 實際解析 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> == <span class=\"built_in\">Number</span>(<span class=\"string\">'1'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">17</span> == <span class=\"string\">'0x11'</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"comment\">/* 實際解析 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">17</span> == <span class=\"built_in\">Number</span>(<span class=\"string\">'0x11'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> == <span class=\"string\">'true'</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"comment\">/* 實際解析 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> == <span class=\"built_in\">Number</span>(<span class=\"string\">'true'</span>)); <span class=\"comment\">/* Number('true') =&gt; NaN */</span></span><br></pre></td></tr></table></figure><p><code>布林與字串</code>會先轉換為<code>數值</code>在進行比對</p><p>至於 Object 與 Array 如何比對呢?<br>Array 是屬於 Object 的一種，並且在做寬鬆對比時，會被包裹物件轉換在進行比對</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> == [<span class=\"number\">10</span>]; <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"comment\">/* 實際解析 */</span></span><br><span class=\"line\"><span class=\"number\">10</span> == <span class=\"built_in\">Number</span>([<span class=\"number\">10</span>]);</span><br></pre></td></tr></table></figure><p>詳細範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'0'</span>); <span class=\"comment\">/* 此為物件型別 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num == num); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj == obj); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str == str); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num == obj); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num == str); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj == str); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 特別 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 特別 除了少數情況，這兩個應該是 false。 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj == <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj == <span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure><h2 id=\"嚴格相等\"><a href=\"#嚴格相等\" class=\"headerlink\" title=\"嚴格相等\"></a>嚴格相等</h2><p>嚴格相等比較兩個值，而被比較的兩個值<code>都不會轉換成其他型別</code>。如果值是不同型別，就會被視為不相等。如果兩值型別相同但不是數字，若值相同，則為相等。此外，如果兩個值皆為數字，只要他們是 NaN 以外的同一值，或者 +0 和 -0，則為相等。</p><p>NaN，用來表示某些定義不明確的數學問題的解， 例如：負無窮加正無窮，<code>嚴格比較認為 NaN 不等於任何值，包含他本身。</code>（(x !== x)只有在 x 是 NaN 時會是 true。）</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'0'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num === num); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj === obj); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str === str); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num === obj); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num === str); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj === str); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 特別 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> === <span class=\"literal\">undefined</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 特別 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj === <span class=\"literal\">null</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj === <span class=\"literal\">undefined</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 特別 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+<span class=\"number\">0</span> === <span class=\"number\">-0</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>); <span class=\"comment\">/* false */</span> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">NaN</span> !== <span class=\"literal\">NaN</span>); <span class=\"comment\">/* true */</span> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">null</span> === <span class=\"literal\">NaN</span>); <span class=\"comment\">/* false */</span> </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span> === <span class=\"literal\">NaN</span>); <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><h2 id=\"實際開發\"><a href=\"#實際開發\" class=\"headerlink\" title=\"實際開發\"></a>實際開發</h2><p>由上述介紹這兩個相等比較的差異，應該就知道在開發中基本上都會使用<code>嚴格比較</code>才不會出現問題。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200628/4021116713/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(17)-運算子、型別與文法-寬鬆相等、嚴格相等以及隱含轉型</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 取出陣列重複/不重複值的方法","url":"/javascript/20210521/865415262/","content":"<h2 id=\"狀況情境\"><a href=\"#狀況情境\" class=\"headerlink\" title=\"狀況情境\"></a>狀況情境</h2><p>有以下陣列，試著取出 重複/不重複 字串與數值</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br></pre></td></tr></table></figure><h2 id=\"filter-方法\"><a href=\"#filter-方法\" class=\"headerlink\" title=\"filter() 方法\"></a>filter() 方法</h2><p>搭配 <code>indexOf()</code> 方法會回傳給定元素於陣列中<code>第一個</code>被找到之索引，若不存在於陣列中則回傳 -1。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = array.filter(<span class=\"function\">(<span class=\"params\">element, index, arr</span>) =&gt;</span> arr.indexOf(element) === index);</span><br><span class=\"line\"><span class=\"keyword\">const</span> repeat = array.filter(<span class=\"function\">(<span class=\"params\">element, index, arr</span>) =&gt;</span> arr.indexOf(element) !== index);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);  <span class=\"comment\">// &#123;1, 2, \"a\", 3, \"b\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(repeat); <span class=\"comment\">// &#123;1, \"a\"&#125;</span></span><br></pre></td></tr></table></figure><h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set()\"></a>Set()</h2><p>Set 物件可讓儲存任何類型的唯一值（unique），並且有 <code>add</code>、<code>has</code> 等方法使用</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> repeat = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">array.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result.has(item)) &#123;</span><br><span class=\"line\">    repeat.add(item);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result.add(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// &#123;1, 2, \"a\", 3, \"b\"&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(repeat); <span class=\"comment\">// &#123;1, \"a\"&#125;</span></span><br></pre></td></tr></table></figure><h2 id=\"Object-Object-keys\"><a href=\"#Object-Object-keys\" class=\"headerlink\" title=\"Object + Object.keys()\"></a>Object + Object.keys()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = &#123;&#125;;</span><br><span class=\"line\">array.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  result[item] = result[item] ? result[item] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(result)); <span class=\"comment\">// [\"1\", \"2\", \"3\", \"a\", \"b\"]</span></span><br></pre></td></tr></table></figure><h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = array.reduce(<span class=\"function\">(<span class=\"params\">obj, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> object = &#123; ...obj &#125;;</span><br><span class=\"line\">  object[item] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(result)); <span class=\"comment\">// [\"1\", \"2\", \"3\", \"a\", \"b\"]</span></span><br></pre></td></tr></table></figure><h2 id=\"Set-Spread\"><a href=\"#Set-Spread\" class=\"headerlink\" title=\"Set + Spread\"></a>Set + Spread</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">'a'</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>];</span><br><span class=\"line\"><span class=\"comment\">// const result = Array.from(new Set(array));</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = [...(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(array))];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// [1, 2, \"a\", 3, \"b\"]</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set\" target=\"_blank\" rel=\"noopener\">Set</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"noopener\">Array.prototype.indexOf()</a><br><a href=\"https://guahsu.io/2017/06/JavaScript-Duplicates-Array/\" target=\"_blank\" rel=\"noopener\">JavaScript取出陣列重複/不重複值的方法</a></p>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript 核心 (4) - 執行環境與作用域 - 執行環境與執行堆疊","url":"/javascript/20201221/1325020609/","content":"<h2 id=\"執行環境-Execution-context\"><a href=\"#執行環境-Execution-context\" class=\"headerlink\" title=\"執行環境 Execution context\"></a>執行環境 Execution context</h2><p>每一個函式都有 <code>自己的執行環境</code>，代表無法直接呼叫<code>函式內部的函式</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Cloud'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayName(); <span class=\"comment\">/* sayName is not defined; */</span></span><br></pre></td></tr></table></figure><p>在瀏覽器開啟時或是 Node.js 執行時都會建立一個全域環境，分別是以下參數</p><ul><li>瀏覽器: <code>window</code></li><li>Node.js: <code>global</code></li></ul><h2 id=\"執行推疊-Execution-stack\"><a href=\"#執行推疊-Execution-stack\" class=\"headerlink\" title=\"執行推疊 Execution stack\"></a>執行推疊 Execution stack</h2><p>可以想像成是<code>函式一層一層執行下去，執行完後再一層一層退出</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Cloud'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure><p>可以在 dev tools 中的 <code>sources</code> 查詢 <code>Call Stack</code></p><p><code>執行</code> 與 <code>釋放</code> 順序</p><ul><li>執行: <code>a() &gt; b() &gt; c()</code></li><li>釋放: <code>c() &gt; b() &gt; a()</code></li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200502/2917226562/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(4)-執行環境與作用域-執行環境與執行堆疊</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (29) - 函式以及 This 的運作 - 什麼是函式","url":"/javascript/20210104/962869145/","content":"<h2 id=\"函式特色\"><a href=\"#函式特色\" class=\"headerlink\" title=\"函式特色\"></a>函式特色</h2><p>函式屬於物件一種，並且具有以下特性:</p><ul><li>具有被呼叫的能力</li><li>可以撰寫程式碼的區塊</li><li>有屬於自己的 this</li><li>具有自己的執行環境</li><li>可回傳結果(return)</li><li>名稱（選用，匿名函式與具名函式）</li></ul><h2 id=\"函式陳述式\"><a href=\"#函式陳述式\" class=\"headerlink\" title=\"函式陳述式\"></a>函式陳述式</h2><p>函式陳述式並不會主動回傳結果，而是必須等待呼叫後才會回傳結果</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"函式表達式\"><a href=\"#函式表達式\" class=\"headerlink\" title=\"函式表達式\"></a>函式表達式</h2><p>函式表達式在程式碼執行時，就會將函式回傳到 <code>fn</code> 中，可在細分為 <code>匿名函式</code>、<code>具名函式</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 匿名函式 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 具名函式 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fnA = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnB</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fnA, fnB); <span class=\"comment\">/* fnB is not defined */</span></span><br></pre></td></tr></table></figure><h2 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h2><p>專案上到底該使用 <code>函式陳述式</code> 還是 <code>函式表達式</code> 呢?<br>其實這沒有標準答案，一切還是看團隊一開始的規範文件而訂。<br>當然，像是 Airbnb 規範就希望都是用 <code>函式表達式</code>，而且還是<code>具名函式</code>，畢竟 <code>函式陳述式</code> 會有所謂的 <code>Hoisting</code>，有時候在 debug 上會需要先釐清運作流程，會增加除蟲時間。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201115/1294497105/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(35)-函式以及 This 的運作-什麼是函式</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (39) - 函式以及 This 的運作 - 函式的常見陷阱題","url":"/javascript/20210118/180950825/","content":"<h2 id=\"第一題\"><a href=\"#第一題\" class=\"headerlink\" title=\"第一題\"></a>第一題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'全域'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  getName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.myName;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = person.getName;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getName();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 全域 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第二題\"><a href=\"#第二題\" class=\"headerlink\" title=\"第二題\"></a>第二題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'全域'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'奇怪的函式'</span>,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.myName + <span class=\"string\">','</span> + a + <span class=\"string\">','</span> + b + <span class=\"string\">','</span> + c</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fnA = obj.fn;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fnB = fnA.bind(<span class=\"literal\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fnB(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 全域,0,1,2 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第三題\"><a href=\"#第三題\" class=\"headerlink\" title=\"第三題\"></a>第三題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"string\">'Global'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  value: <span class=\"string\">'local'</span>,</span><br><span class=\"line\">  bar: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接執行</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo.bar());</span><br><span class=\"line\"><span class=\"comment\">//賦值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((foo.bar = foo.bar)());</span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"literal\">false</span> || foo.bar)());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Ans: local / Global / Global */</span></span><br></pre></td></tr></table></figure><h2 id=\"第四題\"><a href=\"#第四題\" class=\"headerlink\" title=\"第四題\"></a>第四題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"built_in\">parseInt</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\"><span class=\"comment\">/* Ans: [1, NaN, NaN] */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 解析 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(item, index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210113/1357538756/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(45)-函式以及 This 的運作-總結：函式的常見陷阱題</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (8) - 執行環境與作用域 - 回收機制","url":"/javascript/20201222/3236158139/","content":"<h2 id=\"回收機制-Garbage-Collection\"><a href=\"#回收機制-Garbage-Collection\" class=\"headerlink\" title=\"回收機制 Garbage Collection\"></a>回收機制 Garbage Collection</h2><p>又稱 <code>垃圾回收</code>，回收機制是一個自動化記憶體管理機制，舉凡宣告變數、執行函式這些都會占用記憶體空間，若沒有固定清理這些暫存記憶體，很快就會沒有空間可以繼續利用，進而導致網頁 lag 不順等等狀況。</p><h2 id=\"JS-的回收機制\"><a href=\"#JS-的回收機制\" class=\"headerlink\" title=\"JS 的回收機制\"></a>JS 的回收機制</h2><p>回收機制是指 <code>「當物件不再被使用或是不再被其他物件參考時」，它才會被視為一個可回收的記憶體。</code>。<br>而在先前有說過 JS 有所謂的執行推疊，並且由後往前釋放，而當中就會將其函式所占用的記憶體一併回收。<br>以下舉例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 隨機生成很長的字串來佔用記憶體 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomString</span>(<span class=\"params\">length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> characters = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> charactersLength = characters.length;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    result += characters.charAt(<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * charactersLength));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* demoData 將持續占用記憶體空間 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> demoData = [];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    demoData.push(randomString(<span class=\"number\">5000</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demoData);</span><br></pre></td></tr></table></figure><p>在 <code>Memory</code> 中查看占用狀況<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(8)%20-%20%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%20-%20%E5%9B%9E%E6%94%B6%E6%A9%9F%E5%88%B6%2F%E8%A8%98%E6%86%B6%E9%AB%94%E5%8D%A0%E7%94%A8.jpg?alt=media&token=8713825c-2e7b-4a66-a0da-39c0a9f7ee8c\" alt=\"記憶體占用\"></p><p>即使是清掉 <code>console.log</code> 也依舊有很高的佔比。<br>將上面的函式修改成以下後再執行一次</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> demoData = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">    demoData.push(randomString(<span class=\"number\">5000</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// console.log(demoData);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getData()</span><br></pre></td></tr></table></figure><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(8)%20-%20%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%20-%20%E5%9B%9E%E6%94%B6%E6%A9%9F%E5%88%B6%2F%E8%A8%98%E6%86%B6%E9%AB%94%E5%8D%A0%E7%94%A8(%E6%94%B9%E8%89%AF).jpg?alt=media&token=b517f893-651a-4a0e-be2a-35163fedfa60\" alt=\"記憶體占用\"></p><p>由此可知，在一開始時記憶體占用確實很高沒錯，但隨後因為<code>回收機制</code>的關係，<code>demoData</code>不再被參考或使用，就會釋放記憶體空間</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200524/995184384/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(8)-執行環境與作用域-記憶體存放與釋放</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - Google sheet 表單串接 API","url":"/javascript/20200229/430374326/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>Google form</code> 表單服務應該是目前最多人拿來建立表單的一種方式，然而，有優點自然也有缺點，在表單中無法製作<code>相對複雜的內容</code>、<code>需外連到表單網頁</code>、<code>無法追蹤表單行為</code>、<code>無法使用 GA 轉換追蹤</code>，此問題 Google 也聽到了，開發出 API 服務，使得開發者可以透過此 API 來與 <code>Google sheet</code> 讀寫資料。</p><h2 id=\"建立-Google-Sheet-表單\"><a href=\"#建立-Google-Sheet-表單\" class=\"headerlink\" title=\"建立 Google Sheet 表單\"></a>建立 Google Sheet 表單</h2><p><a href=\"https://developers.google.com/apps-script/reference/spreadsheet/sheet\" target=\"_blank\" rel=\"noopener\">Google Sheet method</a><br>打開雲端硬碟，建立 Google 試算表，取得表單 <code>ID</code>。<br>表單 ID 就是網址中間那串亂碼 ex: <a href=\"https://docs.google.com/spreadsheets/d/表單ID/edit#gid=0。\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/spreadsheets/d/表單ID/edit#gid=0。</a><br><img src=\"https://i.imgur.com/VdFfBAw.png\" alt=\"Google Sheet\"></p><h2 id=\"撰寫-API-執行內容\"><a href=\"#撰寫-API-執行內容\" class=\"headerlink\" title=\"撰寫 API 執行內容\"></a>撰寫 API 執行內容</h2><p>在表單選單中找到 <code>工具</code> =&gt; <code>指令碼編輯器</code><br><img src=\"https://i.imgur.com/ltULzLL.png\" alt=\"\"><br>接著會出現以下頁面<br><img src=\"https://i.imgur.com/8dhhpMc.png\" alt=\"指令碼編輯器\"><br>中間 Function 參考範例，並有附上說明</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* doGet =&gt; API method 爲 get */</span></span><br><span class=\"line\"><span class=\"comment\">/* doPost =&gt; API method 爲 post */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doGet</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//取得參數 e.parameter</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = e.parameter;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = params.name; <span class=\"comment\">/* 屬性名稱必須跟前端相符合 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> phone = params.phone; <span class=\"comment\">/* 屬性名稱必須跟前端相符合 */</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">//sheet資訊</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> SpreadSheet = SpreadsheetApp.openById(<span class=\"string\">\"表單ID\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Sheet = SpreadSheet.getSheets()[<span class=\"number\">0</span>]; <span class=\"comment\">/* 取得要存入的試算表的第一張試算表 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> LastRow = Sheet.getLastRow(); <span class=\"comment\">/* 取得該張試算表中，最後一列有值的列數。 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//存入資訊 /* 將資料存入最後有值的下一列 */</span></span><br><span class=\"line\">  Sheet.getRange(LastRow+<span class=\"number\">1</span>, <span class=\"number\">1</span>).setValue(name);</span><br><span class=\"line\">  Sheet.getRange(LastRow+<span class=\"number\">1</span>, <span class=\"number\">2</span>).setValue(phone);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//回傳資訊</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ContentService.createTextOutput(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"部屬應用程式\"><a href=\"#部屬應用程式\" class=\"headerlink\" title=\"部屬應用程式\"></a>部屬應用程式</h2><p>選擇<code>發布</code> =&gt; <code>部屬為網路應用程式</code><br><img src=\"https://i.imgur.com/pCizGPu.png\" alt=\"部屬應用程式\"><br>選擇要允許讀寫的的對象，這裡一定要選 <code>任何人，包含匿名使用者</code>，不能選<code>所有人</code>，否則會出現 <code>CORS</code> 問題。<br><img src=\"https://i.imgur.com/kVzlKYq.png\" alt=\"部屬應用程式\"><br>都選好就下一步，就會取得該 <code>API</code> 囉。<br><img src=\"https://i.imgur.com/u8IJUeq.png\" alt=\"API\"></p><h2 id=\"範例模板\"><a href=\"#範例模板\" class=\"headerlink\" title=\"範例模板\"></a>範例模板</h2><p>以下直接附上 HTML 、 JavaScript 範例程式碼，基本上就單純的 <code>AJAX</code> 行為，可依照自己的專案使用像是 <code>jQuery</code> 取值、<code>Vue</code> 雙向綁定取值等方式。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>您的大名：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nameValue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>您的電話：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"phoneValue\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>送出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sendButton = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'button'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#nameValue'</span>).value;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> phone = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#phoneValue'</span>).value;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    type: <span class=\"string\">\"get\"</span>,</span><br><span class=\"line\">    url: <span class=\"string\">\"剛剛取得的 API，請直接貼上\"</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: name, <span class=\"comment\">/* 屬性名稱需與 Google Sheet 相同 */</span></span><br><span class=\"line\">      <span class=\"string\">\"phone\"</span>: phone, <span class=\"comment\">/* 屬性名稱需與 Google Sheet 相同 */</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dataType: <span class=\"string\">\"JSON\"</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(response == <span class=\"string\">\"成功\"</span>)&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"成功\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">sendButton.addEventListener(<span class=\"string\">'click'</span>, send);</span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>依照上述操作，就可以執行寫入表單的服務囉。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/unalai/%E5%AF%AB%E7%B5%A6%E7%B4%94%E5%89%8D%E7%AB%AF-%E8%AE%93-google-sheets-%E7%95%B6%E4%BD%A0%E7%9A%84%E5%BE%8C%E7%AB%AF%E5%AE%8C%E6%88%90%E5%AF%AB%E5%85%A5%E5%8A%9F%E8%83%BD-715799e5e013\" target=\"_blank\" rel=\"noopener\">寫給純前端，讓 Google Sheets 當你的後端完成寫入功能</a><br><a href=\"https://iandays.com/2018/02/08/googleformapi/\" target=\"_blank\" rel=\"noopener\">Google sheet 試算表表單串接api</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool","Google App Script"]},{"title":"JavaScript - 統一編號驗證實作","url":"/javascript/20191119/2134109134/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>雖然說後端也能做統編驗證，但實務上客戶在下單後，後端還要處理統編驗證再回傳確實會不夠快速。<br>所以選擇在輸入時前端就直接根據輸入的內容進行判斷來做提示，或是能否進一步結帳等行為。</p><h2 id=\"統一編號說明\"><a href=\"#統一編號說明\" class=\"headerlink\" title=\"統一編號說明\"></a>統一編號說明</h2><p>統一編號（簡稱：統編）是臺灣營利事業機構的個別法人身分代號，為一組8位數字。機構有開統編及未開統編公司課的稅賦是相同的。<br>驗證規則如下:</p><ul><li>假設統一編號為 A B C D E F G H</li><li>A - G 為編號, H 為檢查碼</li><li>A - G 個別乘上特定倍數, 若乘出來的值為二位數則將十位數和個位數相加</li><li>A x 1</li><li>B x 2</li><li>C x 1</li><li>D x 2</li><li>E x 1</li><li>F x 2</li><li>G x 4</li><li>H x 1</li><li>最後將所有數值加總, 被 10 整除就為正確</li><li>若上述演算不正確並且 G 為 7 得話, 再加上 1 被 10 整除也為正確</li></ul><h2 id=\"驗證範例-傳統形式\"><a href=\"#驗證範例-傳統形式\" class=\"headerlink\" title=\"驗證範例 - 傳統形式\"></a>驗證範例 - 傳統形式</h2><p>直接上 code 吧!!</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check_tax_number</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> gui_number = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.gui_number'</span>).value; <span class=\"comment\">// 取欄位內容</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> cx = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cnum = gui_number.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cc</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> total = num;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s = total.toString();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> n1 = s.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>) * <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> n2 = s.substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>) * <span class=\"number\">1</span>;</span><br><span class=\"line\">      total = n1 + n2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (gui_number.length !== <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'統編錯誤，要有 8 個數字'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cnum.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gui_number.charCodeAt() &lt; <span class=\"number\">48</span> || gui_number.charCodeAt() &gt; <span class=\"number\">57</span>) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">'統編錯誤，要有 8 個 0-9 數字組合'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sum += cc(item * cx[index]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sum % <span class=\"number\">10</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'統編正確'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnum[<span class=\"number\">6</span>] === <span class=\"string\">'7'</span> &amp;&amp; (sum + <span class=\"number\">1</span>) % <span class=\"number\">10</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'統編正確2'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'統編錯誤'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"gui_number\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gui_number\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"驗證\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"check_tax_number()\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"驗證範例-Vue\"><a href=\"#驗證範例-Vue\" class=\"headerlink\" title=\"驗證範例 - Vue\"></a>驗證範例 - Vue</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  check_tax_number() &#123; <span class=\"comment\">// 統編驗證</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cx = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.receipt_taxnum.length !== <span class=\"number\">8</span>) &#123; <span class=\"comment\">// receipt_taxnum v-model 綁定欄位</span></span><br><span class=\"line\">      vm.receipt_taxnum_hint = <span class=\"string\">'統編錯誤，要有 8 個數字'</span>; <span class=\"comment\">// receipt_taxnum_hint 我自定義的提示</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnum = vm.receipt_taxnum.split(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cc</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> total = num;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (total &gt; <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> s = total.toString();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n1 = s.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>) * <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> n2 = s.substring(<span class=\"number\">1</span>, <span class=\"number\">2</span>) * <span class=\"number\">1</span>;</span><br><span class=\"line\">        total = n1 + n2;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cnum.forEach(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      sum += cc(item * cx[index]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum % <span class=\"number\">10</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        vm.receipt_taxnum_hint = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnum[<span class=\"number\">6</span>] === <span class=\"string\">'7'</span> &amp;&amp; (sum + <span class=\"number\">1</span>) % <span class=\"number\">10</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        vm.receipt_taxnum_hint = <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vm.receipt_taxnum_hint = <span class=\"string\">'統一編號錯誤'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"tel\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"請輸入統編\"</span> <span class=\"attr\">minlength</span>=<span class=\"string\">\"8\"</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">\"8\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-model</span>=<span class=\"string\">\"receipt_taxnum\"</span> @<span class=\"attr\">input</span>=<span class=\"string\">\"check_tax_number()\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text-danger\"</span>&gt;</span>&#123;&#123; receipt_taxnum_hint &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>驗證規則不算太複雜，可根據自己的寫法來調整呦，本篇提供兩種寫法供大家參考，感謝各位觀看!!</p>","categories":["JavaScript"],"tags":["JavaScript","Vue"]},{"title":"JavaScript - 瀏覽器中常見的高度介紹","url":"/javascript/20200223/1272962849/","content":"<h2 id=\"名詞解釋\"><a href=\"#名詞解釋\" class=\"headerlink\" title=\"名詞解釋\"></a>名詞解釋</h2><ul><li><p>window.outerHeight<br>獲取<code>整個瀏覽器</code>的高度、包含側邊欄、、書籤、網頁標題。此處在縮放瀏覽器時，也會有所變化，並非指電腦螢幕的高度。</p></li><li><p>window.innerHeight<br>瀏覽器的顯示內容（viewport）高度；如果有水平滾動條，也包括滾動條高度。<br><img src=\"https://i.imgur.com/8aX8jea.png\" alt=\"outerHeight 與 innerHeight\"></p></li><li><p>document.body.clientHeight<br>為內容文檔 <code>body</code> 的高度，當高度超過 <code>window.innerHeight</code>，則會出現滾動條。<br>如果在 <code>body</code> 設定高度為 100vh 或是在 <code>html</code> 設定高度 100vh 而 body 的高度為 100% 的話(隨父層 <code>html</code> 高度)，此時 <code>clientHeight</code>、<code>height()</code> 都只會給出 <code>window.innerHeight</code> 的高度數值，這點在設定高度上比需要注意。</p></li><li><p>window.screen.height<br>電腦解析度的高，如果電腦解析度文 1920*1080，那此數值就會是 1080。</p></li><li><p>screen.availHeight<br>為螢幕可用工作的高度，此數值不會變動，畢竟螢幕的大小只有在換螢幕時才會變換啊。</p></li><li><p>HTMLElement.offsetHeight<br>為該 <code>element</code>or<code>DOM</code>元素的高度，此高度包含 padding、border，不包含 margin 數值<br><img src=\"https://i.imgur.com/YSLtn7C.png\" alt=\"offsetHeight\"></p></li><li><p>Element.scrollHeight<br>當該 <code>element</code> 有設定 overflow 屬性，而沒顯示在螢幕上的高度可使用 <code>scrollHeight</code> 取得該 <code>element</code> 全部高度<br><img src=\"https://i.imgur.com/cTcb7VR.png\" alt=\"scrollHeight\"></p></li></ul><h2 id=\"滾動應用\"><a href=\"#滾動應用\" class=\"headerlink\" title=\"滾動應用\"></a>滾動應用</h2><ul><li>Element.scrollTop: 獲取元素被向上滾動的高度，此項常被用來監聽 <code>window</code> 的滾動事件<br>ex:<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//為了保證相容性，這裡取兩個值，哪個有值取哪一個</span></span><br><span class=\"line\">  <span class=\"comment\">//scrollTop就是觸發滾輪事件時滾輪的高度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(scrollTop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>基本上使用 <code>HTMLElement.offsetHeight</code> 以及 <code>Element.scrollTop</code> 加上監聽事件，就能做出像是 <code>錨點動畫</code>、<code>回頂部動畫</code>、<code>滾動特定區塊後增加 DOM 元素的 class 配合 transform 屬性</code>等等，<br>本篇著重基本觀念解說，監聽事件的範例之後會在寫篇文章記錄。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/292151/\" target=\"_blank\" rel=\"noopener\">javascript的offset、client、scroll使用方法詳解</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool","HTML"]},{"title":"JavaScript 核心 (6) - 執行環境與作用域 - 提升","url":"/javascript/20201221/3533353387/","content":"<h2 id=\"提升-Hoisting\"><a href=\"#提升-Hoisting\" class=\"headerlink\" title=\"提升 Hoisting\"></a>提升 Hoisting</h2><p>Hoisting 一詞僅僅只是要釐清 JavaScript 的運作原理而出現的觀念說明。<br>在 JavaScript 運作過程中可分為兩階段，<code>創造階段</code> 以及 <code>執行階段</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 一般撰寫流程 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* return 'Cloud' */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* JavaScript 實際運作 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 創造階段 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a;          <span class=\"comment\">/* 記憶體給出空間 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 執行階段 */</span></span><br><span class=\"line\">a = <span class=\"string\">'Cloud'</span>;    <span class=\"comment\">/* 賦予其值 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* return 'Cloud' */</span></span><br></pre></td></tr></table></figure><p>當 console.log 移到宣告變數前則會出現 <code>undefined</code> 錯誤，這是因為在 <code>創造階段</code> 時，僅僅是準備記憶體空間而已，並未賦予其值，所以才出現 <code>undefined</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)  <span class=\"comment\">/* return undefined */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span>;</span><br></pre></td></tr></table></figure><h2 id=\"函式、變數優先順序\"><a href=\"#函式、變數優先順序\" class=\"headerlink\" title=\"函式、變數優先順序\"></a>函式、變數優先順序</h2><p><code>函式</code>的 Hoisting 會比 <code>變數</code> 更高，但其中僅限於 <code>函式陳述式</code>，因為 <code>函式表達式</code> 實際上是屬於變數一種，所以並不會高過其他變數宣告順序</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 創造階段 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 執行階段 */</span></span><br><span class=\"line\">a = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><p>由於函式會被優先建立的關係，所以其實是可以在函式之前呼叫該函式的</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">sayHi();        <span class=\"comment\">/* Hello Cloud */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Cloud'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200503/1924910570/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(6)-執行環境與作用域-提升</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (30) - 函式以及 This 的運作 - 立即函式","url":"/javascript/20210104/1134069126/","content":"<h2 id=\"立即函式-IIFE\"><a href=\"#立即函式-IIFE\" class=\"headerlink\" title=\"立即函式 IIFE\"></a>立即函式 IIFE</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Glossary/IIFE\" target=\"_blank\" rel=\"noopener\">MDN IIFE</a></p><p>全名 「immediately-invoked function expression」，意即 <code>立即呼叫函式表達式</code>。<br>可依照 <code>具名與否</code>以及<code>()位置</code>分成四種寫法。<br>此外，多個 IIFE 中間必須要有<code>;</code>斷行，才不會違法 JavaScript 規範。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE_1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'具名、括號在內'</span>);</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE_2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'具名、括號在外'</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'IIFE_3 匿名、括號在內'</span>);</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'IIFE_4 匿名、括號在外'</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h2 id=\"侷限作用域\"><a href=\"#侷限作用域\" class=\"headerlink\" title=\"侷限作用域\"></a>侷限作用域</h2><p>IIFE 有一個特點是 <code>無法在函式外再次被執行</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test); <span class=\"comment\">/* test is not defined */</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> test = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">IIFE(); <span class=\"comment\">/* IIFE is not defined */</span></span><br></pre></td></tr></table></figure><h2 id=\"傳遞參數\"><a href=\"#傳遞參數\" class=\"headerlink\" title=\"傳遞參數\"></a>傳遞參數</h2><p>IIFE 是利用後面的 <code>()</code> 傳遞參數，並在前面的<code>()</code>接收參數。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">&#125;)(<span class=\"string\">'Cloud'</span>);</span><br></pre></td></tr></table></figure><h2 id=\"表達式\"><a href=\"#表達式\" class=\"headerlink\" title=\"表達式\"></a>表達式</h2><p>不要忘記 IIFE 也是表達式，所以也能賦予值給變數使用。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">&#125;)(<span class=\"string\">'Cloud'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myName);</span><br></pre></td></tr></table></figure><h2 id=\"為何要使用-IIFE\"><a href=\"#為何要使用-IIFE\" class=\"headerlink\" title=\"為何要使用 IIFE\"></a>為何要使用 IIFE</h2><p>主要是避免污染到全域環境並導致污染與衝突。<br>在許多框架中，會將框架運作的程式碼包在 IIFE 之中，最後在回傳掛載在 <code>全域環境變數上</code> 做使用。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201118/707576253/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(36)-函式以及 This 的運作-立即函式</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (52) - ES6 章節：Let 及 Const - Let 有沒有 Hoisting？暫時性死區介紹","url":"/javascript/20210202/2575331614/","content":"<h2 id=\"let-與-const-的-Hoisting\"><a href=\"#let-與-const-的-Hoisting\" class=\"headerlink\" title=\"let 與 const 的 Hoisting\"></a>let 與 const 的 Hoisting</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 創造階段 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 執行 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Ming); <span class=\"comment\">/* Ming is not defined */</span></span><br><span class=\"line\"><span class=\"comment\">// 各瀏覽器錯誤訊息不同，這裡其實 let 有被提升</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Ming = <span class=\"string\">'小明'</span>;</span><br></pre></td></tr></table></figure><p>我們用另一個範例測試:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> Ming; <span class=\"comment\">/* 暫時性死區 TDZ */</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(Ming); <span class=\"comment\">/* Identifier 'Ming' has already been declared */</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> Ming = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>let、const</code> 一樣會有創造階段</li><li>從創造階段到實際執行的階段會出現 <code>TDZ</code> 這個區域無法呼叫變數</li><li>有創造到執行的概念，但不會先出現 <code>undefined</code> 而是出現錯誤提示</li></ul><h2 id=\"驗證\"><a href=\"#驗證\" class=\"headerlink\" title=\"驗證\"></a>驗證</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> a); <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> name); <span class=\"comment\">/* name is not defined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Cloud'</span>;</span><br></pre></td></tr></table></figure><p>由此驗證無法在 <code>TDZ</code> 過程呼叫變數</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 解決網站 HSTS 問題","url":"/javascript/20200328/2180666016/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>不知道各位將自己的網站部屬到某些主機後，使用 <code>http</code> 依舊可以開啟而不會自動轉址到 <code>https</code> 呢?<br>其實各個主機服務的後台都有對應的 <code>強制使用 https</code> 的設定，不過，也是有辦法在原始碼中直接設定 <code>強制使用 https</code> 的方法就是了。</p><h2 id=\"直接寫入-HTML\"><a href=\"#直接寫入-HTML\" class=\"headerlink\" title=\"直接寫入 HTML\"></a>直接寫入 HTML</h2><p>此方法則是在渲染頁面時強制改寫網址 <code>HTTPS</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Redirecting...<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">\"JavaScript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">redirectHttpToHttps</span><span class=\"params\">()</span></span></span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> httpURL= <span class=\"built_in\">window</span>.location.hostname + <span class=\"built_in\">window</span>.location.pathname + <span class=\"built_in\">window</span>.location.search;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> httpsURL= <span class=\"string\">\"https://\"</span> + httpURL;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.location = httpsURL;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  redirectHttpToHttps();</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"redirect-ssl\"><a href=\"#redirect-ssl\" class=\"headerlink\" title=\"redirect-ssl\"></a>redirect-ssl</h2><p>套件名稱: redirect-ssl<br><a href=\"https://github.com/nuxt-community/redirect-ssl\" target=\"_blank\" rel=\"noopener\">redirect-ssl github</a><br>輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install redirect-ssl -S</span><br></pre></td></tr></table></figure><p>此套件是使用在 Nuxt.js，一般專案形式採用上面的方法即可。<br>在 <code>nuxt.config.js</code> 中加入以下的 <code>serverMiddleware</code> 設定</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  serverMiddleware: [</span><br><span class=\"line\">    <span class=\"comment\">// Will register redirect-ssl npm package</span></span><br><span class=\"line\">    <span class=\"string\">'redirect-ssl'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>有一點要特別小心，此方法在本地端執行 <code>npm run dev</code> 時會無法開啟，請記得在開發階段不要開啟此設定。</p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>最保險的方法還是根據主機服務商提供的設定來使用，以上方法只是因為小弟還不太會設定 <code>GCP</code> 的 <code>HTTPS</code>，之後有機會在介紹如何使用 <code>GCP</code> 設定 <code>HTTPS</code>。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://stackoverflow.com/questions/4954768/automatic-redirection-to-https\" target=\"_blank\" rel=\"noopener\">automatic redirection to https?</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool","HTTP"]},{"title":"JavaScript - 實現 input file 圖片預覽功能","url":"/javascript/20200426/4258008084/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近在負責公司後台的管理系統，有一個需求是需要上傳本地端圖片，但同時也必須在加入圖片時就顯示出來讓管理者預覽，以下就跟我一起來時做看看吧。</p><h2 id=\"模板設定\"><a href=\"#模板設定\" class=\"headerlink\" title=\"模板設定\"></a>模板設定</h2><p>基本的 HTML、CSS 請參考以下範例</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'file'</span> <span class=\"attr\">onchange</span>=<span class=\"string\">\"readURL(this);\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"blah\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://placehold.it/180\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"your image\"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>:<span class=\"number\">180px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=file]</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#2d2d2d</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"FileReader-使用\"><a href=\"#FileReader-使用\" class=\"headerlink\" title=\"FileReader 使用\"></a>FileReader 使用</h2><p>藉由 <code>FileReader</code> 物件，瀏覽器能以非同步的方式讀取再用戶端的檔案內容，可以使用 File、Blob 物件指定要讀取的資料<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader MDN</a><br>以下就是如何透過 <code>onchange</code> 是觸發預覽功能範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readURL</span>(<span class=\"params\">input</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(input);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input.files &amp;&amp; input.files[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">      $(<span class=\"string\">'#blah'</span>).attr(<span class=\"string\">'src'</span>, e.target.result);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    reader.readAsDataURL(input.files[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>理論上這時候就可以測試將圖片加入，若有正常預覽代表成功囉!!<br><code>FileReader</code> 本身有其他 API 功能，就看各位的需求是什麼在調整即可。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/FileReader\" target=\"_blank\" rel=\"noopener\">FileReader MDN</a><br><a href=\"https://www.webtrickshome.com/faq/how-to-display-uploaded-image-in-html-using-javascript\" target=\"_blank\" rel=\"noopener\">How To Display Uploaded Image In Html Using Javascript ?</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript 核心 (28) - 物件 - JSON","url":"/javascript/20210104/2776902226/","content":"<h2 id=\"物件-VS-JSON\"><a href=\"#物件-VS-JSON\" class=\"headerlink\" title=\"物件 VS JSON\"></a>物件 VS JSON</h2><p><a href=\"https://zh.wikipedia.org/wiki/JSON\" target=\"_blank\" rel=\"noopener\">MDN JSON</a><br>JSON 與物件寫法類似，定義上是屬於資料格式。<br>實際上與 JavaScript 並沒有關係。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Ray'</span>,</span><br><span class=\"line\">  fn: <span class=\"string\">'SayHello'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"Ray\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"fn\"</span>:<span class=\"string\">\"SayHello\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>JSON 主要特性:</p><ul><li>必定為字串格式</li><li>最後一個不可有逗號</li><li>採用雙引號而非單引號</li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201112/8535/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(32)-物件-JSON</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (2) - 執行環境與作用域 - LHS、RHS差異","url":"/javascript/20201221/3916322912/","content":"<h2 id=\"LHS-Left-Hand-Side\"><a href=\"#LHS-Left-Hand-Side\" class=\"headerlink\" title=\"LHS (Left-Hand Side)\"></a>LHS (Left-Hand Side)</h2><p>賦予值到左側的變數上</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; <span class=\"comment\">/* 將 1 賦予到變數 a 上 */</span></span><br></pre></td></tr></table></figure><p>錯誤的 LHS 範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'小傑'</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>輸入以上範例時，瀏覽器的 console 則會報錯 <code>Uncaught SyntaxError: Invalid left-hand side in assignment</code></p><p>另一種錯誤範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"string\">'小明'</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>此時回報不是 LHS 錯誤，而是 <code>Uncaught SyntaxError: Unexpected string</code></p><h2 id=\"RHS-Right-Hand-Side\"><a href=\"#RHS-Right-Hand-Side\" class=\"headerlink\" title=\"RHS (Right-Hand Side)\"></a>RHS (Right-Hand Side)</h2><p>指取值是來自右側的變數上</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'小傑'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>RHS 也可以視為 <code>變數重新賦予到新的變數上</code>。</p><p>錯誤的 RHS 範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure><p>輸入以上範例時，瀏覽器的 console 則會報錯 <code>Uncaught ReferenceError: b is not defined</code><br>不同瀏覽器有些微差異，但都是以 <code>XXX is not defined</code> 為主</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200405/949633773/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(2)-執行環境與作用域-執行的錯誤情境 LHS, RHS</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (3) - 執行環境與作用域 - 語法作用域","url":"/javascript/20201221/1972639133/","content":"<h2 id=\"語法作用域-Lexical-scope\"><a href=\"#語法作用域-Lexical-scope\" class=\"headerlink\" title=\"語法作用域 Lexical scope\"></a>語法作用域 Lexical scope</h2><p>又稱 <code>靜態作用域</code><br>當宣告語法時，就已經決定其作用域<br>而常見作用域有 <code>全域環境</code>、<code>區域環境</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* name is not defined; */</span></span><br></pre></td></tr></table></figure><p>此時 <code>name</code> 的作用域是在函式內，全域環境並沒有 <code>name</code> 參數</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Cloud'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sayName(); <span class=\"comment\">/* sayName is not defined; */</span></span><br></pre></td></tr></table></figure><p>除了變數以外，<code>函式</code>也會受到語法作用域影響</p><h2 id=\"動態作用域\"><a href=\"#動態作用域\" class=\"headerlink\" title=\"動態作用域\"></a>動態作用域</h2><p>變數的作用域在<code>函式調用時</code>才決定</p><h2 id=\"綜合說明\"><a href=\"#綜合說明\" class=\"headerlink\" title=\"綜合說明\"></a>綜合說明</h2><p>以下範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>; <span class=\"comment\">/* 全域變數 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fu1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fu2</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"number\">2</span>; <span class=\"comment\">/* 區域變數 */</span></span><br><span class=\"line\">  fu1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fu2();</span><br></pre></td></tr></table></figure><ul><li>靜態作用域: <code>value = 1</code></li><li>動態作用域: <code>value = 2</code></li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (18) - 運算子、型別與文法 - 邏輯運算子及函式預設值","url":"/javascript/20201224/79486610/","content":"<h2 id=\"邏輯運算子\"><a href=\"#邏輯運算子\" class=\"headerlink\" title=\"邏輯運算子\"></a>邏輯運算子</h2><ul><li><code>&amp;&amp;</code>: 運算式1 &amp;&amp; 運算式2，假如 運算式1 可以被轉換成 <code>false</code> 的話，回傳 運算式1; 否則，回傳 運算式2。 因此，&amp;&amp;只有在 兩個運算元都是 true 時才會回傳 true，否則回傳 false。</li><li><code>||</code>: 運算式1 || 運算式2，假如 運算式1 可以被轉換成 <code>true</code> 的話，回傳 運算式1; 否則，回傳 運算式2。 因此，||在 兩個運算元有任一個是 true 時就會回傳 true，否則回傳 false。</li><li><code>!</code>: !運算式，假如單一個運算元能被轉換成 <code>true</code> 時，回傳 false，不然回傳 true。</li></ul><p>上範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> &amp;&amp; <span class=\"number\">1</span>); <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &amp;&amp; <span class=\"number\">0</span>); <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0</span> || <span class=\"number\">1</span>); <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> || <span class=\"number\">0</span>); <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!<span class=\"number\">0</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(!<span class=\"number\">1</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(![]); <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><h2 id=\"預設值問題\"><a href=\"#預設值問題\" class=\"headerlink\" title=\"預設值問題\"></a>預設值問題</h2><p>上範例說明:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> originCash = <span class=\"number\">500</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateEasyCard</span>(<span class=\"params\">cash</span>) </span>&#123;</span><br><span class=\"line\">  cash = <span class=\"built_in\">parseInt</span>(cash);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(cash);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 當 cash 是數值或為 0 時，使用 cash 的數值 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 如果 cash 是 NaN 時，則直接套用 500 */</span></span><br><span class=\"line\">  cash = (cash || cash === <span class=\"number\">0</span>) ? cash : <span class=\"number\">500</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = cash + originCash;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'我有 '</span> + money + <span class=\"string\">' 元'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">updateEasyCard();  <span class=\"comment\">/* NaN 我有 1000 元 */</span></span><br><span class=\"line\">updateEasyCard(<span class=\"number\">0</span>); <span class=\"comment\">/* 0 我有 500 元 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200705/3382481626/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(19)-運算子、型別與文法-邏輯運算子及函式預設值</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (48) - 物件屬性延伸 - 屬性列舉與原型的關係","url":"/javascript/20210201/3829070841/","content":"<h2 id=\"原型屬性顏色判斷\"><a href=\"#原型屬性顏色判斷\" class=\"headerlink\" title=\"原型屬性顏色判斷\"></a>原型屬性顏色判斷</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'人類'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Cloud.a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud.hasOwnProperty(<span class=\"string\">'a'</span>)); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud.hasOwnProperty(<span class=\"string\">'b'</span>)); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Cloud.hasOwnProperty(<span class=\"string\">'name'</span>)); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Cloud) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"comment\">/* a */</span></span><br><span class=\"line\">  <span class=\"comment\">/* name */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>hasOwnProperty()</code> 只針對當下物件是否有該屬性，但使用 <code>for in</code> 卻可以顯示出 <code>name</code>，究竟是為什麼呢?</p><p>由下圖可知，<code>Cloud 的 a</code> 跟 <code>name</code> 顏色都是相同的，而原型功能的顏色卻不一樣<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(48)%20-%20%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%BB%B6%E4%BC%B8%20-%20%E5%B1%AC%E6%80%A7%E5%88%97%E8%88%89%E8%88%87%E5%8E%9F%E5%9E%8B%E7%9A%84%E9%97%9C%E4%BF%82%2F%E6%93%B7%E5%8F%96.JPG?alt=media&token=d96936c2-5427-40cb-92de-df4deb372bf9\" alt=\"屬性顏色判斷\"></p><h2 id=\"屬性列舉影響\"><a href=\"#屬性列舉影響\" class=\"headerlink\" title=\"屬性列舉影響\"></a>屬性列舉影響</h2><p>新增原型的屬性預設其特徵都是會全開的<code>(configurable: true, enumerable: true, writable: true)</code>，而原型本身的功能其實是 <code>enumerable: false</code>　不可列舉</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'人類'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Cloud.a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Cloud) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"comment\">/* a */</span></span><br><span class=\"line\">  <span class=\"comment\">/* name */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Cloud.__proto__, <span class=\"string\">'name'</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(Cloud.__proto__.__proto__, <span class=\"string\">'toString'</span>));</span><br></pre></td></tr></table></figure><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(48)%20-%20%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%BB%B6%E4%BC%B8%20-%20%E5%B1%AC%E6%80%A7%E5%88%97%E8%88%89%E8%88%87%E5%8E%9F%E5%9E%8B%E7%9A%84%E9%97%9C%E4%BF%82%2Fenumerable%20%E6%AA%A2%E6%9F%A5.JPG?alt=media&token=3f235090-483a-47f0-8455-4cd06bbadc28\" alt=\"enumerable 比對\"></p><h2 id=\"列舉正確做法\"><a href=\"#列舉正確做法\" class=\"headerlink\" title=\"列舉正確做法\"></a>列舉正確做法</h2><p>由上述可知，新增原型屬性若是沒有做好特徵定義，當依照建構式新增物件後使用迴圈時，就會有問題產生。<br>有兩種方法可以避免問題產生:</p><ul><li>重新設定原型特徵(不推薦)</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'人類'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Cloud.a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Cloud) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">  <span class=\"comment\">/* a */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>迴圈判定(推薦)</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">Person.prototype.name = <span class=\"string\">'人類'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Cloud = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Cloud.a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> Cloud) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (Cloud.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">    <span class=\"comment\">/* a */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (47) - 物件屬性延伸 - 物件屬性不可寫入？物件擴充的修改與調整","url":"/javascript/20210128/3280985594/","content":"<h2 id=\"延伸物件的方法\"><a href=\"#延伸物件的方法\" class=\"headerlink\" title=\"延伸物件的方法\"></a>延伸物件的方法</h2><ul><li><code>preventExtensions</code>: 防止擴充</li><li><code>seal</code>: 封裝</li><li><code>Freeze</code>: 凍結</li></ul><h2 id=\"防止擴充-preventExtensions\"><a href=\"#防止擴充-preventExtensions\" class=\"headerlink\" title=\"防止擴充 preventExtensions\"></a>防止擴充 preventExtensions</h2><p><code>Object.preventExtensions(obj)</code><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"noopener\">MDN Object.preventExtensions</a><br>範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">2</span>,</span><br><span class=\"line\">  c: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.preventExtensions(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'是否可被擴充 =&gt;'</span>, <span class=\"built_in\">Object</span>.isExtensible(person)); <span class=\"comment\">/* 是否可被擴充 =&gt; false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 的屬性特徵 =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; value: 1, writable: true, enumerable: true, configurable: true &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 調整屬性 =&gt; 可行 */</span></span><br><span class=\"line\">person.a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 新增屬性 =&gt; 不可行 */</span></span><br><span class=\"line\">person.d = <span class=\"string\">'d'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 巢狀屬性調整 =&gt; 可行 */</span></span><br><span class=\"line\">person.c.a = <span class=\"string\">'ca'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 刪除 =&gt; 可行 */</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.b;</span><br><span class=\"line\"><span class=\"comment\">/* 調整特徵 =&gt; 可行 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person 物件 =&gt;'</span>, person); <span class=\"comment\">/* &#123;a: \"a\", c: &#123;a: \"ca\"&#125;&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 屬性特徵(修改後) =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123;value: \"a\", writable: true, enumerable: true, configurable: false&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"防止封裝-seal\"><a href=\"#防止封裝-seal\" class=\"headerlink\" title=\"防止封裝 seal\"></a>防止封裝 seal</h2><p>讓物件<code>屬性無法新增刪除</code>、也<code>無法重新配置</code>，但是可以<code>調整目前屬性的值</code><br>預設物件會被加上 <code>preventExtensions</code><br><code>Object.seal(obj)</code><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\">MDN Object.seal</a><br>範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">2</span>,</span><br><span class=\"line\">  c: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.seal(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'是否被封裝 =&gt;'</span>, <span class=\"built_in\">Object</span>.isSealed(person)); <span class=\"comment\">/* 是否被封裝 =&gt; true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 的屬性特徵 =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; value: 1, writable: true, enumerable: true, configurable: false &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 調整屬性 =&gt; 可行 */</span></span><br><span class=\"line\">person.a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 新增屬性 =&gt; 不可行 */</span></span><br><span class=\"line\">person.d = <span class=\"string\">'d'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 巢狀屬性調整 =&gt; 可行 */</span></span><br><span class=\"line\">person.c.a = <span class=\"string\">'ca'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 刪除 =&gt; 不可行 */</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.b;</span><br><span class=\"line\"><span class=\"comment\">/* 調整特徵 =&gt; 不可行 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person 物件 =&gt;'</span>, person); <span class=\"comment\">/* &#123;a: \"a\", b: 2, c: &#123;a: \"ca\"&#125;&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 屬性特徵(修改後) =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123;value: \"a\", writable: true, enumerable: true, configurable: false&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"防止凍結-Freeze\"><a href=\"#防止凍結-Freeze\" class=\"headerlink\" title=\"防止凍結 Freeze\"></a>防止凍結 Freeze</h2><p>物件會加上 <code>seal</code>，並且<code>無法調整值</code><br><code>Object.freeze(obj)</code><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">MDN Object.freeze</a><br>範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">2</span>,</span><br><span class=\"line\">  c: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.freeze(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'是否被凍結 =&gt;'</span>, <span class=\"built_in\">Object</span>.isFrozen(person)); <span class=\"comment\">/* 是否被凍結=&gt; true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 的屬性特徵 =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; value: 1, writable: true, enumerable: true, configurable: false &#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 調整屬性 =&gt; 不可行 */</span></span><br><span class=\"line\">person.a = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 新增屬性 =&gt; 不可行 */</span></span><br><span class=\"line\">person.d = <span class=\"string\">'d'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 巢狀屬性調整 =&gt; 可行 */</span></span><br><span class=\"line\">person.c.a = <span class=\"string\">'ca'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 刪除 =&gt; 不可行 */</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.b;</span><br><span class=\"line\"><span class=\"comment\">/* 調整特徵 =&gt; 不可行 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person 物件 =&gt;'</span>, person); <span class=\"comment\">/* &#123;a: \"a\", b: 2, c: &#123;a: \"ca\"&#125;&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'person a 屬性特徵(修改後) =&gt;'</span>, <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(person, <span class=\"string\">'a'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123;value: \"a\", writable: true, enumerable: true, configurable: false&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 圖片放大鏡效果","url":"/javascript/20200517/756442948/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在網頁上逛購物平台時，會遇到這樣一種網頁特效：當滑鼠移到一張商品縮圖上時，旁邊就會顯示該商品局部放大的圖片。這就是所謂的放大鏡特效。本次會介紹如何使用<code>原生 JavaScript</code> 以及其他函式庫完成此效果。</p><h2 id=\"設計想法\"><a href=\"#設計想法\" class=\"headerlink\" title=\"設計想法\"></a>設計想法</h2><ol><li>當滑鼠移動到圖片區塊時，會觸發放大鏡效果。</li><li>放大區塊使用背景圖片，並且利用滑鼠移動到原來圖片的位置來定位放大的部分。</li><li>將放大區塊寫入 CSS 背景設定</li></ol><h2 id=\"原生-JavaScript-方式\"><a href=\"#原生-JavaScript-方式\" class=\"headerlink\" title=\"原生 JavaScript 方式\"></a>原生 JavaScript 方式</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'loupe'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'wrap'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">'./test_image.jpg'</span> <span class=\"attr\">class</span>=<span class=\"string\">'image'</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'./all.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: crosshair;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.loupe</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">999</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#636363</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vh = $(<span class=\"built_in\">window</span>).height(); <span class=\"comment\">/* 獲取視窗高度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> vw = $(<span class=\"built_in\">window</span>).width();  <span class=\"comment\">/* 獲取視窗寬度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> imgh = $(<span class=\"string\">'.wrap img'</span>).height(); <span class=\"comment\">/* 獲取圖片高度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> imgw = $(<span class=\"string\">'.wrap img'</span>).width();  <span class=\"comment\">/* 獲取圖片寬度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> beginX = $(<span class=\"string\">'.wrap img'</span>).offset().left; <span class=\"comment\">/* 取得圖片最左邊的 x 值 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> endX = beginX + imgw; <span class=\"comment\">/* 取得圖片最右邊的 x 值 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> beginY = $(<span class=\"string\">'.wrap img'</span>).offset().top; <span class=\"comment\">/* 取得圖片最上方的 y 值 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> endY = beginY + imgh; <span class=\"comment\">/* 取得圖片最下邊的 y 值 */</span></span><br><span class=\"line\">  <span class=\"comment\">//滑鼠經過</span></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'mousemove'</span>, loupe, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loupe</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x, y;</span><br><span class=\"line\">    x = e.clientX;</span><br><span class=\"line\">    y = e.clientY;</span><br><span class=\"line\">    <span class=\"comment\">/* 判斷滑鼠或觸控點在圖片區域，是則顯示放大鏡div層 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; beginX &amp;&amp; x &lt; endX &amp;&amp; y &gt; beginY &amp;&amp; y &lt; endY) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用 100 減去這個值，目的是將圖片懸浮的地方定位於圓形區域的中心。 */</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> mx = <span class=\"number\">100</span> - (x - beginX) / imgw * <span class=\"number\">1440</span>; <span class=\"comment\">/* 1440為原圖片寬度 */</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> my = <span class=\"number\">100</span> - (y - beginY) / imgh * <span class=\"number\">1020</span>; <span class=\"comment\">/* 1020為原圖片高度 */</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> bg = <span class=\"string\">'url(./test_image.jpg) '</span> + mx + <span class=\"string\">'px '</span> + my + <span class=\"string\">'px no-repeat #fff'</span></span><br><span class=\"line\">      $(<span class=\"string\">'.loupe'</span>).css(<span class=\"string\">'left'</span>, x - <span class=\"number\">100</span> + <span class=\"string\">'px'</span>).css(<span class=\"string\">'top'</span>, y - <span class=\"number\">100</span> + <span class=\"string\">'px'</span>).css(<span class=\"string\">'background'</span>, bg) <span class=\"comment\">/* 設定圓形區域中心及背景 */</span></span><br><span class=\"line\">      $(<span class=\"string\">'.loupe'</span>).css(<span class=\"string\">'visibility'</span>, <span class=\"string\">'visible'</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $(<span class=\"string\">'.loupe'</span>).css(<span class=\"string\">'visibility'</span>, <span class=\"string\">'hidden'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>基本概念就是利用圖片的寬高、所在的區域、滑鼠移動的位置，三者搭配並且設定放大鏡背景圖片即可達成此效果。</p><h2 id=\"Blowup-js-方法\"><a href=\"#Blowup-js-方法\" class=\"headerlink\" title=\"Blowup.js 方法\"></a>Blowup.js 方法</h2><p><a href=\"https://github.com/paulkr/blowup.js\" target=\"_blank\" rel=\"noopener\">blowup.js</a><br>它是一個 <code>jQuery</code> 的插件，只需要一行代碼就可以生成超炫的放大鏡效果， 同樣擁有很多不同的特性和選項。<br>本身採用 <code>npm</code> 下載函式庫，沒有 <code>CDN</code> 可以使用</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install blowup -S</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./test_image.jpg\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blowup_image\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./test_image.jpg\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blowup_image\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./test_image.jpg\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blowup_image\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>將需要使用放大鏡的圖片添加 <code>class</code>，並在 JS 加入以下代碼，即可擁有放大鏡效果囉!</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">'.blowup_image'</span>).blowup(&#123;</span><br><span class=\"line\">    background: <span class=\"string\">'#FCEBB6'</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>Blowup.js 的原始碼也不算太難，有興趣的可以讀以下原始碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * blowup.js</span></span><br><span class=\"line\"><span class=\"comment\"> * Paul Krishnamurthy 2016</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * https://paulkr.com</span></span><br><span class=\"line\"><span class=\"comment\"> * paul<span class=\"doctag\">@paulkr</span>.com</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">  $.fn.blowup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attributes</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $element = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log($element.is(<span class=\"string\">\"img\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If the target element is not an image</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!$element.is(<span class=\"string\">\"img\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"%c Blowup.js Error: \"</span> + <span class=\"string\">\"%cTarget element is not an image.\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background: #FCEBB6; color: #F07818; font-size: 17px; font-weight: bold;\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background: #FCEBB6; color: #F07818; font-size: 17px;\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Constants</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $IMAGE_URL = $element.attr(<span class=\"string\">\"src\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> NATIVE_IMG = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">    NATIVE_IMG.src = $element.attr(<span class=\"string\">\"src\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Default attributes</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> defaults = &#123;</span><br><span class=\"line\">      round: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      width: <span class=\"number\">200</span>,</span><br><span class=\"line\">      height: <span class=\"number\">200</span>,</span><br><span class=\"line\">      background: <span class=\"string\">\"#FFF\"</span>,</span><br><span class=\"line\">      shadow: <span class=\"string\">\"0 8px 17px 0 rgba(0, 0, 0, 0.2)\"</span>,</span><br><span class=\"line\">      border: <span class=\"string\">\"6px solid #FFF\"</span>,</span><br><span class=\"line\">      cursor: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      zIndex: <span class=\"number\">999999</span>,</span><br><span class=\"line\">      scale: <span class=\"number\">1</span>,</span><br><span class=\"line\">      customClasses: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update defaults with custom attributes</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> $options = $.extend(defaults, attributes);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Modify target image</span></span><br><span class=\"line\">    $element.on(<span class=\"string\">'dragstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123; e.preventDefault(); &#125;);</span><br><span class=\"line\">    $element.css(<span class=\"string\">\"cursor\"</span>, $options.cursor ? <span class=\"string\">\"crosshair\"</span> : <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create magnification lens element</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lens = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\">    lens.id = <span class=\"string\">\"BlowupLens\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Attack the element to the body</span></span><br><span class=\"line\">    $(<span class=\"string\">\"body\"</span>).append(lens);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Updates styles</span></span><br><span class=\"line\">    $blowupLens = $(<span class=\"string\">\"#BlowupLens\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $blowupLens.css(&#123;</span><br><span class=\"line\">      <span class=\"string\">\"position\"</span>: <span class=\"string\">\"absolute\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"display\"</span>: <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"pointer-events\"</span>: <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"zIndex\"</span>: $options.zIndex,</span><br><span class=\"line\">      <span class=\"string\">\"width\"</span>: $options.width,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: $options.height,</span><br><span class=\"line\">      <span class=\"string\">\"border\"</span>: $options.border,</span><br><span class=\"line\">      <span class=\"string\">\"background\"</span>: $options.background,</span><br><span class=\"line\">      <span class=\"string\">\"border-radius\"</span>: $options.round ? <span class=\"string\">\"50%\"</span> : <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"box-shadow\"</span>: $options.shadow,</span><br><span class=\"line\">      <span class=\"string\">\"background-repeat\"</span>: <span class=\"string\">\"no-repeat\"</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add custom CSS classes</span></span><br><span class=\"line\">    $blowupLens.addClass($options.customClasses);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Show magnification lens</span></span><br><span class=\"line\">    $element.mouseenter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $blowupLens.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"block\"</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Mouse motion on image</span></span><br><span class=\"line\">    $element.mousemove(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Lens position coordinates</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> lensX = e.pageX - $options.width / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> lensY = e.pageY - $options.height / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Relative coordinates of image</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> relX = e.pageX - $(<span class=\"keyword\">this</span>).offset().left;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> relY = e.pageY - $(<span class=\"keyword\">this</span>).offset().top;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Zoomed image coordinates </span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> zoomX = -<span class=\"built_in\">Math</span>.floor(relX / $element.width() * (NATIVE_IMG.width * $options.scale) - $options.width / <span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> zoomY = -<span class=\"built_in\">Math</span>.floor(relY / $element.height() * (NATIVE_IMG.height * $options.scale) - $options.height / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> backPos = zoomX + <span class=\"string\">\"px \"</span> + zoomY + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> backgroundSize = NATIVE_IMG.width * $options.scale + <span class=\"string\">\"px\"</span> + NATIVE_IMG.height * $options.scale + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Apply styles to lens</span></span><br><span class=\"line\">      $blowupLens.css(&#123;</span><br><span class=\"line\">        left: lensX,</span><br><span class=\"line\">        top: lensY,</span><br><span class=\"line\">        <span class=\"string\">\"background-image\"</span>: <span class=\"string\">\"url(\"</span> + NATIVE_IMG.src + <span class=\"string\">\")\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"background-size\"</span>: backgroundSize,</span><br><span class=\"line\">        <span class=\"string\">\"background-position\"</span>: backPos</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hide magnification lens</span></span><br><span class=\"line\">    $element.mouseleave(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      $blowupLens.css(<span class=\"string\">\"display\"</span>, <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><h2 id=\"其他函式庫\"><a href=\"#其他函式庫\" class=\"headerlink\" title=\"其他函式庫\"></a>其他函式庫</h2><ul><li><code>Magify JS</code>: 似乎需要有小圖跟放大圖才能使用。</li><li><code>jQuery Zoom</code>: 放大的效果有點像視窗滾動 + 大圖。</li><li><code>Leroy Zoom</code>: 一個只有 4k 的插件，能夠讓你放大任何網頁部分，包括圖片。</li><li><code>Magnifier.js</code>: 支持滑鼠滾輪放大縮小功能，還挺特別的。</li><li><code>Zoomple</code>: 支援多種放大樣式以及呈現的方式</li></ul>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript 核心 (44) - 繼承與原型鍊 - 使用 Object.create 建立多層繼承","url":"/javascript/20210125/2757333667/","content":"<h2 id=\"多層繼承\"><a href=\"#多層繼承\" class=\"headerlink\" title=\"多層繼承\"></a>多層繼承</h2><p>先前介紹都類似 <code>Object &gt; Dog &gt; 實體</code> 這樣的繼承鍊。<br>若想在 <code>Dog</code> 前面在多加一層原型變成 <code>Object &gt; Animal &gt; Dog &gt; 實體</code> 呢?<br>這時就要用到 <code>Object.create()</code><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\">MDN Object.create()</a><br><code>Object.create(proto[, propertiesObject])</code></p><ul><li>proto: 指定新物件的原型 (prototype) 物件。</li><li>propertiesObject: 選用，為一物件(細節參考文檔)。</li></ul><p>範例說明:</p><ol><li>在 Animal 上新增原型方法<code>move()</code></li><li><code>Dog()</code> 繼承 Animal的原型 <code>prototype</code>，並新增 <code>bark()</code> 原型方法</li></ol><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">family</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.kingdom = <span class=\"string\">'動物界'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.family = family || <span class=\"string\">'人界'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'this'</span>, <span class=\"keyword\">this</span>); <span class=\"comment\">/* 指向 Dog Cat 物件 */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'移動'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 目前只有繼承動物界原型，還需要繼承 動物界 建構函式 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 繼承動物界建構函式 start */</span></span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, <span class=\"string\">'犬科'</span>); <span class=\"comment\">/* 此時的 this 可以看成是 Dog 的一個空物件 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 繼承動物界建構函式 end */</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'白色'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size || <span class=\"string\">'小'</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* 沒有 return 物件的話，會默認 return this */</span></span><br><span class=\"line\">  <span class=\"comment\">// return this;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\"><span class=\"comment\">/* 補回原本 Dog 的建構函式 */</span></span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br><span class=\"line\">Dog.prototype.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吠叫'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Bibi = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'比比'</span>, <span class=\"string\">'棕色'</span>, <span class=\"string\">'小'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi);<span class=\"comment\">/* Dog &#123;kingdom: \"動物界\", family: \"犬科\", name: \"比比\", color: \"棕色\", size: \"小\"&#125; */</span></span><br><span class=\"line\">Bibi.bark(); <span class=\"comment\">/* 比比吠叫 */</span></span><br><span class=\"line\">Bibi.move(); <span class=\"comment\">/* 比比移動 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, <span class=\"string\">'貓科'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'白色'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size || <span class=\"string\">'小'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Cat.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\">Cat.prototype.constructor = Cat;</span><br><span class=\"line\">Cat.prototype.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'喵喵叫'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Kity = <span class=\"keyword\">new</span> Cat(<span class=\"string\">'凱蒂'</span>, <span class=\"string\">''</span>, <span class=\"string\">'大'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Kity); <span class=\"comment\">/* Cat &#123;kingdom: \"動物界\", family: \"貓科\", name: \"凱蒂\", color: \"白色\", size: \"小\"&#125; */</span></span><br><span class=\"line\">Kity.meow(); <span class=\"comment\">/* 凱蒂喵喵叫 */</span></span><br><span class=\"line\">Kity.move(); <span class=\"comment\">/* 凱蒂移動 */</span></span><br><span class=\"line\">Kity.bark(); <span class=\"comment\">/* Kity.bark is not a function */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (46) - 物件屬性延伸 - 屬性特徵是什麼?","url":"/javascript/20210128/616745406/","content":"<h2 id=\"屬性的參數\"><a href=\"#屬性的參數\" class=\"headerlink\" title=\"屬性的參數\"></a>屬性的參數</h2><p>我們可以透過 <code>Object.defineProperty()</code> 來個別設定屬性的特徵，以下是四點是屬性的特徵，都是可以調整設定的:</p><ul><li><code>value</code>: 值</li><li><code>writable</code>: 可否寫入</li><li><code>configurable</code>: 可否被刪除</li><li><code>enumerable</code>: 可否列舉，使用 <code>for in</code> 時會列舉的</li></ul><p>示範如何使用:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">2</span>,</span><br><span class=\"line\">  c: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">/* &#123;a: 1, b: 2, c: 3&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 改變值 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">4</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);  <span class=\"comment\">/* &#123;a: 4, b: 2, c: 3&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可否寫入 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'a'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">4</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">person.a = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);  <span class=\"comment\">/* &#123;a: 4, b: 2, c: 3&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可否刪除 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'b'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.a;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> person.b;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);   <span class=\"comment\">/* &#123;b: 2, c: 3&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 可否列舉 */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">  enumerable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'列舉 =&gt;'</span>, key); <span class=\"comment\">/* 列舉 =&gt; b */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"淺層保護\"><a href=\"#淺層保護\" class=\"headerlink\" title=\"淺層保護\"></a>淺層保護</h2><p>屬性特徵只針對<code>指定的該屬性有效</code>，不會連帶影響內部的屬性特徵</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: <span class=\"number\">2</span>,</span><br><span class=\"line\">  c: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">'d'</span>, &#123;</span><br><span class=\"line\">  value: &#123;&#125;,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">person.d.name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">/* &#123;a: 1, b: 2, c: 3, d: &#123; name: \"Cloud\" &#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"多屬性一次設定\"><a href=\"#多屬性一次設定\" class=\"headerlink\" title=\"多屬性一次設定\"></a>多屬性一次設定</h2><p>使用 <code>Object.defineProperties()</code>，可以直接將物件內多個屬性進行修改</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">/* &#123;&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(person,&#123;</span><br><span class=\"line\">  a: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  b: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">2</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  c: &#123;</span><br><span class=\"line\">    value: <span class=\"number\">3</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">/* &#123;a: 1, b: 2, c: 3&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (20) - 物件 - 物件取值、新增、刪除","url":"/javascript/20201225/2096817927/","content":"<h2 id=\"取值\"><a href=\"#取值\" class=\"headerlink\" title=\"取值\"></a>取值</h2><p>取值方式有兩種:</p><ul><li>點運算子: 直接找尋物件底下屬性</li><li>中括號: 中括號內使用字串找尋物件屬性，此外也可以使用傳參數的方式<br>上範例:</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  num: <span class=\"number\">1</span>,</span><br><span class=\"line\">  family: &#123;</span><br><span class=\"line\">    mon: <span class=\"string\">'漂亮阿姨'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  objFn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'漂亮阿姨回家囉'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 點運算子 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.myName); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">obj.objFn(); <span class=\"comment\">/* 漂亮阿姨回家囉 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 中括號 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">'myName'</span>;</span><br><span class=\"line\">obj[person]; <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">obj[<span class=\"string\">'objFn'</span>](); <span class=\"comment\">/* 漂亮阿姨回家囉 */</span></span><br></pre></td></tr></table></figure><p>另一個重要觀念是<code>物件屬性一律都會被轉換成字串</code>，即使用數字也是會被轉換的。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'123'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 錯誤 */</span></span><br><span class=\"line\">obj<span class=\"number\">.1</span>; <span class=\"comment\">/* Uncaught SyntaxError: Unexpected number */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 正確 */</span></span><br><span class=\"line\">obj[<span class=\"string\">'1'</span>]; <span class=\"comment\">/* '123' */</span></span><br><span class=\"line\">obj[<span class=\"number\">1</span>]; <span class=\"comment\">/* '123' */</span></span><br></pre></td></tr></table></figure><h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><p>直接用點運算子或是中括號建立屬性，並賦予值即可新增</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">obj[<span class=\"string\">'test2'</span>] = <span class=\"string\">'test2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">/* &#123;myName: 'Cloud', test: 'test', test2: 'test2'&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"刪除\"><a href=\"#刪除\" class=\"headerlink\" title=\"刪除\"></a>刪除</h2><p>使用 <code>delete</code> 的方法刪除物件屬性</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.test = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">obj[<span class=\"string\">'test2'</span>] = <span class=\"string\">'test2'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">/* &#123;myName: 'Cloud', test: 'test', test2: 'test2'&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj.test</span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj[<span class=\"string\">'test2'</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">/* &#123; myName: 'Cloud' &#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200718/1499259613/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(22)-物件-物件取值、新增、刪除</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (24) - 物件 - 物件的參考特性","url":"/javascript/20201228/3340933473/","content":"<h2 id=\"純值傳值-Call-by-value\"><a href=\"#純值傳值-Call-by-value\" class=\"headerlink\" title=\"純值傳值 Call by value\"></a>純值傳值 Call by value</h2><p>純值就是 JavaScript 的7個原始型別，以下用 <code>String</code> 當賦值:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">/* Cloud, Cloud */</span></span><br><span class=\"line\">b = <span class=\"string\">'Test'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b); <span class=\"comment\">/* Cloud, Test */</span></span><br></pre></td></tr></table></figure><p>由此可知，<code>a、b兩者互不相干</code>。</p><h2 id=\"物件傳參考-Call-by-sharing\"><a href=\"#物件傳參考-Call-by-sharing\" class=\"headerlink\" title=\"物件傳參考 Call by sharing\"></a>物件傳參考 Call by sharing</h2><p>接下來用物件試試，看與上面有何差異吧。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"string\">'Test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name, b.name); <span class=\"comment\">/* Test, Test */</span></span><br></pre></td></tr></table></figure><p>結果 a、b 都為 Test，也就是說 a、b 兩者是<code>相同的</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a === b); <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><p>之所以兩者相同是因為 <code>物件傳參考</code> 特性<br>那什麼是<code>參考</code>?<br>可以理解成是宣告物件時(a)建立記憶體空間，而此變數是<code>指向記憶體空間</code>，而不是<code>值</code>。<br>而後新變數(b)又用 a 當變數宣告，此時指向的依舊是物件。<br>用以下圖片更好理解:<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(23)%20-%20%E7%89%A9%E4%BB%B6%20-%20%E7%89%A9%E4%BB%B6%E7%9A%84%E5%8F%83%E8%80%83%E7%89%B9%E6%80%A7%2F%E7%89%A9%E4%BB%B6%E5%82%B3%E5%8F%83%E8%80%83.png?alt=media&token=54cb7e93-14b2-4d6c-ae38-3e260e21fb04\" alt=\"物件傳參考\"></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200808/2652400322/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(26)-物件-物件的參考特性</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (49) - 物件屬性延伸 - Getter 與 Setter，賦值運算不使用函式","url":"/javascript/20210201/3056751174/","content":"<h2 id=\"物件賦值\"><a href=\"#物件賦值\" class=\"headerlink\" title=\"物件賦值\"></a>物件賦值</h2><p>一開始學的物件賦值都是使用直接賦值的方式，然而物件有提供 <code>取值</code>、<code>賦值</code> 的功能，可以做出類似物件內函式的操作呦</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = &#123;</span><br><span class=\"line\">  total: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">wallet.total = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet.total);</span><br></pre></td></tr></table></figure><h2 id=\"get、set\"><a href=\"#get、set\" class=\"headerlink\" title=\"get、set\"></a>get、set</h2><p>設定物件 <code>get</code>、<code>set</code> 有兩種方法</p><ul><li>物件內定義</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = &#123;</span><br><span class=\"line\">  total: <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> save(price) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.total = <span class=\"keyword\">this</span>.total + price;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> save() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.total / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet.save); <span class=\"comment\">/* 50 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用 = 號賦值 */</span></span><br><span class=\"line\">wallet.save = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet.save); <span class=\"comment\">/* 400 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(wallet, <span class=\"string\">'save'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; enumerable: true, configurable: true, get: ƒ, set: ƒ &#125; */</span></span><br></pre></td></tr></table></figure><p>此時的 <code>save</code> 是可以被列舉、可被刪除的設定<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(49)%20-%20%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%BB%B6%E4%BC%B8%20-%20Getter%20%E8%88%87%20Setter%EF%BC%8C%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%87%BD%E5%BC%8F%2F%E6%93%B7%E5%8F%961.JPG?alt=media&token=210f423b-c0fd-42c4-a06a-5b0f9eb68be1\" alt=\"屬性特徵\"></p><ul><li>definedProperty 法</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = &#123;</span><br><span class=\"line\">  total: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(wallet, <span class=\"string\">'save'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(price) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.total = <span class=\"keyword\">this</span>.total + price;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.total / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用 = 號賦值 */</span></span><br><span class=\"line\">wallet.save = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet.save); <span class=\"comment\">/* 400 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(wallet, <span class=\"string\">'save'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; enumerable: false, configurable: false, get: ƒ, set: ƒ &#125; */</span></span><br></pre></td></tr></table></figure><p>由於此方法會讓 <code>save</code> 視為原型屬性，所以是不可列舉的、不可被刪除的設定，除非有再額外調整特徵。<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(49)%20-%20%E7%89%A9%E4%BB%B6%E5%B1%AC%E6%80%A7%E5%BB%B6%E4%BC%B8%20-%20Getter%20%E8%88%87%20Setter%EF%BC%8C%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%87%BD%E5%BC%8F%2F%E6%93%B7%E5%8F%962.JPG?alt=media&token=3d0c52d1-2718-4765-ac9b-9ec4c790caa3\" alt=\"屬性特徵\"></p><p>修正後:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = &#123;</span><br><span class=\"line\">  total: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(wallet, <span class=\"string\">'save'</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: function(price) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.total = <span class=\"keyword\">this</span>.total + price;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.total / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 使用 = 號賦值 */</span></span><br><span class=\"line\">wallet.save = <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet.save); <span class=\"comment\">/* 400 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wallet);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(wallet, <span class=\"string\">'save'</span>));</span><br><span class=\"line\"><span class=\"comment\">/* &#123; enumerable: true, configurable: true, get: ƒ, set: ƒ &#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"陣列也適用\"><a href=\"#陣列也適用\" class=\"headerlink\" title=\"陣列也適用\"></a>陣列也適用</h2><p>由於陣列也是物件的一種，所以也能使用 <code>get</code>、<code>set</code>，但只能用 <code>defineProperty</code> 設定哩</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'latest'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.latest); <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.latest); <span class=\"comment\">/* undefined */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(<span class=\"built_in\">Array</span>.prototype, <span class=\"string\">'latest'</span>, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.latest); <span class=\"comment\">/* 9 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (19) - 物件 - 物件結構","url":"/javascript/20201225/79486610/","content":"<h2 id=\"物件的宣告方式\"><a href=\"#物件的宣告方式\" class=\"headerlink\" title=\"物件的宣告方式\"></a>物件的宣告方式</h2><p>在 JavaScript 中，宣告物件的方式有兩種，一是<code>物件實字</code>，二是<code>包裹物件</code>，至於兩種以何不同?哪一種宣告方式比較好呢?以下一一介紹。</p><h2 id=\"物件實字-Object-Literals\"><a href=\"#物件實字-Object-Literals\" class=\"headerlink\" title=\"物件實字 Object Literals\"></a>物件實字 Object Literals</h2><p>以下是物件實字的宣告範例</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  property: <span class=\"string\">'value'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>物件是由 <code>屬性: 值</code> 搭配而成的，而 <code>值</code> 可以是 <code>純值</code>、<code>物件</code>甚至是 <code>函式</code> 都是可以的。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>, <span class=\"comment\">/* String */</span></span><br><span class=\"line\">  money: <span class=\"number\">10</span>,     <span class=\"comment\">/* Number */</span></span><br><span class=\"line\">  sleep: <span class=\"literal\">true</span>,   <span class=\"comment\">/* Boolean */</span></span><br><span class=\"line\">  familyObj: &#123;&#125;, <span class=\"comment\">/* Object */</span></span><br><span class=\"line\">  arr: [],       <span class=\"comment\">/* Array */</span></span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;, <span class=\"comment\">/* function */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"包裹物件\"><a href=\"#包裹物件\" class=\"headerlink\" title=\"包裹物件\"></a>包裹物件</h2><p>使用<code>建構式</code>建立物件</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">obj.name = <span class=\"string\">'Cloud'</span>;</span><br></pre></td></tr></table></figure><p>這種宣告方式除了可讀性很差以外，也會有傳值上的問題，所以開發上不要使用這種方式。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"string\">'123'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1); <span class=\"comment\">/* String &#123;\"123\"&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2); <span class=\"comment\">/* Number &#123;123&#125; */</span></span><br></pre></td></tr></table></figure><p>這兩種實際上是不一樣的哩。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200712/753837712/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(21)-物件-物件結構</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 套件 - 客製化捲軸 OverlayScrollbars","url":"/javascript/20210129/3061888294/","content":"<h2 id=\"OverlayScrollbars\"><a href=\"#OverlayScrollbars\" class=\"headerlink\" title=\"OverlayScrollbars\"></a>OverlayScrollbars</h2><p><a href=\"https://github.com/KingSora/OverlayScrollbars\" target=\"_blank\" rel=\"noopener\">OverlayScrollbars</a><br>一款純 Javascript 或依賴 jQuery 所開發的近原生捲軸套件，並且也有開發支援三大框架。</p><h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><p>本篇會使用 Vue 製作範例</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install overlayscrollbars-vue</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 加入以下內容：</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OverlayScrollbars <span class=\"keyword\">from</span> <span class=\"string\">'overlayscrollbars'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OverlayScrollbarsPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'overlayscrollbars-vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'overlayscrollbars/css/OverlayScrollbars.css'</span>;</span><br><span class=\"line\">Vue.use(OverlayScrollbarsPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\">OverlayScrollbars(<span class=\"built_in\">document</span>.body, &#123;</span><br><span class=\"line\">  nativeScrollbarsOverlaid: &#123;</span><br><span class=\"line\">    initialize: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>Template:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">overlay-scrollbars</span> <span class=\"attr\">:options</span>=<span class=\"string\">\"&#123; scrollbars: &#123; autoHide: 'scroll' &#125; &#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">overlay-scrollbars</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假設有設定高度，加上內容過多溢出，正常來說按照上面範例就會出現<code>滾動條</code>囉。<br>官方提供很多參數可以設定，有興趣的人可以在玩玩看，這邊只做最簡單的範例。</p>","categories":["JavaScript"],"tags":["JavaScript","Vue"]},{"title":"JavaScript 核心 (25) - 物件 - Call by Reference 還是 Call by Sharing","url":"/javascript/20201230/833919043/","content":"<h2 id=\"傳參照呼叫-Call-by-reference\"><a href=\"#傳參照呼叫-Call-by-reference\" class=\"headerlink\" title=\"傳參照呼叫 Call by reference\"></a>傳參照呼叫 Call by reference</h2><p><a href=\"https://zh.wikipedia.org/zh-tw/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#%E4%BC%A0%E5%BC%95%E7%94%A8%E8%B0%83%E7%94%A8%EF%BC%88-{Call_by_reference}-%EF%BC%89\" target=\"_blank\" rel=\"noopener\">傳參照呼叫</a><br>傳遞給函式的是它的實際參數的隱式參照而不是實參的拷貝。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = <span class=\"number\">100</span>;</span><br><span class=\"line\">  a.x = temp;</span><br><span class=\"line\">  a[<span class=\"string\">'y'</span>] = a.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">10</span>,</span><br><span class=\"line\">  y: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.x, obj.y); <span class=\"comment\">/* 100, 100 */</span></span><br></pre></td></tr></table></figure><h2 id=\"傳共享物件呼叫-Call-by-sharing\"><a href=\"#傳共享物件呼叫-Call-by-sharing\" class=\"headerlink\" title=\"傳共享物件呼叫 Call by sharing\"></a>傳共享物件呼叫 Call by sharing</h2><p><a href=\"https://zh.wikipedia.org/zh-tw/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5#%E4%BC%A0%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1%E8%B0%83%E7%94%A8%EF%BC%88-{Call_by_sharing}-%EF%BC%89\" target=\"_blank\" rel=\"noopener\">傳共享物件呼叫</a><br>對於呼叫者而言在被呼叫函數裡修改參數是沒有影響的。如果要達成傳參照呼叫的效果就需要傳一個共享物件，一旦被呼叫者修改了物件，呼叫者就可以看到變化（因為物件是共享的，沒有拷貝）。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  a = &#123;</span><br><span class=\"line\">    b: <span class=\"number\">100</span>,</span><br><span class=\"line\">    c: <span class=\"number\">50</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">10</span>,</span><br><span class=\"line\">  y: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj); <span class=\"comment\">/* &#123; x: 10, y: 20, &#125; */</span></span><br></pre></td></tr></table></figure><p>由此可知兩點:</p><ul><li>對傳入的參數進行<code>點運算、中括號</code>賦值等操作會是 <code>Call by reference</code></li><li>對傳入的參數進行<code>物件實字宣告</code>賦值等操作會是 <code>Call by sharing</code></li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200904/1772972600/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(29)-物件-Call by Reference 還是 Call by Sharing</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (22) - 物件 - 物件與純值","url":"/javascript/20201228/1953779625/","content":"<h2 id=\"純值不允許新增屬性\"><a href=\"#純值不允許新增屬性\" class=\"headerlink\" title=\"純值不允許新增屬性\"></a>純值不允許新增屬性</h2><p>前面介紹到物件可以操作屬性，然而這種操作僅有物件可以達成，一般的純值型別是無法新增屬性的。<br>上範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 物件 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;&#125;;</span><br><span class=\"line\">family.name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(family, family.name); <span class=\"comment\">/* &#123;name: \"Cloud\"&#125; \"Cloud\" */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 純值 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">num.age = <span class=\"number\">26</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num, num.age); <span class=\"comment\">/* Cloud undefined */</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>num.age</code> 是 <code>undefined</code>。</p><h2 id=\"繼承原始物件型別\"><a href=\"#繼承原始物件型別\" class=\"headerlink\" title=\"繼承原始物件型別\"></a>繼承原始物件型別</h2><p>那究竟為什麼物件可以有操作屬性的方法呢?<br>是因為 <code>prototype</code> 在運作，你可以把 <code>prototype</code> 想成是 <code>該型別可以使用的功能or方法</code>。<br>好比人類只能在陸地上呼吸空氣，而不能在水中呼吸空氣一樣，會出事的。<br>此外，即使能硬是操作 <code>prototype</code>，也依舊是<code>無法讓純值有操作屬性的功能</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num); <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\">num.name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.name); <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.qq123 = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.qq123); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">num.qq123 = <span class=\"string\">'Hello'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.qq123); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><h2 id=\"建構式是物件\"><a href=\"#建構式是物件\" class=\"headerlink\" title=\"建構式是物件\"></a>建構式是物件</h2><p>使用建構式宣告純值的話，是可以有操作屬性的功能哩。<br>因為建構式本身就是物件型別，即使傳入的參數是純值也一樣</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"string\">'26'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test, <span class=\"keyword\">typeof</span>(test)); <span class=\"comment\">/* Number &#123;26&#125; \"object\" */</span></span><br><span class=\"line\">test.name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test.name); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200802/848840847/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(24)-物件-物件與純值</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"parseFloat()、parseInt()、Number() 比較","url":"/javascript/20201221/4106383168/","content":"<h2 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h2><p><a href=\"https:/*developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\" target=\"_blank\" rel=\"noopener\">MDN parseFloat</a><br>可解析一個字串，並返回一個浮點數。<br><code>parseFloat(string)</code></p><h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul><li>若字串的第一個字符無法轉換為數字，則返回 <code>NaN</code></li><li>只有字串中第一個字符會被返回</li><li>開頭、結尾的空格會被忽略</li></ul><h3 id=\"parseFloat-範例\"><a href=\"#parseFloat-範例\" class=\"headerlink\" title=\"parseFloat 範例\"></a>parseFloat 範例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'10'</span>)           <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'10.33'</span>)        <span class=\"comment\">/* 10.33 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'34 45 66'</span>)     <span class=\"comment\">/* 34 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">' 60 '</span>)         <span class=\"comment\">/* 60 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'40 years'</span>)     <span class=\"comment\">/* 40 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'He was 40'</span>)    <span class=\"comment\">/* NaN */</span></span><br><span class=\"line\"><span class=\"built_in\">parseFloat</span>(<span class=\"string\">'010'</span>)          <span class=\"comment\">/* 10 */</span></span><br></pre></td></tr></table></figure><h2 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener\">MDN parseInt</a><br>能將輸入的字串轉成整數。<br><code>parseInt(string, radix)</code></p><h3 id=\"radix\"><a href=\"#radix\" class=\"headerlink\" title=\"radix\"></a>radix</h3><p>必須，從 2 到 36，能代表該進位系統的數字。</p><ul><li>如果 string 以 ‘0x’ 開頭，parseInt() 會把 string 的其餘部分解析為十六進制的整數。</li><li>如果 string 由 0 開始，則 radix 會變成代表八進位的 8 或十進位的 10，但到底會變成 8 還是 10 則取決於各實做。ECMAScript 規定用代表十進位的 10，但也不是所有瀏覽器都支持。因此，使用 parseInt 時<code>一定</code>要指定 radix。</li><li>如果 string 以 1 ~ 9 的數字開頭，parseInt() 將把它解析為十進制的整數。</li></ul><h3 id=\"parseInt-範例\"><a href=\"#parseInt-範例\" class=\"headerlink\" title=\"parseInt 範例\"></a>parseInt 範例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>)           <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10.33'</span>)        <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'34 45 66'</span>)     <span class=\"comment\">/* 34 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">' 60 '</span>)         <span class=\"comment\">/* 60 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'40 years'</span>)     <span class=\"comment\">/* 40 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'He was 40'</span>)    <span class=\"comment\">/* NaN */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'010'</span>)          <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"number\">010</span>)            <span class=\"comment\">/* 8 開頭為 0 的 Number 型別會被當作八進制帶入 (參考補充) */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>, <span class=\"number\">10</span>)       <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'010'</span>)          <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>, <span class=\"number\">8</span>)        <span class=\"comment\">/*  8 */</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'0x10'</span>)         <span class=\"comment\">/* 16 */</span> </span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>, <span class=\"number\">16</span>)       <span class=\"comment\">/* 16 */</span></span><br></pre></td></tr></table></figure><h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a>Number()</h2><p><a href=\"https:/*developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener\">MDN parseFloat</a><br>函數把對象的值轉換為數字，如果對象的值無法轉換為數字，那麼 Number() 函數返回 NaN。<br><code>Number(value);</code></p><h3 id=\"Number-範例\"><a href=\"#Number-範例\" class=\"headerlink\" title=\"Number 範例\"></a>Number 範例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">true</span>);         <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">false</span>);        <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'999'</span>);        <span class=\"comment\">/* 999 */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'010'</span>);        <span class=\"comment\">/* 10 */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">010</span>);          <span class=\"comment\">/* 8 開頭為 0 的 Number 型別會被當作8進制帶入  */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'999 888'</span>);    <span class=\"comment\">/* NaN */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'lucky777'</span>);   <span class=\"comment\">/* NaN */</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'777lucky'</span>)    <span class=\"comment\">/* NaN */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://dylan237.github.io/js-parse-to-number.html\" target=\"_blank\" rel=\"noopener\">使用 parseFloat()、parseInt()、Number() 轉換型別</a></p>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript 核心 (15) - 運算子、型別與文法 - 優先性及相依性","url":"/javascript/20201223/2401760990/","content":"<h2 id=\"優先性-Precedence\"><a href=\"#優先性-Precedence\" class=\"headerlink\" title=\"優先性 Precedence\"></a>優先性 Precedence</h2><p>決定運算子彼此之間被語法解析的方式，優先序較高的運算子會成為優先序較低的運算元</p><h2 id=\"相依性-Associativity\"><a href=\"#相依性-Associativity\" class=\"headerlink\" title=\"相依性 Associativity\"></a>相依性 Associativity</h2><p>決定運算方向</p><p>用以下範例解釋比較清楚</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span> + <span class=\"number\">2</span> * <span class=\"number\">2</span> / <span class=\"number\">2</span>; <span class=\"comment\">/* return 2 */</span></span><br></pre></td></tr></table></figure><p>由於 <code>*</code>、<code>/</code> 的優先序高於 <code>+</code>、<code>=</code> 所以會<code>先乘除後加減</code>的賦值過程。<br>相同的優先性會以相依性決定運算方向，所以 <code>*</code> <code>/</code> 都是 <code>從左至右</code>。<br>詳細的運算子可參考 MDN 說明<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" target=\"_blank\" rel=\"noopener\">MDN 運算子優先序</a></p><p>相依性常見考題</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 範例一 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 解析過程 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span>);     <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> &lt; <span class=\"number\">3</span>);  <span class=\"comment\">/* true 會受到型別轉換，true = 1， 所以其實是 1 &lt; 3 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> &lt; <span class=\"number\">2</span> &lt; <span class=\"number\">3</span>); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 範例二 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 解析過程 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">2</span>);     <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">true</span> &gt; <span class=\"number\">1</span>);  <span class=\"comment\">/* true 會受到型別轉換，true = 1， 所以其實是 1 &gt; 1 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">3</span> &gt; <span class=\"number\">2</span> &gt; <span class=\"number\">1</span>); <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><p>由上述範例可知，運算過程是一次執行一個運算子<code>並回傳</code>，在接著跟下一個運算元運算，才決定其值。</p><p>下面這個範例將更清楚瞭解運算過程</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(a, <span class=\"string\">'b'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">0</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b, <span class=\"string\">'b'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">99</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(b, <span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">  value: <span class=\"number\">123</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = b.c = b.b = a.b = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.c);  <span class=\"comment\">/* return 123 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.b);  <span class=\"comment\">/* return 99 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.b);  <span class=\"comment\">/* return 0 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);    <span class=\"comment\">/* return 10 */</span></span><br></pre></td></tr></table></figure><p>因為 <code>a.b = 10</code> 的回傳值是 <code>10</code>，但因為 <code>a.b</code>是不可寫入的所以不會改變其值。<br>同理可知 <code>c = b.c = b.b = a.b = 10</code> 等於 <code>c = 10</code>。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200628/713590185/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(16)-運算子、型別與文法-優先性及相依性</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (14) - 運算子、型別與文法 - 運算子","url":"/javascript/20201223/1000884306/","content":"<h2 id=\"運算子\"><a href=\"#運算子\" class=\"headerlink\" title=\"運算子\"></a>運算子</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\" target=\"_blank\" rel=\"noopener\">MDN 運算式與運算子</a><br>是 JavaScript 提供的函式，基本上運算子都屬於表達式，必定回傳一個值。<br>運算子的左右兩側稱為 <code>運算元</code>，依照運算子的數量，可分為 <code>一元</code>、<code>二元</code>、<code>三元</code>運算子。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">1</span> <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><p>運算子類型:</p><ul><li>賦值運算子</li><li>比較運算子</li><li>算數運算子</li><li>位元運算子</li><li>邏輯運算子</li><li>字串運算子</li><li>條件(三元)運算子</li><li>逗點運算子</li><li>一元運算子</li><li>關係運算子</li></ul><h2 id=\"特殊寫法\"><a href=\"#特殊寫法\" class=\"headerlink\" title=\"特殊寫法\"></a>特殊寫法</h2><p>由於運算子本身是一個函式，所以我們可以將運算子視為一個函式名稱，就有下面這種寫法:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = +(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">/* return 2 */</span></span><br></pre></td></tr></table></figure><p>大概就類似下方的函式宣告</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> +(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>實際開發時請不要使用這種寫法，除非預計明天就要離開公司了。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200628/192115648/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(15)-運算子、型別與文法-運算子</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (31) - 函式以及 This 的運作 - 參數","url":"/javascript/20210106/1031579702/","content":"<h2 id=\"參數\"><a href=\"#參數\" class=\"headerlink\" title=\"參數\"></a>參數</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Glossary/Parameter\" target=\"_blank\" rel=\"noopener\">MDN 參數</a><br>參數 (parameter) 是個會傳進函式 (function) 的已命名變量，用來把引數 ((arguments)) 導入到函式中。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> globalName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, bb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> localName = <span class=\"string\">'CloudSu'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, localName, globalName, bb, <span class=\"built_in\">arguments</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.fn(globalName); <span class=\"comment\">/* Cloud CloudSu Cloud undefined */</span></span><br></pre></td></tr></table></figure><p>此時的參數就是 <code>globalName</code>，，然後 function 的 <code>name</code> 來接收。<br>參數會依序載入，上述範例中有三個參數，但卻只有一個 <code>name</code> 參數接收者，所以也只有第一個參數 <code>globalName</code> 會被 <code>name</code> 接收到。</p><h2 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"noopener\">MDN Arguments 物件</a><br>arguments 物件是一個對應傳入函式之引數的類陣列（Array-like）物件。<br>由於不是陣列，自然就無法使用陣列中許多方法跟功能，但我們可以透過多種轉換方式，將 <code>arguments</code> 轉換成 <code>array</code>。<br>以下提供四種方法:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 轉換方法 - 1 效能最好 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...arguments</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">// [1,2,3]</span></span><br><span class=\"line\"><span class=\"comment\">/* 轉換方法 - 2 效能次之 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// var arr = [].slice.call(arguments);</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">/* 轉換方法 - 3 效能最差 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure><h2 id=\"函式變數宣告\"><a href=\"#函式變數宣告\" class=\"headerlink\" title=\"函式變數宣告\"></a>函式變數宣告</h2><p>函式內的變數名稱與函式本身參數相同，不會因再次宣告而覆蓋原有內容。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(name);</span><br></pre></td></tr></table></figure><p>若是用 <code>重新賦予值</code> 的話，是會更新的，這點不難理解。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">  name = <span class=\"string\">'我是誰'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* 我是誰 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><h2 id=\"物件傳參考\"><a href=\"#物件傳參考\" class=\"headerlink\" title=\"物件傳參考\"></a>物件傳參考</h2><p>傳入的參數若是一個物件的話，傳入的參數若是一個物件的話，依樣會有傳參考特性。<br>純值的話就不影響。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  a.name = <span class=\"string\">'測試'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">/* 測試 */</span></span><br></pre></td></tr></table></figure><h2 id=\"傳函式-CallBack-Function\"><a href=\"#傳函式-CallBack-Function\" class=\"headerlink\" title=\"傳函式 CallBack Function\"></a>傳函式 CallBack Function</h2><p>參數還能是函式，想不到吧，因為函式也是一個物件喔。</p><ul><li>匿名函式寫法:</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 傳入匿名函式 */</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ray'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><ul><li>具名函式寫法:</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionB</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Ray'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionA</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 傳入具名函式 */</span></span><br><span class=\"line\">functionA(functionB);</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201129/3953962173/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(37)-函式以及 This 的運作-參數</a><br><a href=\"https://zhuanlan.zhihu.com/p/100666855\" target=\"_blank\" rel=\"noopener\">前端Tips#2 - 将 arguments 转换成Array的最佳实践</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (43) - 繼承與原型鍊 - 原始型別的包裹物件與原型的關聯","url":"/javascript/20210125/4216074588/","content":"<h2 id=\"包裹物件\"><a href=\"#包裹物件\" class=\"headerlink\" title=\"包裹物件\"></a>包裹物件</h2><p>先前有提過原始型別有各自的包裹物件，並且包裹物件有對應的 <code>prototype</code>，如此以來也就能新增包裹物件中的方法屬性哩</p><ul><li>字串範例</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">'bcde'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* String &#123;\"bcde\"&#125; */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(<span class=\"built_in\">String</span>); <span class=\"comment\">/* ƒ String() */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.prototype.lastText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.lastText()); <span class=\"comment\">/* e */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name.lastText()); <span class=\"comment\">/* d */</span></span><br></pre></td></tr></table></figure><ul><li>數值範例</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>.prototype.secondPower = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> * <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.secondPower()); <span class=\"comment\">/* 25 */</span></span><br></pre></td></tr></table></figure><ul><li>其他建構式</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date); <span class=\"comment\">/* Mon Jan 25 2021 12:07:31 GMT+0800 (台北標準時間) */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.dir(<span class=\"built_in\">Date</span>); <span class=\"comment\">/* 裡面的 prototype 有超多方法 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Date</span>.prototype.getFullDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dd = <span class=\"built_in\">String</span>(<span class=\"keyword\">this</span>.getDate());</span><br><span class=\"line\">  <span class=\"keyword\">var</span> mm = <span class=\"built_in\">String</span>(<span class=\"keyword\">this</span>.getMonth() + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> yyyy = <span class=\"keyword\">this</span>.getFullYear();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> today = <span class=\"string\">`<span class=\"subst\">$&#123;yyyy&#125;</span>/<span class=\"subst\">$&#123;mm&#125;</span>/<span class=\"subst\">$&#123;dd&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> today;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.getFullDate()); <span class=\"comment\">/* 2021/1/25 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 使用 jQuery 來產生 QR CODE","url":"/javascript/20210314/3805875564/","content":"<h2 id=\"jQuery-qrcode-介紹\"><a href=\"#jQuery-qrcode-介紹\" class=\"headerlink\" title=\"jQuery.qrcode 介紹\"></a>jQuery.qrcode 介紹</h2><p><a href=\"https://larsjung.de/jquery-qrcode/\" target=\"_blank\" rel=\"noopener\">jQuery.qrcode 官網</a><br><a href=\"https://www.npmjs.com/package/jquery.qrcode\" target=\"_blank\" rel=\"noopener\">NPM jQuery.qrcode</a></p><p>使用方式算挺簡單，幾個重要參數設定一下就能迅速產生 QR CODE</p><h2 id=\"參考範例\"><a href=\"#參考範例\" class=\"headerlink\" title=\"參考範例\"></a>參考範例</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jquery-qrcode-canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jquery-qrcode-image\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jquery-qrcode-div\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 引入 jQuery 引入 jQuery jquery.qrcode  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">'https://cdnjs.cloudflare.com/ajax/libs/jquery.qrcode/1.0/jquery.qrcode.min.js'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">/* canvas */</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\"#jquery-qrcode-canvas\"</span>).qrcode(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      render: <span class=\"string\">'canvas'</span>,</span></span><br><span class=\"line\">      size: 250,</span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://syj0905.github.io/'</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">/* image */</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\"#jquery-qrcode-image\"</span>).qrcode(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      render: <span class=\"string\">'image'</span>,</span></span><br><span class=\"line\">      size: 250,</span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://syj0905.github.io/'</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">/* div */</span></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\"#jquery-qrcode-div\"</span>).qrcode(&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      render: <span class=\"string\">'div'</span>,</span></span><br><span class=\"line\">      size: 250,</span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://syj0905.github.io/'</span></span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://mnya.tw/cc/word/1467.html\" target=\"_blank\" rel=\"noopener\">jQuery.qrcode：純前端生成 QR Code</a><br><a href=\"https://www.jqueryscript.net/blog/best-custom-qr-code-generator.html\" target=\"_blank\" rel=\"noopener\">10 Best Custom QR Code Generators In JavaScript (2021 Update)</a></p>","categories":["JavaScript"],"tags":["JavaScript","jQuery"]},{"title":"JavaScript 核心 (45) - 繼承與原型鍊 - 原型鏈、建構函式整體結構概念","url":"/javascript/20210126/579374325/","content":"<h2 id=\"範例程式碼\"><a href=\"#範例程式碼\" class=\"headerlink\" title=\"範例程式碼\"></a>範例程式碼</h2><p>我們會以下列程式碼來分別介紹 <code>__proto__</code> 、 <code>prototype</code>跟物件以及函式的關係:</p><ol><li><p>物件的 <strong>proto</strong> 是誰?</p></li><li><p>建構函式 <code>prototype</code> 與 <code>__proto__</code> 關係</p></li><li><p>Function Object 的 <code>__proto__</code> 、 <code>prototype</code> 關係</p></li></ol><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">family</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.kingdom = <span class=\"string\">'動物界'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.family = family || <span class=\"string\">'人界'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Animal.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'移動'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, <span class=\"string\">'犬科'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'白色'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size || <span class=\"string\">'小'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br><span class=\"line\">Dog.prototype.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吠叫'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Bibi = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'比比'</span>, <span class=\"string\">'棕色'</span>, <span class=\"string\">'小'</span>);</span><br><span class=\"line\">Bibi.bark();</span><br><span class=\"line\">Bibi.move();</span><br></pre></td></tr></table></figure><ul><li><p>物件的 <code>__proto__</code> 是誰?<br>Bibi <code>透過（重點) __proto__</code> 會向上找到 <code>Dog.prototype</code>，這個 <code>Dog.prototype</code>是依照 <code>constructor</code> 而建立。<br><code>Dog.prototype</code> 的 <code>constructor</code> 則會指向 <code>Dog 建構函式</code><br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(45)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E9%8F%88%E3%80%81%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F%E6%95%B4%E9%AB%94%E7%B5%90%E6%A7%8B%E6%A6%82%E5%BF%B5%2F1.JPG?alt=media&token=b67202d1-a935-4c9e-af55-94038569fbc0\" alt=\"__proto__\"></p></li><li><p>建構函式 <code>prototype</code> 與 <code>__proto__</code><br>使用 <code>Dog.prototype</code> 來產生相對應的原型，而之所以能這樣使用是因為 <code>Dog.__proto__</code> 也繼承於 <code>Function.prototype</code><br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(45)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E9%8F%88%E3%80%81%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F%E6%95%B4%E9%AB%94%E7%B5%90%E6%A7%8B%E6%A6%82%E5%BF%B5%2F2.JPG?alt=media&token=5a0210dc-2942-4d64-a04f-ff5a7f09315d\" alt=\"建構函式 prototype\"></p></li><li><p>Function Object 的 <code>__proto__</code> 、 <code>prototype</code><br><code>Function.constructor</code> 則回指向 <code>Function</code> 本身<br>而 <code>Function.__proto__</code> 又會指向 <code>Function.prototype</code><br><code>Function.prototype.__proto__</code> 又會指向 <code>Object.prototype</code><br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(45)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E9%8F%88%E3%80%81%E5%BB%BA%E6%A7%8B%E5%87%BD%E5%BC%8F%E6%95%B4%E9%AB%94%E7%B5%90%E6%A7%8B%E6%A6%82%E5%BF%B5%2F3.JPG?alt=media&token=31b81b32-cf1a-44c4-aebe-fdae281fe0fc\" alt=\"Function Object prototype\"></p></li></ul><h2 id=\"驗證\"><a href=\"#驗證\" class=\"headerlink\" title=\"驗證\"></a>驗證</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">family</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.kingdom = <span class=\"string\">'動物界'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.family = family || <span class=\"string\">'人界'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Animal.prototype.move = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'移動'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, color, size</span>) </span>&#123;</span><br><span class=\"line\">  Animal.call(<span class=\"keyword\">this</span>, <span class=\"string\">'犬科'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color || <span class=\"string\">'白色'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = size || <span class=\"string\">'小'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animal.prototype);</span><br><span class=\"line\">Dog.prototype.constructor = Dog;</span><br><span class=\"line\">Dog.prototype.bark = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'吠叫'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Bibi = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'比比'</span>, <span class=\"string\">'棕色'</span>, <span class=\"string\">'小'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.__proto__ === Dog.prototype); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.__proto__.__proto__ === Animal.prototype); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.__proto__.__proto__.constructor === Animal); <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Bibi.__proto__.__proto__.__proto__.__proto__ === <span class=\"literal\">null</span>);  <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Dog.__proto__ === <span class=\"built_in\">Function</span>.prototype);  <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Animal.__proto__ === <span class=\"built_in\">Function</span>.prototype);  <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype);  <span class=\"comment\">/* true */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype);  <span class=\"comment\">/* true */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.__proto__.__proto__ === <span class=\"built_in\">Object</span>.prototype);  <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 移除字串中的表情符號 Emoji","url":"/javascript/20210202/2024888940/","content":"<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>使用者在前台輸入 Emoji 和一般文字，但後台進資料庫或是 ERP 時是無法分辨出 Emoji 的，而會是亂碼。</p><h2 id=\"正則表達式\"><a href=\"#正則表達式\" class=\"headerlink\" title=\"正則表達式\"></a>正則表達式</h2><p>行動裝置上都有所謂的表情符號，那些有一定的規則存在，可以使用正則來把 Emoji 替換成空值。</p><h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> emoji_range = [</span><br><span class=\"line\">  <span class=\"string\">'[\\u2764\\uFE0F]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'[\\u2694-\\u2697]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'[\\u2580-\\u27BF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'[\\u2700-\\u27BF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'[\\uE000-\\uF8FF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'[\\u2011-\\u26FF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83E[\\uDD10-\\uDD5D]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83C[\\uDF00-\\uDFFF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83D[\\uDC00-\\uDFFF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83D[\\uDC00-\\uDE4F]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83D[\\uDE80-\\uDEFF]'</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\uD83E[\\uDD10-\\uDDFF]'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> input = <span class=\"string\">'輸入文本❤️🥺😂'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> output = input.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(emoji_range.join(<span class=\"string\">'|'</span>), <span class=\"string\">'g'</span>), <span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'output =&gt;'</span>, output); <span class=\"comment\">/* output =&gt; 輸入文本 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://stackoverflow.com/questions/10992921/how-to-remove-emoji-code-using-javascript\" target=\"_blank\" rel=\"noopener\">How to remove emoji code using javascript?</a></p>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript 核心 (26) - 物件 - 淺層複製及深層複製","url":"/javascript/20210104/431199247/","content":"<h2 id=\"淺層複製-Shallow-Copy\"><a href=\"#淺層複製-Shallow-Copy\" class=\"headerlink\" title=\"淺層複製 Shallow Copy\"></a>淺層複製 Shallow Copy</h2><p>複製一個或多個物件自身所有可數的屬性到另一個目標物件。回傳的值為該目標物件。<br>上面不容易理解，直接上範例比較清楚:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 問題 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"string\">'測試'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">/* 測試 */</span></span><br></pre></td></tr></table></figure><ul><li>Object.assign</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"string\">'測試 Object.assign'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.name); <span class=\"comment\">/* 測試 Object.assign */</span></span><br></pre></td></tr></table></figure><p><code>Object.assign</code> 也可改寫成 <code>ES6</code>:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; ... a &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">b.name = <span class=\"string\">'測試 Object.assign'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.name); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.name); <span class=\"comment\">/* 測試 Object.assign */</span></span><br></pre></td></tr></table></figure><p>然後淺層複製只會複製第一層物件，若是修改到內層物件屬性，仍會改變原本物件的屬性值</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; ... a &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">b.age.number = <span class=\"string\">'測試'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age.number); <span class=\"comment\">/* 測試 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.age.number); <span class=\"comment\">/* 測試 */</span></span><br></pre></td></tr></table></figure><p>這是因為內層的 <code>age</code> 仍指向原本的參考，並不會一起複製勒。</p><h2 id=\"深層複製-Deep-Copy\"><a href=\"#深層複製-Deep-Copy\" class=\"headerlink\" title=\"深層複製 Deep Copy\"></a>深層複製 Deep Copy</h2><p>只需要將物件轉換成純值，在轉換成物件即可</p><ul><li>JSON.parse() with JSON.stringify()</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a));</span><br><span class=\"line\"></span><br><span class=\"line\">b.age.number = <span class=\"string\">'測試'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.age.number); <span class=\"comment\">/* 測試 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.age.number); <span class=\"comment\">/* 26 */</span></span><br></pre></td></tr></table></figure><p>然而此方法<code>僅限用於 json 格式</code>，屬性值不能是<code>undefined</code>、<code>NaN</code>或是<code>function</code>，否則會無法轉換。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* 消失 */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'測試1'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  un: <span class=\"literal\">undefined</span>, <span class=\"comment\">/* 消失 */</span></span><br><span class=\"line\">  nan: <span class=\"literal\">NaN</span>, <span class=\"comment\">/* 變成 null */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(a)); <span class=\"comment\">/* &#123;name: \"Cloud\", age: &#123;…&#125;, nan: null&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br></pre></td></tr></table></figure><h2 id=\"深層複製完美解法\"><a href=\"#深層複製完美解法\" class=\"headerlink\" title=\"深層複製完美解法\"></a>深層複製完美解法</h2><p>一般會參考第三方工具的深層複製寫法，當然如果是高手等級，就乾脆自己寫一個插件也不是不行。</p><ul><li>Underscore — _.clone()<br>此方法只能算是半個深層複製，也就是說不會完全複製物件內的參考。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 請先引入 Underscore，否則會出錯 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  un: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  nan: <span class=\"literal\">NaN</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = _.clone(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* &#123;name: \"Cloud\", age: &#123;…&#125;, un: undefined, nan: NaN, fn: ƒ&#125; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 檢測是否為 深層複製 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">  a: <span class=\"number\">1</span>,</span><br><span class=\"line\">  b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x === y); <span class=\"comment\">/* false */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.b === y.b); <span class=\"comment\">/* true  物件內層屬性依然指向相同參考 */</span></span><br></pre></td></tr></table></figure><ul><li>jQuery — $.extend()</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 請先引入 jQuery，否則會出錯 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  un: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  nan: <span class=\"literal\">NaN</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* &#123;name: \"Cloud\", age: &#123;…&#125;, nan: NaN, fn: ƒ&#125; */</span></span><br></pre></td></tr></table></figure><p>注意，<code>undefined</code> 不會被複製到哩。</p><ul><li>lodash — <em>.clone() or</em>.cloneDeep()<br><code>_.clone(obj, true)</code> 等於 <code>_.cloneDeep(obj)</code><br>lodash 在深層複製上<code>更優於 jQuery、Underscore</code>，畢竟原始碼上就多了幾百行啊。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 請先引入 lodash，否則會出錯 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  age: &#123;</span><br><span class=\"line\">    number: <span class=\"number\">26</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  fn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'1'</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  un: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  nan: <span class=\"literal\">NaN</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = _.cloneDeep(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">/* &#123;name: \"Cloud\", age: &#123;…&#125;, un: undefined, nan: NaN, fn: ƒ&#125; */</span></span><br></pre></td></tr></table></figure><p>lodash的<code>_.cloneDeep()</code>幾乎完美複製原本的物件內容。</p><h2 id=\"效能-amp-功能比較\"><a href=\"#效能-amp-功能比較\" class=\"headerlink\" title=\"效能&amp;功能比較\"></a>效能&amp;功能比較</h2><table><thead><tr><th>特性</th><th align=\"center\">jQuery</th><th align=\"center\">lodash</th><th align=\"center\">JSON.parse</th></tr></thead><tbody><tr><td>瀏覽器兼容性</td><td align=\"center\">IE6+ (1.x) &amp; IE9+ (2.x)</td><td align=\"center\">IE6+ (Compatibility) &amp; IE9+ (Modern)</td><td align=\"center\">IE8+</td></tr><tr><td>能夠深複製內層所有屬性值</td><td align=\"center\">回傳異常 RangeError: Maximum call stack size exceeded</td><td align=\"center\">支持</td><td align=\"center\">回傳異常 TypeError: Converting circular structure to JSON</td></tr><tr><td>對 Date, RegExp 的深層複製支持</td><td align=\"center\">×</td><td align=\"center\">支持</td><td align=\"center\">×</td></tr><tr><td>對 ES6 新引入的標準對象的深層複製支持</td><td align=\"center\">×</td><td align=\"center\">支持</td><td align=\"center\">×</td></tr><tr><td>複製陣列的属性</td><td align=\"center\">×</td><td align=\"center\"><a href=\"https://github.com/lodash/lodash/blob/5166064453ed6164b76fb20f8dd340d23dd334e5/lodash._baseclone/index.js#215\" target=\"_blank\" rel=\"noopener\">僅支持RegExp#exec返回的陣列结果</a></td><td align=\"center\">×</td></tr><tr><td>是否保留非原生對象的類型</td><td align=\"center\">×</td><td align=\"center\">×</td><td align=\"center\">×</td></tr><tr><td>複製不可枚舉元素</td><td align=\"center\">×</td><td align=\"center\">×</td><td align=\"center\">×</td></tr><tr><td>複製函數</td><td align=\"center\">×</td><td align=\"center\">×</td><td align=\"center\">×</td></tr></tbody></table><table><thead><tr><th>方法</th><th align=\"center\">jQuery</th><th align=\"center\">lodash</th><th align=\"center\">JSON.parse</th></tr></thead><tbody><tr><td>平均</td><td align=\"center\">478</td><td align=\"center\">293</td><td align=\"center\">656</td></tr></tbody></table><p>倘若需要使用到深層複製的話，還是會先以 <code>loadsh</code> 為優先哩。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200905/1375484447/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(30)-物件-淺層複製及深層複製</a><br><a href=\"https://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (5) - 執行環境與作用域 - 範圍鍊","url":"/javascript/20201221/1324601033/","content":"<h2 id=\"範圍練-Scope-Chain\"><a href=\"#範圍練-Scope-Chain\" class=\"headerlink\" title=\"範圍練 Scope Chain\"></a>範圍練 Scope Chain</h2><p>當函式的本身沒有相對應的變數或函式時，他就會向外層去尋找</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>; <span class=\"comment\">/* 全域變數 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fu1</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fu2</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"number\">2</span>; <span class=\"comment\">/* 區域變數 */</span></span><br><span class=\"line\">  fu1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fu2();</span><br></pre></td></tr></table></figure><p>在此範例中 <code>fu1</code> 不會去找 <code>fu2</code> 的 <code>value</code>，而是往本身函式 <code>fu1</code> 的外層尋找 <code>value</code>。<br>所以函式的<code>範圍鍊與執行推疊、執行環境是沒有關係的</code>。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200502/1231063032/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(5)-執行環境與作用域-範圍鍊</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (10) - 運算子、型別與文法 - 陳述式與表達式","url":"/javascript/20201222/63010062/","content":"<h2 id=\"陳述式-Statement\"><a href=\"#陳述式-Statement\" class=\"headerlink\" title=\"陳述式 Statement\"></a>陳述式 Statement</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements\" target=\"_blank\" rel=\"noopener\">MDN 陳述式與宣告</a><br>用於命令執行指定的一系列操作，最大特徵是<code>不會回傳結果</code>。<br>由於不會回傳結果的關係，所以陳述式不能賦予值給變數。</p><p>舉例:</p><ul><li>if…else</li><li>var、let、const</li><li>function</li><li>for</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;&#125;               <span class=\"comment\">/* return undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fu</span>(<span class=\"params\"></span>) </span>&#123;&#125;          <span class=\"comment\">/* return undefined */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i; i&lt; <span class=\"number\">10</span>;i++) &#123;&#125;  <span class=\"comment\">/* return undefined */</span></span><br></pre></td></tr></table></figure><p>這裡回傳 <code>undefined</code> 並<code>不是回傳結果</code>，只是瀏覽器告訴我們已經準備好記憶體空間而已</p><h2 id=\"表達式-Expression\"><a href=\"#表達式-Expression\" class=\"headerlink\" title=\"表達式 Expression\"></a>表達式 Expression</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\" target=\"_blank\" rel=\"noopener\">MDN 運算式與運算子</a><br>又稱<code>表示式</code>、<code>運算式</code>，經常透過符號結合上下語句並運算及<code>回傳結果</code></p><p>JavaScript 運算式有下列幾種種類:</p><ul><li>算術: 解析出數字， 例如 3.14159. (通常使用 算術運算子.)</li><li>字串: 解析出字串， 例如 “Fred” or “234”。 (通常使用 字串運算子.)</li><li>邏輯: 解析出 True 或 False (通常與 邏輯運算子 相關。)</li><li>主流運算式: JavaScript 基本的關鍵字及運算式。</li><li>左側運算式: 左側是指定值的對象。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">aa = <span class=\"string\">'Cloud'</span>;       <span class=\"comment\">/* return \"Cloud\" */</span></span><br><span class=\"line\"><span class=\"number\">1</span>+<span class=\"number\">1</span>;                <span class=\"comment\">/* return 2 */</span></span><br><span class=\"line\">a = <span class=\"literal\">true</span>;           <span class=\"comment\">/* return true */</span></span><br><span class=\"line\">b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;  <span class=\"comment\">/* return ƒ () &#123;&#125; */</span></span><br></pre></td></tr></table></figure><h2 id=\"函式陳述式\"><a href=\"#函式陳述式\" class=\"headerlink\" title=\"函式陳述式\"></a>函式陳述式</h2><p>又稱<code>具名函式</code>，與陳述式相同，<code>不會回傳結果</code>且<code>具有 hoisting 效果</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"函式表達式\"><a href=\"#函式表達式\" class=\"headerlink\" title=\"函式表達式\"></a>函式表達式</h2><p>又稱<code>匿名函式</code>，會宣告一個變數並搭配等號運算子以及函式組合，<code>不具有 hoisting 效果</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id=\"物件實字-VS-Block\"><a href=\"#物件實字-VS-Block\" class=\"headerlink\" title=\"物件實字 VS Block\"></a>物件實字 VS Block</h2><p>Block =&gt; 陳述式<br>物件實字 =&gt; 表達式</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Block */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span>; <span class=\"comment\">/* return undefined */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 物件實字 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  a: <span class=\"string\">'Cloud'</span>,     <span class=\"comment\">/* &#123;a: \"Cloud\"&#125; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200607/196651152/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(11)-運算子、型別與文法-陳述式與表達式</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - round()、floor()、ceil() 詳細介紹","url":"/javascript/20200503/3859167508/","content":"<h2 id=\"目標對象\"><a href=\"#目標對象\" class=\"headerlink\" title=\"目標對象\"></a>目標對象</h2><p>參數型別可以是 <code>number</code>、<code>string</code> 的數字</p><h2 id=\"功能說明\"><a href=\"#功能說明\" class=\"headerlink\" title=\"功能說明\"></a>功能說明</h2><h3 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round()\"></a>round()</h3><p>如果小數位的部分值大於 0.5, 這個值將會進位. 如果小數位的部分值小於 0.5, 這個值將不會進位.<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns the value 20</span></span><br><span class=\"line\">x = <span class=\"built_in\">Math</span>.round(<span class=\"number\">20.49</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the value 21</span></span><br><span class=\"line\">x = <span class=\"built_in\">Math</span>.round(<span class=\"number\">20.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the value -20</span></span><br><span class=\"line\">x = <span class=\"built_in\">Math</span>.round(<span class=\"number\">-20.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the value -21</span></span><br><span class=\"line\">x = <span class=\"built_in\">Math</span>.round(<span class=\"number\">-20.51</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor()\"></a>floor()</h3><p>函式會回傳小於等於所給數字的最大整數。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"built_in\">Math</span>.floor( <span class=\"number\">45.95</span>); <span class=\"comment\">//  45</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor( <span class=\"number\">45.05</span>); <span class=\"comment\">//  45</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor(  <span class=\"number\">4</span>   ); <span class=\"comment\">//   4</span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor(<span class=\"number\">-45.05</span>); <span class=\"comment\">// -46 </span></span><br><span class=\"line\">  <span class=\"built_in\">Math</span>.floor(<span class=\"number\">-45.95</span>); <span class=\"comment\">// -46</span></span><br><span class=\"line\">  <span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### ceil()</span></span><br><span class=\"line\"><span class=\"string\">  函式會回傳大於等於所給數字的最小整數。</span></span><br><span class=\"line\"><span class=\"string\">  `</span><span class=\"string\">``</span> JavaScript</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">.95</span>));</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">4</span>));</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 4</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">7.004</span>));</span><br><span class=\"line\">  <span class=\"comment\">// expected output: 8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.ceil(<span class=\"number\">-7.004</span>));</span><br><span class=\"line\">  <span class=\"comment\">// expected output: -7</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/round\" target=\"_blank\" rel=\"noopener\">Math.round()</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" target=\"_blank\" rel=\"noopener\">Math.floor()</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\" target=\"_blank\" rel=\"noopener\">Math.ceil()</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript - slice()、splice()、split() 詳細介紹","url":"/javascript/20200322/4152837228/","content":"<h2 id=\"目標對象\"><a href=\"#目標對象\" class=\"headerlink\" title=\"目標對象\"></a>目標對象</h2><ul><li>slice(): <code>Array</code> 及 <code>String</code></li><li>splice(): <code>Array</code></li><li>split(): <code>String</code></li></ul><h2 id=\"功能說明\"><a href=\"#功能說明\" class=\"headerlink\" title=\"功能說明\"></a>功能說明</h2><h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice()\"></a>slice()</h3><p>複製開始與結束點（結束點不算）中的內容<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">arr.slice()</span><br><span class=\"line\">arr.slice(begin) <span class=\"comment\">/* 含 end 項 */</span></span><br><span class=\"line\">arr.slice(begin, end) <span class=\"comment\">/* 包含 begin項 但不包含 end 項 */</span></span><br></pre></td></tr></table></figure><br><code>begin</code> 為開始的索引值，若為 <code>負數</code> 則從後面算起。<br><code>end</code> 為結束的索引值，若無填寫則直接預設為最後一項。<br>以下是參考用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> game = [<span class=\"string\">'PS4'</span>, <span class=\"string\">'Xbox'</span>, <span class=\"string\">'Switch'</span>, <span class=\"string\">'N3DS'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_1 = game.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_2 = game.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_3 = game.slice(<span class=\"number\">-3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// game contains ['PS4', 'Xbox', 'Switch', 'N3DS']</span></span><br><span class=\"line\"><span class=\"comment\">// game_1 contains ['Xbox', 'Switch', 'N3DS']</span></span><br><span class=\"line\"><span class=\"comment\">// game_2 contains ['Xbox', 'Switch']</span></span><br><span class=\"line\"><span class=\"comment\">// game_3 contains ['Xbox', 'Switch', 'N3DS']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> game_string = <span class=\"string\">'PS4XboxSwitch'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_string_1 = game_string.slice(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_string_2 = game_string.slice(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> game_string_3 = game_string.slice(<span class=\"number\">-3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// game_string_1 contains S4XboxSwitch</span></span><br><span class=\"line\"><span class=\"comment\">// game_string_2 contains S</span></span><br><span class=\"line\"><span class=\"comment\">// game_string_3 contains tch</span></span><br></pre></td></tr></table></figure><p></p><h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a>splice()</h3><p>將原 <code>Array</code> 置換項目，並回傳被置換的項目。<br></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">array.splice(start)</span><br><span class=\"line\">array.splice(start, deleteCount)</span><br><span class=\"line\">array.splice(start, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure><br><code>start</code> 置換項目的位置，負數代表從後方算起。<br><code>deleteCount</code> 置換的個數，如為 0 則不會置換。<br><code>item</code> 添加的新項目。<br>以下是參考用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">var</span> game_1 = [<span class=\"string\">'PS4'</span>, <span class=\"string\">'Xbox'</span>, <span class=\"string\">'Switch'</span>, <span class=\"string\">'N3DS'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> game_removed_1 = game_1.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"string\">'PC'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// game_1 = ['PS4', 'Xbox', 'PC', 'N3DS'];</span></span><br><span class=\"line\">  <span class=\"comment\">// game_removed_1 is ['Switch']</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> game_2 = [<span class=\"string\">'PS4'</span>, <span class=\"string\">'Xbox'</span>, <span class=\"string\">'Switch'</span>, <span class=\"string\">'N3DS'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> game_removed_2 = game_2.splice(<span class=\"number\">-2</span>, <span class=\"number\">2</span>, <span class=\"string\">'PC'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// game_2 = ['PS4', 'Xbox', 'PC'];</span></span><br><span class=\"line\">  <span class=\"comment\">// game_removed_2 is ['Switch', 'N3DS']</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> game_3 = [<span class=\"string\">'PS4'</span>, <span class=\"string\">'Xbox'</span>, <span class=\"string\">'Switch'</span>, <span class=\"string\">'N3DS'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> game_removed_3 = game_3.splice(<span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// game_3 = ['PS4', 'Xbox', 'N3DS'];</span></span><br><span class=\"line\">  <span class=\"comment\">// game_removed_3 is ['Switch']</span></span><br><span class=\"line\">  <span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### split()</span></span><br><span class=\"line\"><span class=\"string\">  將 `</span><span class=\"built_in\">String</span><span class=\"string\">` 依照規則區分，並放入 `</span><span class=\"built_in\">Array</span><span class=\"string\">` 內</span></span><br><span class=\"line\"><span class=\"string\">  `</span><span class=\"string\">``</span> JavaScript</span><br><span class=\"line\">  stringObject.split(separator,howmany)</span><br></pre></td></tr></table></figure><br><code>separator</code> 自訂字串符或正則表達式，從該參數指定的地方分割 <code>String</code>。<br><code>howmany</code> 返回值的最大長度，超過該長度則不顯示。<br>以下是參考用法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"How are you ?\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> splits_1 = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> splits_2 = str.split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> splits_3 = str.split(<span class=\"string\">\" \"</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//splits1 contains [\"How\", \"are\", \"you\", \"?\"]</span></span><br><span class=\"line\"><span class=\"comment\">//splits2 contains [\"H\", \"o\", \"w\", \" \", \"a\", \"r\", \"e\", \" \", \"y\", \"o\", \"u\", \" \", \"?\"]</span></span><br><span class=\"line\"><span class=\"comment\">//splits3 contains [\"How\", \"are\", \"you\"]</span></span><br></pre></td></tr></table></figure><p></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" target=\"_blank\" rel=\"noopener\">Array.prototype.slice()</a><br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" target=\"_blank\" rel=\"noopener\">Array.prototype.splice()</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.prototype.split()</a></p>","categories":["JavaScript"],"tags":["JavaScript","w3HexSchool"]},{"title":"JavaScript 核心 (9) - 執行環境與作用域 - 執行緒與同步、非同步","url":"/javascript/20201222/1607076329/","content":"<h2 id=\"單執行緒\"><a href=\"#單執行緒\" class=\"headerlink\" title=\"單執行緒\"></a>單執行緒</h2><p>一次只能執行一件事情行完後才會接續下一步驟<br>JavaScript 是屬於 <code>單執行緒</code>的程式語言</p><h2 id=\"同步與非同步\"><a href=\"#同步與非同步\" class=\"headerlink\" title=\"同步與非同步\"></a>同步與非同步</h2><p>執行緒 =&gt; 系統本身運作流程<br>同步與非同步 =&gt; 針對程式語言<br>這樣講有點似懂非懂的感覺，直接舉例說明會更清楚</p><p>以下是<code>同步</code>的範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br><span class=\"line\">b();</span><br><span class=\"line\">c();</span><br></pre></td></tr></table></figure><p>上述執行順序肯定是 a() &gt; b() &gt; c()，不會在執行 a() 時，同時執行 b()。</p><p>以下是<code>非同步</code>範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'test'</span>)</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br><span class=\"line\">b();</span><br><span class=\"line\">c();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 結果 */</span></span><br><span class=\"line\">a</span><br><span class=\"line\">test</span><br><span class=\"line\">c</span><br><span class=\"line\">b</span><br></pre></td></tr></table></figure><p>這裡多了一個 <code>setTimeout</code> 的非同步函式。<br>在 JS 中，<code>非同步函式</code> 會被放進 <code>事件佇列(Event queue)</code> 中，在其他函式都執行完後，才會執行</p><p>要注意的是，執行順序依舊是 a() &gt; b() &gt; c()，但是 b() 中的<code>非同步</code>會單獨移到<code>事件佇列</code>，而其他程式仍舊維持<code>同步</code>運作，所以 <code>test</code> 才會在 c() 前面呦</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200531/3571534372/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(9)-執行環境與作用域-執行緒與同步、非同步</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (53) - ES6 章節：Let 及 Const - 樣板字面值（Template literals）基本介紹","url":"/javascript/20210204/3908712580/","content":"<h2 id=\"Template-literals\"><a href=\"#Template-literals\" class=\"headerlink\" title=\"Template literals\"></a>Template literals</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" rel=\"noopener\">MDN Template literals</a><br>允許嵌入運算式的字串字面值，解決傳統字串與變數組合時的不便性</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 傳統寫法 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cash = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> string = <span class=\"string\">'氣氣氣氣'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence = <span class=\"string\">'我的 '</span> + cash + <span class=\"string\">' 元掉進水溝裡了，真是'</span> + string;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence =&gt;'</span>, sentence); <span class=\"comment\">/* sentence =&gt; 我的10掉進水溝裡了，真是氣氣氣氣 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ES6 Template literals */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cash = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> string = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence = <span class=\"string\">`我的 <span class=\"subst\">$&#123; cash &#125;</span> 元掉進水溝裡了，真是<span class=\"subst\">$&#123; string || <span class=\"string\">'氣氣氣氣'</span>&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence =&gt;'</span>, sentence); <span class=\"comment\">/* sentence =&gt; 我的10掉進水溝裡了，真是氣氣氣氣 */</span></span><br></pre></td></tr></table></figure><h2 id=\"與模板搭配\"><a href=\"#與模板搭配\" class=\"headerlink\" title=\"與模板搭配\"></a>與模板搭配</h2><p>當需要在 JS 中寫好 html 與變數後插入 Dom，傳統寫法比較麻煩一點<br>改成 <code>Template literals</code> 會清楚易懂</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">50</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'阿姨'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">/* 傳統 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list_string = <span class=\"string\">'&lt;ul&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li&gt;我是 '</span> + people[<span class=\"number\">0</span>].name + <span class=\"string\">'，身上有 '</span> + people[<span class=\"number\">0</span>].cash + <span class=\"string\">' 元&lt;/li&gt;\\</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list_string =&gt;'</span>, list_string);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ES6 Template literals */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list_string = <span class=\"string\">`&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;li&gt;我是<span class=\"subst\">$&#123; people[<span class=\"number\">0</span>].name &#125;</span>，身上有<span class=\"subst\">$&#123; people[<span class=\"number\">0</span>].cash &#125;</span>元&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list_string =&gt;'</span>, list_string);</span><br></pre></td></tr></table></figure><p>如此一來，在組合字串與變數就變得相當清楚明瞭，並且還可以搭配判斷式來操作顯示內容。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (34) - 函式以及 This 的運作 - 最常見的 this：物件的方法調用","url":"/javascript/20210111/490625006/","content":"<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p>先來介紹 this 是什麼?出現在什麼時候?</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn();</span><br></pre></td></tr></table></figure><p>執行上述範例後，可在 <code>F12 source</code> 中得知 this 會指向 <code>Window</code><br>因此，<code>只要執行環境成立</code>，this 就會自動生成，不需要額外設定。<br>只是要知道這個 this 到底是指向什麼東西。</p><h2 id=\"this-基本觀念\"><a href=\"#this-基本觀念\" class=\"headerlink\" title=\"this 基本觀念\"></a>this 基本觀念</h2><p>以下三點是 this 觀念</p><ul><li>每個執行環境都有屬於自己的 this 關鍵字</li><li>this 與函式<code>如何宣告沒有關連性</code>，僅與 <code>呼叫方法</code> 有關</li><li><code>嚴格模式下</code>，簡易呼叫會有很大的改變<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(34)%20-%20%E5%87%BD%E5%BC%8F%E4%BB%A5%E5%8F%8A%20This%20%E7%9A%84%E9%81%8B%E4%BD%9C%20-%20%E6%9C%80%E5%B8%B8%E8%A6%8B%E7%9A%84%20this%EF%BC%9A%E7%89%A9%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95%E8%AA%BF%E7%94%A8%2F%E6%88%AA%E5%9C%96%202020-12-27%2022.50.01.png?alt=media&token=7688a1ec-71b4-4168-a246-fea5e366eee0\" alt=\"this 觀念\"></li></ul><h2 id=\"影響-this-的呼叫方法\"><a href=\"#影響-this-的呼叫方法\" class=\"headerlink\" title=\"影響 this 的呼叫方法\"></a>影響 this 的呼叫方法</h2><ul><li>作為物件方法(最常運用 this 的方法)</li><li>簡易呼叫(絕大多數的呼叫方式)</li><li>bind、apply、call 方法</li><li>new</li><li>DOM 事件處理器</li><li>箭頭函式(ES6)<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(34)%20-%20%E5%87%BD%E5%BC%8F%E4%BB%A5%E5%8F%8A%20This%20%E7%9A%84%E9%81%8B%E4%BD%9C%20-%20%E6%9C%80%E5%B8%B8%E8%A6%8B%E7%9A%84%20this%EF%BC%9A%E7%89%A9%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95%E8%AA%BF%E7%94%A8%2F%E6%88%AA%E5%9C%96%202020-12-27%2022.53.28.png?alt=media&token=6ed466f4-d883-44a0-a5da-0d2237fe7386\" alt=\"影響 this 的呼叫方法\"></li></ul><p>切記，看到 this 不要慌，找出這個 this 是依照上述<code>哪一個方法呼叫</code>的，就能知道這個 this 到底是指向誰?</p><h2 id=\"this-作為物件方法調用-最常見形式\"><a href=\"#this-作為物件方法調用-最常見形式\" class=\"headerlink\" title=\"this 作為物件方法調用(最常見形式)\"></a>this 作為物件方法調用(最常見形式)</h2><ul><li>物件方法調用時，<code>僅須關注是在哪一個物件下</code>呼叫的</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  callName() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data.callName(); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><p>由於 <code>callName()</code> 是在 <code>data</code> 底下呼叫的，所以 <code>callName</code> 中的 <code>this</code> 就會指向 <code>data</code> 這個物件。</p><p>一般不會將函式寫在物件內，而是獨立出來在用變數賦予物件內的屬性使用:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  callName: fn,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data.callName(); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><p>我們<code>不需要管 fn() 在哪裡</code>， 只需要知道 <code>fn()</code> 是怎麼呼叫的，上述範例依舊是回傳 <code>Cloud</code>。</p><p>在複雜一點的範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  callName: fn,</span><br><span class=\"line\">  ming: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Cloud2'</span>,</span><br><span class=\"line\">    callName: fn,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">data.callName(); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">data.ming.callName(); <span class=\"comment\">/* Cloud2 */</span></span><br></pre></td></tr></table></figure><p><code>data.callName()</code> 是在 <code>data</code> 底下呼叫，指向 <code>data</code><br><code>data.ming.callName()</code> 則是在 <code>data.ming</code> 底下呼叫，指向 <code>data.ming</code></p><p>來看看以下錯誤示範:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  callName: fn,</span><br><span class=\"line\">  ming: &#123;</span><br><span class=\"line\">    myName: <span class=\"string\">'Cloud2'</span>,</span><br><span class=\"line\">    callName: fn,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = data.callName;</span><br><span class=\"line\">a(); <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"><span class=\"comment\">/* window.a(); */</span></span><br></pre></td></tr></table></figure><p>為什麼是 <code>undefined</code> 呢?<br><code>this.myName</code> 是由 a() 呼叫，而 <code>a()</code> 也等於 window.a()，所以這個 this 會指向 window，並且因為 window.myName 沒有值，所以是 undefined。</p><p>那該如何修正呢?</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud3'</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">  callName: fn,</span><br><span class=\"line\">  ming: &#123;</span><br><span class=\"line\">    myName: <span class=\"string\">'Cloud2'</span>,</span><br><span class=\"line\">    callName: fn,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = data.callName;</span><br><span class=\"line\">a(); <span class=\"comment\">/* Cloud3 */</span></span><br></pre></td></tr></table></figure><p>只要在全域賦予一個變數 <code>myName</code> 即可。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20201227/2207483464/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(40)-函式以及 This 的運作-最常見的 this：物件的方法調用</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (55) - ES6 章節：Let 及 Const - 標籤樣板字面值","url":"/javascript/20210204/3639878289/","content":"<h2 id=\"運作模式\"><a href=\"#運作模式\" class=\"headerlink\" title=\"運作模式\"></a>運作模式</h2><p>可以使用函式傳入樣板字面值，並且會依照參數來區隔開字串與變數</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showConsole</span>(<span class=\"params\">strings, ...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(strings, arg); <span class=\"comment\">/* [\"您好 \", \" ，餐點已經準備好了!\", raw: Array(2)]  [\"小明\"] */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myName = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence = showConsole<span class=\"string\">`您好 <span class=\"subst\">$&#123;myName&#125;</span> ，餐點已經準備好了!`</span>;</span><br></pre></td></tr></table></figure><h2 id=\"加入標籤\"><a href=\"#加入標籤\" class=\"headerlink\" title=\"加入標籤\"></a>加入標籤</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myName = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> highlight = <span class=\"function\">(<span class=\"params\">strings, ...arg</span>) =&gt;</span> strings.map(<span class=\"function\">(<span class=\"params\">str, i</span>) =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123; str &#125;</span><span class=\"subst\">$&#123; arg[i] ? <span class=\"string\">`&lt;span&gt;<span class=\"subst\">$&#123;arg[i]&#125;</span>&lt;/span&gt;`</span> : <span class=\"string\">''</span> &#125;</span>`</span>).join(<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence = highlight<span class=\"string\">`您好 <span class=\"subst\">$&#123;myName&#125;</span> ，餐點已經準備好了!`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence_2 = <span class=\"string\">`您好 &lt;span&gt;<span class=\"subst\">$&#123;myName&#125;</span>&lt;/span&gt; ，餐點已經準備好了!`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence =&gt;'</span>, sentence); <span class=\"comment\">/* sentence =&gt; 您好 &lt;span&gt;小明&lt;/span&gt; ，餐點已經準備好了! */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence_2 =&gt;'</span>, sentence_2); <span class=\"comment\">/* sentence_2 =&gt; 您好 &lt;span&gt;小明&lt;/span&gt; ，餐點已經準備好了! */</span></span><br></pre></td></tr></table></figure><p>上述這個例子雖然可以直接寫成 <code>sentence_2</code> 形式，但一旦字串中需要插入的變數很多，並且<code>都要套用相同方法</code>的時候，就可以考慮寫成 <code>標籤樣板字面值</code>的形式</p><h2 id=\"XSS-阻擋\"><a href=\"#XSS-阻擋\" class=\"headerlink\" title=\"XSS 阻擋\"></a>XSS 阻擋</h2><p><code>傳入的變數</code> 有<code>寫入 html 的時候(innerHTML)</code>，就要小心是否會傳入<code>非正常變數內容</code>，像是塞入惡意程式、call 外部 API 等。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> messageName = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#message'</span>).innerHTML = <span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123; messageName &#125;</span> 傳來一則訊息&lt;/p&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xss_messageName = <span class=\"string\">'&lt;img onload=\"fetch(\\'https://randomuser.me/api\\')\" src=\"https://images.unsplash.com/photo-1593642702749-b7d2a804fbcf?ixid=MXwxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=800&amp;q=80\"&gt;&lt;/img&gt;'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#message'</span>).innerHTML = <span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123; xss_messageName &#125;</span> 傳來一則訊息&lt;/p&gt;`</span>;</span><br></pre></td></tr></table></figure><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(55)%20-%20ES6%20%E7%AB%A0%E7%AF%80%EF%BC%9ALet%20%E5%8F%8A%20Const%20-%20%E6%A8%99%E7%B1%A4%E6%A8%A3%E6%9D%BF%E5%AD%97%E9%9D%A2%E5%80%BC%2F%E6%93%B7%E5%8F%96.JPG?alt=media&token=29daebfe-f265-41cb-85fd-5ba4748613a6\" alt=\"xss 範例\"></p><p>解決方法也很好理解，只需將傳入的變數都先<code>轉成字串</code>再輸出即可</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">convertHTML</span>(<span class=\"params\">strings, ...keys</span>) </span>&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> strings.map(<span class=\"function\">(<span class=\"params\">str, i</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span><span class=\"subst\">$&#123;keys[i] ? <span class=\"string\">`<span class=\"subst\">$&#123;keys[i]      </span></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"><span class=\"subst\">    .replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">'&amp;amp;'</span>)</span></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"><span class=\"subst\">    .replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">'&amp;lt;'</span>)</span></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"><span class=\"subst\">    .replace(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">'&amp;gt;'</span>)&#125;</span>`</span> : <span class=\"string\">''</span>&#125;</span>`</span></span><br><span class=\"line\">  ).join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> xss_messageName = <span class=\"string\">'&lt;img onload=\"fetch(\\'https://randomuser.me/api\\')\" src=\"https://images.unsplash.com/photo-1593642702749-b7d2a804fbcf?ixid=MXwxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=800&amp;q=80\"&gt;&lt;/img&gt;'</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#message'</span>).innerHTML = convertHTML<span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123; xss_messageName &#125;</span> 傳來一則訊息&lt;/p&gt;`</span>;</span><br></pre></td></tr></table></figure><p>如此一來，就可以避免有 XSS 惡意攻擊行為。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (54) - ES6 章節：Let 及 Const - 巢狀結構","url":"/javascript/20210204/3146715217/","content":"<h2 id=\"傳入變數以外內容\"><a href=\"#傳入變數以外內容\" class=\"headerlink\" title=\"傳入變數以外內容\"></a>傳入變數以外內容</h2><p>由於樣板字面值是回傳表達式的值，所以除了變數外，還可寫入函式甚或是另一個樣板字面值</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">  cash: <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence = <span class=\"string\">`我是<span class=\"subst\">$&#123; person.name &#125;</span>，身上帶有<span class=\"subst\">$&#123; person.cash || <span class=\"number\">2000</span> &#125;</span>元`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence_2 = <span class=\"string\">`我是<span class=\"subst\">$&#123; person.name &#125;</span>，身上帶有<span class=\"subst\">$&#123; (<span class=\"keyword\">function</span>(c) &#123; <span class=\"keyword\">return</span> c * <span class=\"number\">2</span> &#125;</span>)(person.cash) &#125;元`</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence_3 = <span class=\"string\">`我是<span class=\"subst\">$&#123; person.name &#125;</span>，身上帶有<span class=\"subst\">$&#123; ((c) =&gt; c * <span class=\"number\">2</span> )(person.cash) &#125;</span>元`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence =&gt;'</span>, sentence); <span class=\"comment\">/* sentence =&gt; 我是小明，身上帶有2000元 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence_2 =&gt;'</span>, sentence_2); <span class=\"comment\">/* sentence_2 =&gt; 我是小明，身上帶有2000元 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence_3 =&gt;'</span>, sentence_3); <span class=\"comment\">/* sentence_3 =&gt; 我是小明，身上帶有2000元 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 巢狀插入 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sentence_4 = <span class=\"string\">`我是<span class=\"subst\">$&#123; person.name &#125;</span>，<span class=\"subst\">$&#123; <span class=\"string\">`身上帶有 <span class=\"subst\">$&#123; person.cash &#125;</span>`</span> &#125;</span>元`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sentence_4 =&gt;'</span>, sentence_4); <span class=\"comment\">/* sentence_4 =&gt; 我是小明，身上帶有 1000元 */</span></span><br></pre></td></tr></table></figure><h2 id=\"樣板字面值與迴圈搭配\"><a href=\"#樣板字面值與迴圈搭配\" class=\"headerlink\" title=\"樣板字面值與迴圈搭配\"></a>樣板字面值與迴圈搭配</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> people = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小明'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">50</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'阿姨'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">100</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">    cash: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> list_string = <span class=\"string\">`&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    <span class=\"subst\">$&#123; people.map((person) =&gt; <span class=\"string\">`&lt;li&gt;我是<span class=\"subst\">$&#123; person.name &#125;</span>，身上有 <span class=\"subst\">$&#123; person.cash &#125;</span> 元&lt;/li&gt;`</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list_string =&gt;'</span>, list_string);</span><br><span class=\"line\"><span class=\"comment\">/* list_string =&gt; &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;我是小明，身上有 50 元&lt;/li&gt;,&lt;li&gt;我是阿姨，身上有 100 元&lt;/li&gt;,&lt;li&gt;我是Cloud，身上有 1000 元&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/ul&gt; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 由於 map() 本身回傳的仍是陣列，所以會有 \"逗號\" 產生， 這時就得使用 .join() 來轉成字串值 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> list_string_finish = <span class=\"string\">`&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    <span class=\"subst\">$&#123; people.map((person) =&gt; <span class=\"string\">`&lt;li&gt;我是<span class=\"subst\">$&#123; person.name &#125;</span>，身上有 <span class=\"subst\">$&#123; person.cash &#125;</span> 元&lt;/li&gt;`</span>).join(<span class=\"string\">''</span>) &#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'list_string =&gt;'</span>, list_string_finish);</span><br><span class=\"line\"><span class=\"comment\">/* list_string =&gt; &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;li&gt;我是小明，身上有 50 元&lt;/li&gt;&lt;li&gt;我是阿姨，身上有 100 元&lt;/li&gt;&lt;li&gt;我是Cloud，身上有 1000 元&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/ul&gt; */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (37) - 函式以及 This 的運作 - this：DOM","url":"/javascript/20210118/497532059/","content":"<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p>試著在按鈕上綁定事件後看看 this 是誰?</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- addEventListener --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>送出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接綁在按鈕上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"console.log(this)\"</span>&gt;</span>送出<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p>上述 <code>this 會指向 DOM</code></p><h2 id=\"搭配-bind\"><a href=\"#搭配-bind\" class=\"headerlink\" title=\"搭配 bind()\"></a>搭配 bind()</h2><p>如果希望 this 不是指向 DOM，而是由我們決定的話，可以使用 bind() 來賦予 this。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Ray'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">'click'</span>, fn.bind(obj));</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210110/3064157407/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(43)-函式以及 This 的運作-this：DOM</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (36) - 函式以及 This 的運作 - this：call, apply, bind 與 嚴謹模式","url":"/javascript/20210111/2281332667/","content":"<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype.call</a></p><ul><li>立刻執行</li><li>可以在 simalp call 中，使用 call() 來<code>指定 this</code>。</li><li>參數直接傳入</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">para1, para2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>, para1, para2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">/* window object 1 2 */</span></span><br><span class=\"line\">fn.call(family, <span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">/* &#123;myName: \"Cloud\"&#125; \"object\" 1 2 */</span></span><br></pre></td></tr></table></figure><h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">Function.prototype.apply</a></p><ul><li>立刻執行</li><li>可以在 simalp call 中，使用 call() 來<code>指定 this</code>。</li><li>參數使用 <code>陣列</code> 傳入</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">para1, para2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>, para1, para2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">/* window object 3 4 */</span></span><br><span class=\"line\">fn.apply(family, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]); <span class=\"comment\">/* &#123;myName: \"Cloud\"&#125; \"object\" 3 4 */</span></span><br></pre></td></tr></table></figure><h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">Function.prototype.bind</a></p><ul><li>不會立刻執行</li><li>可以在 simalp call 中，使用 call() 來<code>指定 this</code>。</li><li>參數直接傳入</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">para1, para2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>, para1, para2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn2 = fn.bind(family, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>);</span><br><span class=\"line\">fn2(); <span class=\"comment\">/* &#123;myName: \"Cloud\"&#125; \"object\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 強制傳參數不會覆蓋原本已經設定的參數 */</span></span><br><span class=\"line\">fn2(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">/* &#123;myName: \"Cloud\"&#125; \"object\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 部分寫入，參數依序傳入 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn3 = fn.bind(family, <span class=\"string\">'小明'</span>);</span><br><span class=\"line\">fn3(<span class=\"number\">1</span>,<span class=\"number\">2</span>); <span class=\"comment\">/* &#123;myName: \"Cloud\"&#125; \"object\" \"小明\" 1 */</span></span><br></pre></td></tr></table></figure><p>bind() 很常跟 simple call 搞混，要記住，<code>在使用 bind() 的時後 this 就已經決定</code>了。</p><h2 id=\"進階觀念\"><a href=\"#進階觀念\" class=\"headerlink\" title=\"進階觀念\"></a>進階觀念</h2><p>在<code>不使用嚴格模式下</code>，this 傳入純值竟然是建構式</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span> (<span class=\"params\">para1, para2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>, para1, para2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.call(<span class=\"number\">1</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* Number &#123;1&#125; \"object\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\">fn.call(<span class=\"string\">'文字'</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* String &#123;\"文字\"&#125; \"object\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\">fn.call(<span class=\"literal\">undefined</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* window \"object\" \"小明\" \"杰倫\" */</span></span><br></pre></td></tr></table></figure><p>傳入 undefined 回傳是 window<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype.call</a></p><p>在<code>非嚴格模式下</code>，使用 call() 傳入的純值如果是 <code>undefined</code>、<code>null</code>，將被置換成全域變數 window，原生型態則被封裝(建構式)</p><h2 id=\"嚴格模式\"><a href=\"#嚴格模式\" class=\"headerlink\" title=\"嚴格模式\"></a>嚴格模式</h2><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\" rel=\"noopener\">嚴格模式</a></p><ul><li>加入 <code>use strict</code> 即可運作</li><li>不會影響不支援嚴格模式的瀏覽器</li><li>可依據<code>執行環境設定 use strict</code></li><li>透過拋出錯誤方式消除一些安靜的錯誤</li><li>禁止使用一些有可能被未來版本 ECMAScript 定義的語法</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不允許直接賦予值 */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  a = <span class=\"string\">'小明'</span>; <span class=\"comment\">/* a is not defined */</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><p>回到先前範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'Cloud'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callStrict</span>(<span class=\"params\">para1, para2</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  'use strict'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>, <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>, para1, para2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">callStrict.call(<span class=\"number\">1</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* 1 \"number\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\">callStrict.call(<span class=\"string\">'文字'</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* 文字 string 小明 杰倫 */</span></span><br><span class=\"line\">callStrict.call(<span class=\"literal\">undefined</span>, <span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* undefined \"undefined\" \"小明\" \"杰倫\" */</span></span><br><span class=\"line\">callStrict(<span class=\"string\">'小明'</span>, <span class=\"string\">'杰倫'</span>); <span class=\"comment\">/* undefined \"undefined\" \"小明\" \"杰倫\" */</span></span><br></pre></td></tr></table></figure><p>在<code>嚴格模式下</code>使用 <code>simple call</code>，<code>this</code> 會變成 <code>undefined</code><br><code>simple call</code> 等同於使用 <code>call()</code>，但<code>並不會傳 this</code> 進去<br>所以 this 會<code>預設是 undefined</code><br>在 simple call 時盡量不要使用 this，因為此時 this 的本質是 undefined</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210110/1506036553/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(42)-函式以及 This 的運作-this：call, apply, bind 與 嚴謹模式</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (35) - 函式以及 This 的運作 - this：簡易呼叫","url":"/javascript/20210111/3970152447/","content":"<h2 id=\"Sample-Call\"><a href=\"#Sample-Call\" class=\"headerlink\" title=\"Sample Call\"></a>Sample Call</h2><p>簡易呼叫，此方式呼叫的 this 基本上會<code>指向 window</code>。<br>以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(); <span class=\"comment\">/* window */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 驗證 this 是否指向 window  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn1() === <span class=\"built_in\">window</span>; <span class=\"comment\">/* true */</span></span><br></pre></td></tr></table></figure><h2 id=\"simple-call-常見類型\"><a href=\"#simple-call-常見類型\" class=\"headerlink\" title=\"simple call 常見類型\"></a>simple call 常見類型</h2><ul><li>IIFE 立即函式</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud2'</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSomeone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud3'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName); <span class=\"comment\">/* Cloud */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  callSomeone();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>closure 閉包</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">update</span>) </span>&#123;</span><br><span class=\"line\">    a = a + update;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a=&gt;'</span>,a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName, <span class=\"keyword\">this</span>.a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> qq = fn();</span><br><span class=\"line\">qq(<span class=\"number\">10</span>); <span class=\"comment\">/* Cloud undefined */</span></span><br></pre></td></tr></table></figure><ul><li>Callback 回呼函式</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = <span class=\"number\">100</span>;</span><br><span class=\"line\">  callback(money); <span class=\"comment\">/* Cloud 200 */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">money</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName, money + <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>其他 callback 類型</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName, i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Cloud 1</span></span><br><span class=\"line\"><span class=\"comment\">Cloud 2</span></span><br><span class=\"line\"><span class=\"comment\">Cloud 3</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure><h2 id=\"callback-中使用-this\"><a href=\"#callback-中使用-this\" class=\"headerlink\" title=\"callback 中使用 this\"></a>callback 中使用 this</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'小明家'</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myName);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">family.callName(); <span class=\"comment\">/* Cloud */</span></span><br></pre></td></tr></table></figure><p>因為 <code>setTimeout()</code> 是 <code>simaple call</code>，即便是用 <code>family.callName()</code> 呼叫函式，但實際上內部的 <code>setTimeout()</code> 仍是直接執行的緣故，所以 this 依舊指向 window。</p><p>那如果我們想要取得 <code>小明家</code> 這個 myName 呢?</p><ul><li>撰寫方式一: 匿名函式</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'小明家'</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(vm.myName);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">family.callName(); <span class=\"comment\">/* 小明家 */</span></span><br></pre></td></tr></table></figure><ul><li>撰寫方式二: 具名函式</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">'Cloud'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(vm.myName);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  myName: <span class=\"string\">'小明家'</span>,</span><br><span class=\"line\">  callName: fn,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">family.callName(); <span class=\"comment\">/* 小明家 */</span></span><br></pre></td></tr></table></figure><p>至於 <code>vm</code> 這個存取 this 的變數名稱則是依照團隊制定，沒有一定形式。<br>常見的有 <code>vm</code>、<code>that</code>、<code>_this</code>、<code>self</code>。<br>&lt;註&gt;不推薦使用 <code>self</code><br>因為 <code>self</code> 其實就是 <code>window 本身</code></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210103/2997707827/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(41)-函式以及 This 的運作-this：簡易呼叫</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript - 取得各國日期與時間","url":"/javascript/20191202/3751349744/","content":"<h2 id=\"取得本地日期與時間\"><a href=\"#取得本地日期與時間\" class=\"headerlink\" title=\"取得本地日期與時間\"></a>取得本地日期與時間</h2><ul><li><code>Date.prototype.toLocaleString()</code> : 取得本地的日期與時間<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 建立 Date 物件再使用 toLocaleString 方法</span><br><span class=\"line\">var date &#x3D; new Date().toLocaleString();</span><br><span class=\"line\">console.log(date);  &#x2F;&#x2F; &quot;2019&#x2F;12&#x2F;2 上午9:38:59&quot;</span><br></pre></td></tr></table></figure></li><li><code>Date.prototype.toLocaleDateString()</code> : 取得本地的日期<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 建立 Date 物件再使用 toLocaleDateString 方法</span><br><span class=\"line\">var date &#x3D; new Date().toLocaleDateString();</span><br><span class=\"line\">console.log(date);  &#x2F;&#x2F; &quot;2019&#x2F;12&#x2F;2&quot;</span><br></pre></td></tr></table></figure></li><li><code>Date.prototype.toLocaleTimeString()</code> : 取得本地的時間<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 建立 Date 物件再使用 toLocaleTimeString() 方法</span><br><span class=\"line\"></span><br><span class=\"line\">var date &#x3D; new Date().toLocaleTimeString();</span><br><span class=\"line\">console.log(date);  &#x2F;&#x2F; &quot;上午9:57:13&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"取得其他國家的日期和時間\"><a href=\"#取得其他國家的日期和時間\" class=\"headerlink\" title=\"取得其他國家的日期和時間\"></a>取得其他國家的日期和時間</h2><h3 id=\"加入-locales-options-參數\"><a href=\"#加入-locales-options-參數\" class=\"headerlink\" title=\"加入 locales, options 參數\"></a>加入 locales, options 參數</h3><p><code>Date.prototype.toLocaleString([locales[, options]])</code></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var options &#x3D; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; day: &#39;numeric&#39;,    &#x2F;&#x2F; 十位數有 0 不顯示 </span><br><span class=\"line\">  &#x2F;&#x2F; month: &#39;long&#39;,     &#x2F;&#x2F; 完整月份</span><br><span class=\"line\">  &#x2F;&#x2F; year: &#39;numeric&#39;,   &#x2F;&#x2F; (e.g., 2019)</span><br><span class=\"line\">  &#x2F;&#x2F; hour: &#39;2-digit&#39;,   &#x2F;&#x2F; (e.g., 02)</span><br><span class=\"line\">  &#x2F;&#x2F; minute: &#39;2-digit&#39;, &#x2F;&#x2F; (e.g., 02)          </span><br><span class=\"line\">  hour12: false,     &#x2F;&#x2F; 24 小時制</span><br><span class=\"line\">  timeZone: &#39;America&#x2F;New_York&#39; &#x2F;&#x2F; 美國&#x2F;紐約</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var date &#x3D; new Date().toLocaleString(&#39;zh-TW&#39;, options);</span><br><span class=\"line\">console.log(date); &#x2F;&#x2F; 2019&#x2F;12&#x2F;1 21:29:13</span><br></pre></td></tr></table></figure><ul><li>註: options 前五項如果有加入的話會顯示 xxxx年xx月xx日，如果之後有需要個別拆分的話用 <code>split()</code> 會有點麻煩，所以一般我都只開顯示 24 小時制跟時區就好，畢竟 <code>split(&#39;/&#39;)</code> 就可以將年、月、日拆出來使用，相當簡潔有力呢!!<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var options &#x3D; &#123;       </span><br><span class=\"line\">  hour12: false,     &#x2F;&#x2F; 24 小時制</span><br><span class=\"line\">  timeZone: &#39;America&#x2F;New_York&#39; &#x2F;&#x2F; 美國&#x2F;紐約</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var date &#x3D; new Date().toLocaleString(&#39;zh-TW&#39;, options);</span><br><span class=\"line\">var dateStr &#x3D; date.split(&#39; &#39;)[0];</span><br><span class=\"line\">var timeStr &#x3D; date.split(&#39; &#39;)[1];</span><br><span class=\"line\">var yaer &#x3D; dateStr.split(&#39;&#x2F;&#39;)[0];</span><br><span class=\"line\">var month &#x3D; dateStr.split(&#39;&#x2F;&#39;)[1];</span><br><span class=\"line\">var day &#x3D; dateStr.split(&#39;&#x2F;&#39;)[2];</span><br><span class=\"line\">console.log(date);    &#x2F;&#x2F; 2019&#x2F;12&#x2F;1 21:39:48</span><br><span class=\"line\">console.log(dateStr); &#x2F;&#x2F; 2019&#x2F;12&#x2F;1</span><br><span class=\"line\">console.log(timeStr); &#x2F;&#x2F; 21:39:48</span><br><span class=\"line\">console.log(yaer, month, day); &#x2F;&#x2F; 2019 12 1</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul><li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\" target=\"_blank\" rel=\"noopener\">[MDN] Date.prototype.toLocaleString()</a></li><li><a href=\"https://timezonedb.com/time-zones\" target=\"_blank\" rel=\"noopener\">List of Time Zones</a></li></ul>","categories":["JavaScript"],"tags":["JavaScript"]},{"title":"JavaScript 核心 (38) - 函式以及 This 的運作 - this 課後練習","url":"/javascript/20210118/3217853531/","content":"<h2 id=\"第一題\"><a href=\"#第一題\" class=\"headerlink\" title=\"第一題\"></a>第一題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> auntie = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'漂亮阿姨'</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Magic Watch'</span>,</span><br><span class=\"line\">    callName: callName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">auntie.callName();</span><br><span class=\"line\">auntie.watch.callName();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 漂亮阿姨 / Magic Watch */</span></span><br></pre></td></tr></table></figure><h2 id=\"第二題\"><a href=\"#第二題\" class=\"headerlink\" title=\"第二題\"></a>第二題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> auntie = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'漂亮阿姨'</span>,</span><br><span class=\"line\">  callName: callName,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Magic Watch'</span>,</span><br><span class=\"line\">    callName: callName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> callName1 = auntie;</span><br><span class=\"line\"><span class=\"keyword\">var</span> callName2 = auntie.watch;</span><br><span class=\"line\"><span class=\"keyword\">var</span> callName3 = callName1.callName();</span><br><span class=\"line\"><span class=\"keyword\">var</span> callName4 = callName2.callName;</span><br><span class=\"line\"></span><br><span class=\"line\">callName3;</span><br><span class=\"line\">callName4;</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 漂亮阿姨 / function callName() */</span></span><br></pre></td></tr></table></figure><h2 id=\"第三題\"><a href=\"#第三題\" class=\"headerlink\" title=\"第三題\"></a>第三題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">namefu</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =  &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小王'</span>,</span><br><span class=\"line\">  myname: namefu,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">namefu.name=<span class=\"string\">'小美'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a.myname();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 小王 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第四題\"><a href=\"#第四題\" class=\"headerlink\" title=\"第四題\"></a>第四題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'小王'</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  y: <span class=\"string\">'2'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: undefined */</span></span><br></pre></td></tr></table></figure><h2 id=\"第五題\"><a href=\"#第五題\" class=\"headerlink\" title=\"第五題\"></a>第五題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  x: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小虎'</span>,</span><br><span class=\"line\">    myname: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">      &#125;,<span class=\"number\">500</span>) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  y: <span class=\"string\">'2'</span>,</span><br><span class=\"line\">  name: <span class=\"string\">'小王'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = obj.x.myname();</span><br><span class=\"line\">a;</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 小虎 / 小明 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第六題\"><a href=\"#第六題\" class=\"headerlink\" title=\"第六題\"></a>第六題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'全域阿婆'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> auntie = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'漂亮阿姨'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">callName(<span class=\"literal\">undefined</span>, <span class=\"string\">'小明'</span>);</span><br><span class=\"line\">callName.call(auntie, <span class=\"string\">'小明'</span>);</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 全域阿婆 / undefined，漂亮阿姨 / 小明 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第七題\"><a href=\"#第七題\" class=\"headerlink\" title=\"第七題\"></a>第七題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'全域'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> auntie = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'漂亮阿姨'</span>,</span><br><span class=\"line\">  callName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = auntie.callName;</span><br><span class=\"line\">  a();</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 全域 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第八題\"><a href=\"#第八題\" class=\"headerlink\" title=\"第八題\"></a>第八題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'全域'</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">'區域'</span>;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,<span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 全域 */</span></span><br></pre></td></tr></table></figure><h2 id=\"第九題\"><a href=\"#第九題\" class=\"headerlink\" title=\"第九題\"></a>第九題</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小美'</span>,</span><br><span class=\"line\">  family: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'小王'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">callName.name = <span class=\"string\">'小光'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = callName.bind(obj, <span class=\"string\">'小城'</span>);</span><br><span class=\"line\">a();</span><br><span class=\"line\"><span class=\"comment\">/* Ans: 小美 */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210111/2101221515/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(44)-函式以及 This 的運作-this 課後練習</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (7) - 執行環境與作用域 - undefined VS not defined","url":"/javascript/20201221/212873177/","content":"<h2 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h2><p>在宣告變數<code>之前</code>呼叫變數，則會是 <code>undefined</code>。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">/* undefined */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'Cloud'</span></span><br></pre></td></tr></table></figure><h3 id=\"undefined-注意事項\"><a href=\"#undefined-注意事項\" class=\"headerlink\" title=\"undefined 注意事項\"></a>undefined 注意事項</h3><p>在宣告變數時請不要使用 <code>undefined</code>或是給 <code>undefined</code> 當作值賦予變數，即使 JS 允許也一樣，這會導致在 debug 的困擾。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"string\">'1'</span>;</span><br><span class=\"line\"><span class=\"literal\">undefined</span>   <span class=\"comment\">/* undefined */</span></span><br></pre></td></tr></table></figure><p>若想賦予變數<code>初始空值</code>，則可以使用 <code>null</code> 來代替。<br>&lt;註&gt;<code>null</code> 與 <code>&#39;&#39;</code> 是不同的</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"string\">''</span>);   <span class=\"comment\">/* return string */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"literal\">null</span>); <span class=\"comment\">/* return object */</span></span><br></pre></td></tr></table></figure><p>而　<code>null</code>　為什麼會是　<code>object</code> 呢? 這是 JS 在一開始設計時產生的 Bug，但因為運行過久，導致現在若修正的話，會影響到全世界的網站，所以就一直維持這個 Bug。</p><h2 id=\"not-defined\"><a href=\"#not-defined\" class=\"headerlink\" title=\"not defined\"></a>not defined</h2><p>根本連宣告變數都沒有就呼叫變數，則會是 <code>not defined</code><br>意即<code>變數或函式未定義</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">/* a is not defined */</span></span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200510/2581786882/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(7)-執行環境與作用域-not defined VS undefined</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (21) - 物件 - 變數及物件屬性的差異","url":"/javascript/20201225/4030024306/","content":"<h2 id=\"變數無法被刪除\"><a href=\"#變數無法被刪除\" class=\"headerlink\" title=\"變數無法被刪除\"></a>變數無法被刪除</h2><p>直接宣告變數時，會是建立在<code>window</code>底下</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a); <span class=\"comment\">/* 1 */</span></span><br></pre></td></tr></table></figure><p>而不使用 <code>var</code> 宣告呢?</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a); <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b); <span class=\"comment\">/* 2 */</span></span><br></pre></td></tr></table></figure><p>同樣都出現在 <code>window</code> 底下，那麼我們就來刪除看看吧!</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> a; <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> b; <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><p>由此可知，變數是無法透過 <code>delete</code> 刪除的。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200726/2777973914/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(23)-物件-額外補充：變數及物件屬性的差異</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (17) - 運算子、型別與文法 -  Truthy 與 Falsy","url":"/javascript/20201224/309252186/","content":"<h2 id=\"Truthy-與-Falsy\"><a href=\"#Truthy-與-Falsy\" class=\"headerlink\" title=\"Truthy 與 Falsy\"></a>Truthy 與 Falsy</h2><p><code>truthy</code>（真值）指的是在布林值上下文中，轉換後的值為真的值。所有值都是真值，除非它们被定義為<code>假值</code>（即除 false、0、””、null、undefined 和 NaN 以外皆為真值）。</p><p>可參考<a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\" rel=\"noopener\">真假值表</a></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'執行程式'</span>); <span class=\"comment\">/* 會出現這一行字 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> == <span class=\"literal\">true</span>; <span class=\"comment\">/* false */</span></span><br></pre></td></tr></table></figure><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(17)%20-%20%E9%81%8B%E7%AE%97%E5%AD%90%E3%80%81%E5%9E%8B%E5%88%A5%E8%88%87%E6%96%87%E6%B3%95%20-%20%20Truthy%20%E8%88%87%20Falsy%2F%E7%9C%9F%E5%81%87%E5%80%BC%E8%A1%A8.jpg?alt=media&token=90d92b5f-1779-4500-bacb-e8e612e3261f\" alt=\"真假值表\"></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20200628/2353666308/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(18)-運算子、型別與文法-Truthy 與 Falsy</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (40) - 繼承與原型鍊 - 原型鍊的概念 - 為什麼有原型","url":"/javascript/20210122/1980326624/","content":"<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>諸多 <code>OOP</code> 物件導向的程式語言中常會有這種原型功能<br>可以理解成 創建一個 <code>類別</code>，並賦予這個類別有哪些功能、屬性等等<br>而利用這個 <code>類別</code> 則可以創造出多種相似的實體出來<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(40)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E9%8D%8A%E7%9A%84%E6%A6%82%E5%BF%B5%20-%20%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89%E5%8E%9F%E5%9E%8B%2F%E6%88%AA%E5%9C%96%202021-01-17%2021.21.51.png?alt=media&token=4dac17f6-3c42-4c1d-a7ba-9cb97d085a85\" alt=\"物件導向\"></p><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(40)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E9%8D%8A%E7%9A%84%E6%A6%82%E5%BF%B5%20-%20%E7%82%BA%E4%BB%80%E9%BA%BC%E6%9C%89%E5%8E%9F%E5%9E%8B%2F%E6%88%AA%E5%9C%96%202021-01-17%2021.32.14.png?alt=media&token=f67eca50-21dd-461f-b350-7864ce8060f0\" alt=\"創建實體\"></p><h2 id=\"JavaScript-原型\"><a href=\"#JavaScript-原型\" class=\"headerlink\" title=\"JavaScript 原型\"></a>JavaScript 原型</h2><p>JavaScript 根本上是一個物件，任何內容均是以物件方式建立，就沒有所謂的 <code>class 類別</code>概念，所以是採用 <code>原型繼承</code> 的方式做出類似 class 的功能。<br>ES6 中有 <code>class 語法糖</code>可以使用，但根本上與其他語言的 <code>class</code> 是不一樣的</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a><br><a href=\"https://hsiangfeng.github.io/javascript/20210117/3096588885/\" target=\"_blank\" rel=\"noopener\">JavaScript 核心觀念(47)-繼承與原型鍊-原型鍊的概念 - 為什麼有原型</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"JavaScript 核心 (41) - 繼承與原型鍊 - 原型在哪裡","url":"/javascript/20210122/2810333641/","content":"<h2 id=\"原型的特性\"><a href=\"#原型的特性\" class=\"headerlink\" title=\"原型的特性\"></a>原型的特性</h2><ul><li>一樣具有物件的特性</li><li>向上查找</li><li>原型可以共用方法及屬性<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(41)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E5%9C%A8%E5%93%AA%E8%A3%A1%2F%E6%93%B7%E5%8F%96.JPG?alt=media&token=23d4adb2-6b49-43b8-9e79-6fa064e0d35e\" alt=\"向上查找\"><br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(41)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E5%9C%A8%E5%93%AA%E8%A3%A1%2F%E6%93%B7%E5%8F%962.JPG?alt=media&token=f8718d83-eeec-4368-aba4-c91b5e2720a9\" alt=\"原型可以共用方法及屬性\"></li></ul><p>以下用範例操作看看:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"number\">1</span>], a.length); <span class=\"comment\">/* 2 3 */</span></span><br><span class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">  <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><p><code>forEach()</code> 並不是 <code>a</code> 物件內方法，而是在 <code>array</code> 的原型方法<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/JavaScript%20%E6%A0%B8%E5%BF%83%20(41)%20-%20%E7%B9%BC%E6%89%BF%E8%88%87%E5%8E%9F%E5%9E%8B%E9%8D%8A%20-%20%E5%8E%9F%E5%9E%8B%E5%9C%A8%E5%93%AA%E8%A3%A1%2F__proto__.JPG?alt=media&token=580a91b1-1969-4d47-b36e-2e6922d8f31d\" alt=\"__proto__\"></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">a.__proto__.getLast = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 此時 array 的原型中就有 getLast 函式 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 所以 b 就可以使用 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.getLast()); <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getLast()); <span class=\"comment\">/* 6 */</span></span><br></pre></td></tr></table></figure><p>由上述範例可知 <code>原型可以共用方法及屬性</code></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> family = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'小明家'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">family.__proto__.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(family.getName()); <span class=\"comment\">/* 小明家 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">b.name = <span class=\"string\">'陣列的屬性'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.getName()); <span class=\"comment\">/* 陣列的屬性 */</span></span><br></pre></td></tr></table></figure><p><code>陣列原型</code> 的 <code>__proto__</code> 是 <code>物件原型</code>，也就是最頂層原型<br>由此可知 <code>原型有多個層級，可以不斷向上查找</code></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.hexschool.com/courses/js-core.html\" target=\"_blank\" rel=\"noopener\">六角學院 - JavaScript 核心篇</a></p>","categories":["JavaScript"],"tags":["JavaScript","JavaScript 核心篇"]},{"title":"Node.js - 開啟 Web Server","url":"/nodejs/20191225/3369199661/","content":"<h2 id=\"創建一個-Web-Server\"><a href=\"#創建一個-Web-Server\" class=\"headerlink\" title=\"創建一個 Web Server\"></a>創建一個 Web Server</h2><ol><li>建立專案資料夾與 <code>all.js</code></li><li>require <code>http</code> 模組</li><li>撰寫 <code>creatServer</code> 的 function</li></ol><p>何謂 <code>request</code> 與 <code>response</code> ?</p><ul><li>request 請求: 當使用者讀取網站時會向伺服器發送請求，伺服器接收到使用者的相關資料</li><li>response 回傳 : 收到 request 後回傳的資料</li></ul><p>以下是範例程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">8080</span>;</span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// request 請求 : 當使用者讀取網站時會向伺服器發送請求，伺服器接收到使用者相關資料</span></span><br><span class=\"line\">  <span class=\"comment\">// response 回傳 : 收到 request 後回傳的資料</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(request.url);</span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>, <span class=\"comment\">// 回傳格式 text/plain or text/html</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  response.write(<span class=\"string\">'hello'</span>); <span class=\"comment\">// 一般文字 or html 標籤形式</span></span><br><span class=\"line\">  response.end();</span><br><span class=\"line\">&#125;).listen(port); <span class=\"comment\">// 監聽通訊阜</span></span><br></pre></td></tr></table></figure><p>執行 <code>node app.js</code> 後開啟 <code>http://localhost:8080</code>就會看到 <code>hello</code> 囉!</p>","categories":["Nodejs"],"tags":["JavaScript","Nodejs"]},{"title":"Node.js - 基礎介紹","url":"/nodejs/20191225/3849868532/","content":"<h2 id=\"Node-js-是什麼\"><a href=\"#Node-js-是什麼\" class=\"headerlink\" title=\"Node.js 是什麼 ?\"></a>Node.js 是什麼 ?</h2><p><a href=\"https://zh.wikipedia.org/wiki/Node.js\" target=\"_blank\" rel=\"noopener\">Node.js wiki</a><br>Node.js 是一個能在後端也使用 JavaScript 撰寫的開放原始碼，以往 JavaScript 主要負責前端程式的執行，而後端則使用 C#、PHP、Python等語言。<br>Node.js 的出現，讓前端得以使用 JavaScript 撰寫後端程式，並且使用 Node.js 內建模組開啟獨立伺服器，從而擺脫 Apache HTTP Server 或 IIS。</p><h2 id=\"V8-引擎\"><a href=\"#V8-引擎\" class=\"headerlink\" title=\"V8 引擎\"></a>V8 引擎</h2><p>由 Google 所推出的 JavaScript 引擎，優勢就是快、快、還要更快。<br><a href=\"https://zh.wikipedia.org/wiki/V8_(JavaScript%E5%BC%95%E6%93%8E)\" target=\"_blank\" rel=\"noopener\">V8 引擎</a></p><h2 id=\"優勢在哪\"><a href=\"#優勢在哪\" class=\"headerlink\" title=\"優勢在哪?\"></a>優勢在哪?</h2><ul><li>採用 v8 引擎編譯</li><li>脫離 Apache HTTP Server 或 IIS</li><li>開放原始碼</li><li>有多款框架可以選擇(Express.js、Koa.js)</li></ul><h2 id=\"環境配置\"><a href=\"#環境配置\" class=\"headerlink\" title=\"環境配置\"></a>環境配置</h2><p>到官網下載(選擇 LTS 版本)並安裝 Node.js<br><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a><br>安裝後在 <code>終端機</code> or <code>CMD</code> 查看版本號，有顯示的話就代表安裝成功囉!</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure><h2 id=\"Node-js-起手式\"><a href=\"#Node-js-起手式\" class=\"headerlink\" title=\"Node.js 起手式\"></a>Node.js 起手式</h2><p>首先創建一個資料夾，新建一支 <code>all.js</code> 寫個測試代碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(&#39;測試&#39;);</span><br></pre></td></tr></table></figure><p>接下來打開 <code>CMD</code>，移到資料夾路徑並執行 <code>node all.js</code>，如果有看到 <code>測試</code> 就代表成功執行囉!</p>","categories":["Nodejs"],"tags":["JavaScript","Nodejs"]},{"title":"Node.js - 模組開發 module exports","url":"/nodejs/20191225/809670029/","content":"<h2 id=\"module-exports-、-require\"><a href=\"#module-exports-、-require\" class=\"headerlink\" title=\"module.exports 、 require\"></a>module.exports 、 require</h2><p>創建一個資料夾，分別建立 <code>app.js</code>、<code>data.js</code><br>在 <code>app.js</code> 撰寫以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"built_in\">require</span>(<span class=\"string\">'./data'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(content.data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(content.bark());</span><br></pre></td></tr></table></figure><p>在 <code>data.js</code> 撰寫以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">// 兩種 exports 輸出寫法 (無法並存)</span></span><br><span class=\"line\"><span class=\"comment\">// 推薦 exports 寫法</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  data: data,</span><br><span class=\"line\">  title: <span class=\"string\">'我是標題'</span>,</span><br><span class=\"line\">  bark: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'bark!!'</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 另一種 exports 寫法</span></span><br><span class=\"line\"><span class=\"comment\">// exports.data = 2;</span></span><br><span class=\"line\"><span class=\"comment\">// exports.title = '我是標題';</span></span><br><span class=\"line\"><span class=\"comment\">// exports.bark = function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return 'bark!!';</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;;</span></span><br></pre></td></tr></table></figure><p>使用 <code>module.exports</code> 就代表要輸出一個物件模組，內容就跟撰寫 JS 物件是相同的，可以是 <code>物件</code>、<code>陣列</code>、<code>字串</code>、<code>函式</code>等等。<br>若要在其他支 js 引入的話，則宣告一個變數並且 <code>require(&#39;引入檔案的路徑&#39;)</code> ，這樣就能使用該檔案的內容了<br>參照以上範例，並在 <code>CMD</code> 執行 <code>node app.js</code> 就會看到效果囉!!<br><img src=\"https://i.imgur.com/D85PcD2.png\" alt=\"模組開發\"></p>","categories":["Nodejs"],"tags":["JavaScript","Nodejs"]},{"title":"jQuery - scrollTop 與 offset 運用","url":"/jQuery/20201210/1559860955/","content":"<h2 id=\"語法介紹\"><a href=\"#語法介紹\" class=\"headerlink\" title=\"語法介紹\"></a>語法介紹</h2><h3 id=\"animate\"><a href=\"#animate\" class=\"headerlink\" title=\"animate()\"></a>animate()</h3><p><code>.animate( properties [, duration ] [, easing ] [, complete ] )</code></p><ul><li><p>properties: Object 型別，屬性可以設定 CSS 或者是 滾動參數 scrollTop</p></li><li><p>duration: 為動畫完成的速度，以毫秒為單位</p></li><li><p>easing: 設定動畫速度函數，有 <code>swing</code>、<code>linear</code> 可選</p></li><li><p>complete:動畫執行完後要執行的函式</p></li></ul><h3 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset()\"></a>offset()</h3><p>回傳該 DOM 元素頂部與 document 的距離，與 position() 的關係有些差異。</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> x = $(selector).offset().left;</span><br><span class=\"line\"><span class=\"keyword\">const</span> y = $(selector).offset().top;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 設定 DOM 元素新的座標偏移 */</span></span><br><span class=\"line\">$(selector).offset(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index,oldoffset</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newPos = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  newPos.left = oldoffset.left + <span class=\"number\">50</span>;</span><br><span class=\"line\">  newPos.top = oldoffset.top + <span class=\"number\">50</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newPos;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"參考範例\"><a href=\"#參考範例\" class=\"headerlink\" title=\"參考範例\"></a>參考範例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* go top 的按鈕 */</span></span><br><span class=\"line\">$(<span class=\"string\">'.go_top'</span>).on(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  $(<span class=\"string\">'html, body'</span>).animate(&#123;</span><br><span class=\"line\">    scrollTop: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;, <span class=\"number\">700</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'navbar'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;<span class=\"comment\">/* 監聽 navbar 下的每個 a */</span></span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> target_href = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'href'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> linkScroll = $(target_href).offset().top;</span><br><span class=\"line\">  $(<span class=\"string\">'html,body'</span>).stop().animate(&#123;</span><br><span class=\"line\">      scrollTop: linkScroll,</span><br><span class=\"line\">  &#125;, <span class=\"number\">700</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://bonze.tw/jquery-%E5%8F%96%E5%BE%97-dom-%E5%85%83%E7%B4%A0%E5%BA%A7%E6%A8%99-offset-%E8%88%87-position/\" target=\"_blank\" rel=\"noopener\">jQuery 取得Dom 元素座標- Offset() 與Position() | 一群棒子</a><br><a href=\"https://medium.com/chloelo925/jquery-scrolltop-offset-%E9%81%8B%E7%94%A8-f7bbe93b77c4\" target=\"_blank\" rel=\"noopener\">JQuery — scrollTop, offset 運用</a></p>","categories":["jQuery"],"tags":["JavaScript","jQuery"]},{"title":"刪除 node_modules","url":"/npm/20190909/3654937943/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>會想刪除 node_modules 的情況有很多種，有時單純是強迫症發作(我)，在部屬之前一定會清乾淨重裝。但總是為了刪除資料而費了不少時間，本篇就來教大家該怎麼一個指令刪除 node_modules 。</p><h2 id=\"安裝-rimraf-刪除套件\"><a href=\"#安裝-rimraf-刪除套件\" class=\"headerlink\" title=\"安裝 rimraf 刪除套件\"></a>安裝 rimraf 刪除套件</h2><p>開啟 CMD (終端機)，執行 <code>npm install rimraf -g</code></p><h2 id=\"一鍵刪除\"><a href=\"#一鍵刪除\" class=\"headerlink\" title=\"一鍵刪除\"></a>一鍵刪除</h2><p>使用 VSCode or CMD 到你想要刪除 node_modules 的專案內，執行以下刪除指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rimraf node_modules</span><br></pre></td></tr></table></figure><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>這才是效率嘛!!</p>","categories":["NPM"],"tags":["NPM"]},{"title":"建立 Nuxt 專案","url":"/vue/20190916/3554098363/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>原先使用 Vue-cli 開發的 SPA 網站會因為內容都是由 JS 動態生成，所以對於爬蟲、搜尋引擎而言都是找不到資料的。就如下圖所見，連個 <code>title</code> 都不會有，是要怎麼讓搜尋引擎爬呢?<br>而 Nuxt 可以想像成在 SPA 渲染頁面前先在 Web 伺服器產生內容，最後在一併渲染，這樣就能夠讓爬蟲找到我們的網站囉!!<br><img src=\"https://i.imgur.com/FE9aQT7.png\" alt=\"SPA\"></p><h2 id=\"安裝-Nuxt\"><a href=\"#安裝-Nuxt\" class=\"headerlink\" title=\"安裝 Nuxt\"></a>安裝 Nuxt</h2><p>首先到專案資料夾目錄下，輸入安裝指令<br><a href=\"https://zh.nuxtjs.org/guide/installation\" target=\"_blank\" rel=\"noopener\">Nuxt</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npx create-nuxt-app</span><br></pre></td></tr></table></figure><p>安裝過程中有提供多種 UI 框架，可依自己喜好選擇，本身習慣自己引入 BS ，這裡就選 <code>None</code><br><img src=\"https://i.imgur.com/RqFrO0u.png\" alt=\"UI\"><br>之後會問你要不要選擇伺服器，一樣選 <code>None</code> 預設的就可以了。<br><img src=\"https://i.imgur.com/vZ9VhvM.png\" alt=\"Server\"><br>最後幾個會問要不要加入 <code>modules</code> 、 <code>linting</code> 、 <code>test</code> 以及最重要的 <code>mode</code>，直接附上我的配置<br><img src=\"https://i.imgur.com/DMOZGMm.png\" alt=\"\"></p><h2 id=\"執行-Nuxt\"><a href=\"#執行-Nuxt\" class=\"headerlink\" title=\"執行 Nuxt\"></a>執行 Nuxt</h2><p>安裝完成後輸入</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure><p>預設是 <code>localhost:3000</code>，有看到 Nuxt 開啟的話代表已經建立成功囉!!<br><img src=\"https://i.imgur.com/s1bEesk.png\" alt=\"Nuxt\"><br>這時我們在開啟 <code>檢視原始碼</code> 會看到與最上方第一張圖的 <code>檢視原始碼</code> 不太一樣，多了一些 SEO 的配置，像是 <code>title</code> 、 <code>description</code> 等等，後續會教各位小夥伴如何設定這些 <code>meta</code> 值。<br><img src=\"https://i.imgur.com/5jvRn7K.png\" alt=\"\"></p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>其實在 SPA 開發後會需要 SEO 這點會顯得有些矛盾，為什麼這樣說哩?<br>SPA 適合運用在大型的網站應用程式，而應用程式是不會在意 SEO 的，著重的是效能與使用者體驗。<br>而 SEO 其實是很深的議題，但卻有很大的誤解，對於行銷層面來說，是必須先有流量才會關注 SEO ，而不是花大筆成本規劃 SEO 卻沒有流量。<br>註: 花大成本 =&gt; 上頭說要加 SEO ，卻搞死工程師!! 成本其實是來自於工程師，對上面來說不就是一句話而已Orz</p>","categories":["Vue"],"tags":["Vue"]},{"title":"Node.js - Path 模組應用","url":"/nodejs/20191225/2257922785/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由於模組化的關係，引入時必須指定路徑才能正確抓到相關檔案，這時 <code>Path</code> 模組提供了一些方法給我們使用，以下就來介紹幾種路徑使用方法吧!</p><h2 id=\"相關範例\"><a href=\"#相關範例\" class=\"headerlink\" title=\"相關範例\"></a>相關範例</h2><p>直接附上範例程式碼及資料夾結構<br><img src=\"https://i.imgur.com/WT8Vmhc.png\" alt=\"path資料夾結構\"></p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 抓目錄路徑</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.dirname(<span class=\"string\">'/xx/yy/zz.js'</span>)); <span class=\"comment\">// /xx/yy</span></span><br><span class=\"line\"><span class=\"comment\">// 路徑合併</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.join(__dirname, <span class=\"string\">'/xx'</span>)); <span class=\"comment\">// C:\\Users\\gping\\Downloads\\nodejs_practice\\node_path_demo\\xx</span></span><br><span class=\"line\"><span class=\"comment\">// 抓檔名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.basename(<span class=\"string\">'/xx/yy/zz.js'</span>)); <span class=\"comment\">// zz.js</span></span><br><span class=\"line\"><span class=\"comment\">// 抓副檔名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.extname(<span class=\"string\">'/xx/yy/zz.js'</span>)); <span class=\"comment\">// .js</span></span><br><span class=\"line\"><span class=\"comment\">// 分析路徑</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.parse(<span class=\"string\">'/xx/yy/zz.js'</span>)); <span class=\"comment\">// &#123; root: '/', dir: '/xx/yy', base: 'zz.js', ext: '.js', name: 'zz' &#125;</span></span><br></pre></td></tr></table></figure><p>執行 <code>node app.js</code> 有看到效果就成功囉!!</p>","categories":["Nodejs"],"tags":["JavaScript","Nodejs"]},{"title":"NPM - 緩存指令","url":"/npm/20190909/3597104584/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有時當專案在切換時，重新啟動 <code>npm run dev</code> or <code>npm run serve</code> 時會出現一些錯誤，第一時間點我會先來清除緩存來解決，不行的話那就繼續看是不是哪邊又出現問題，不過大多都是緩存沒清呢!!</p><h2 id=\"NPM-緩存命令\"><a href=\"#NPM-緩存命令\" class=\"headerlink\" title=\"NPM 緩存命令\"></a>NPM 緩存命令</h2><p>先來看看一般情況下 npm 的相關路徑<br><code>C:\\Users\\使用者\\AppData\\Roaming\\npm</code> =&gt; 這裡會放全域安裝的套件<br><code>C:\\Users\\gping\\AppData\\Roaming\\npm-cache</code> =&gt; npm 快取資訊，待會要清除的資料<br>開啟 CMD 終端機，輸入清除緩存指令<br><code>npm cache verify</code><br>接下來，重新編譯你的專案吧!!</p>","categories":["NPM"],"tags":["NPM"]},{"title":"Nuxt 中加入 axios","url":"/vue/20190918/2180598570/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>串接資料從最早的 XHR 到 jQuery 的 <code>$.ajax()</code> 在到現在最火的 axios，不外乎都是為了更有效的解決開發問題，今天就帶著大家在 Nuxt 中加入 Axios 吧!</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>在專案目錄下輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios vue-axios -S</span><br></pre></td></tr></table></figure><p>在 <code>plugins</code> 資料夾新增 <code>axios.js</code> 檔案，加入以下程式碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import axios from &#39;axios&#39;</span><br><span class=\"line\">import VueAxios from &#39;vue-axios&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><h2 id=\"配置設定檔\"><a href=\"#配置設定檔\" class=\"headerlink\" title=\"配置設定檔\"></a>配置設定檔</h2><p>來到 <code>nuxt.config.js</code> 搜尋 <code>plugins</code> 將 <code>axios.js</code> 加入配置<br><img src=\"https://i.imgur.com/IMEbu6Q.png\" alt=\"\"></p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>在 <code>index.vue</code> 當中來取得資料，參考以下範例<br><a href=\"https://randomuser.me\" target=\"_blank\" rel=\"noopener\">RandomAPI</a><br><img src=\"https://i.imgur.com/XNfWLMo.png\" alt=\"\"><br>執行 <code>npm run dev</code> ，查看 console 是否有正確拿到資料<br><img src=\"https://i.imgur.com/aa7wNZ0.png\" alt=\"\"></p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>看到有資料是不是很興奮呢!!趕快在 Nuxt 加入 Axios 吧!!</p>","categories":["Vue"],"tags":["Vue"]},{"title":"Nuxt 加入 JSON-LD 結構化資料","url":"/vue/20191024/2360505463/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一切都是為了站上搜尋排行榜的龍頭，反正 SEO 的前言已經懶的想了@@<br>參考資料:<br><a href=\"https://developers.google.com/search/docs/data-types/product\" target=\"_blank\" rel=\"noopener\">google 說明</a><br><a href=\"https://schema.org/\" target=\"_blank\" rel=\"noopener\">schema.org</a> : 共用詞彙庫<br><a href=\"https://search.google.com/structured-data/testing-tool/u/0/\" target=\"_blank\" rel=\"noopener\">Structured Data Testing Tool</a> : 測試網頁結構</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p><a href=\"https://github.com/ymmooot/nuxt-jsonld\" target=\"_blank\" rel=\"noopener\">nuxt-jsonld</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nuxt-jsonld</span><br></pre></td></tr></table></figure><p>在 <code>plugins</code> 底下新增一個 <code>jsonld.js</code> 檔案，並引入套件</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;;</span><br><span class=\"line\">import NuxtJsonld from &#39;nuxt-jsonld&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(NuxtJsonld);</span><br></pre></td></tr></table></figure><h2 id=\"配置設定檔\"><a href=\"#配置設定檔\" class=\"headerlink\" title=\"配置設定檔\"></a>配置設定檔</h2><p>在 <code>nuxt.conig.js</code> 的 <code>plugins</code> 加入上一步建立的 <code>jsonld.js</code> 檔</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      src: &#39;@&#x2F;plugins&#x2F;jsonld.js&#39;,</span><br><span class=\"line\">      ssr: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"新增-JSON-LD-檔案\"><a href=\"#新增-JSON-LD-檔案\" class=\"headerlink\" title=\"新增 JSON-LD 檔案\"></a>新增 JSON-LD 檔案</h2><p>在 <code>static</code> 中建立 <code>jsonld.json</code> 內容要搭配 <a href=\"https://schema.org/\" target=\"_blank\" rel=\"noopener\">schema.org</a> 來寫，看個幾遍就應該可以知道該怎麼撰寫網站的 JSON-LD 囉!!<br>參考範例:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;organization&quot;: &#123;</span><br><span class=\"line\">    &quot;@context&quot;: &quot;http:&#x2F;&#x2F;schema.org&quot;,</span><br><span class=\"line\">    &quot;@id&quot;: &quot;公司網址&#x2F;#organization&quot;,</span><br><span class=\"line\">    &quot;@type&quot;: &quot;Organization&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;公司名稱&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;公司描述&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;公司網址&quot;,</span><br><span class=\"line\">    &quot;contactPoint&quot;: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;@type&quot;: &quot;ContactPoint&quot;,</span><br><span class=\"line\">        &quot;telephone&quot;: &quot;+886-02-xxxx-xxxx&quot;,</span><br><span class=\"line\">        &quot;areaServed&quot;: &quot;TW&quot;,</span><br><span class=\"line\">        &quot;contactType&quot;: &quot;Customer Service&quot;,</span><br><span class=\"line\">        &quot;availableLanguage&quot;: &quot;Chinese&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;address&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;PostalAddress&quot;,</span><br><span class=\"line\">      &quot;streetAddress&quot;: &quot;公司地址&quot;,</span><br><span class=\"line\">      &quot;addressLocality&quot;: &quot;台北市xx區&quot;,</span><br><span class=\"line\">      &quot;addressRegion&quot;: &quot;台灣&quot;,</span><br><span class=\"line\">      &quot;addressCountry&quot;: &quot;TW&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;webpage&quot;: &#123;</span><br><span class=\"line\">    &quot;@context&quot;: &quot;http:&#x2F;&#x2F;schema.org&quot;,</span><br><span class=\"line\">    &quot;@id&quot;: &quot;公司網址&#x2F;#webpage&quot;,</span><br><span class=\"line\">    &quot;@type&quot;: &quot;WebPage&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;頁面名稱&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;頁面敘述&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;網址&quot;,</span><br><span class=\"line\">    &quot;publisher&quot;: &#123;</span><br><span class=\"line\">      &quot;@type&quot;: &quot;Organization&quot;,</span><br><span class=\"line\">      &quot;name&quot;: &quot;xxx公司&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;website&quot;: &#123;</span><br><span class=\"line\">    &quot;@context&quot;: &quot;http:&#x2F;&#x2F;schema.org&quot;,</span><br><span class=\"line\">    &quot;@id&quot;: &quot;公司網址&#x2F;#website&quot;,</span><br><span class=\"line\">    &quot;@type&quot;: &quot;WebSite&quot;,</span><br><span class=\"line\">    &quot;name&quot;: &quot;頁面名稱&quot;,</span><br><span class=\"line\">    &quot;description&quot;: &quot;頁面敘述&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;公司網址&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"各頁面引入\"><a href=\"#各頁面引入\" class=\"headerlink\" title=\"各頁面引入\"></a>各頁面引入</h2><ol><li>在 .vue 檔中 <code>import</code> jsonLd<br>註: eslint 可能會報錯，把 rules 加入 <code>&#39;import/no-unresolved&#39;: &#39;off&#39;</code> 就可以解決囉，雖然不是很優雅。</li><li>使用 <code>asyncData</code> 取出 JSONLD 資料，必須是 return 物件喔。</li><li>使用 jsonld(){} 來製作該頁專屬的 JSONLD 資料，ex: 產品詳細頁的麵包屑就需要這麼做，這邊要 return 陣列，才不會結構出錯。<br><img src=\"https://i.imgur.com/3r20Rtb.png\" alt=\"JSONLD\"></li></ol><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>執行 <code>npm run dev</code> 後，檢視原始碼就可以看到以下畫面囉!!<br><img src=\"https://i.imgur.com/W2GjE71.png\" alt=\"JSONLD\"><br>也可以將 JSONLD 的 <code>script</code> 段落複製下來，貼到 <a href=\"https://search.google.com/structured-data/testing-tool/u/0/\" target=\"_blank\" rel=\"noopener\">Structured Data Testing Tool</a> ，就可以看到結構是否有誤或是缺少一些屬性囉!!</p>","categories":["Vue"],"tags":["Vue","SEO"]},{"title":"Nuxt 部署策略 - 部署 Google Compute Engine","url":"/vue/20210205/868523524/","content":"<h2 id=\"建立-Google-Compute-Engine-環境\"><a href=\"#建立-Google-Compute-Engine-環境\" class=\"headerlink\" title=\"建立 Google Compute Engine 環境\"></a>建立 Google Compute Engine 環境</h2><ul><li><p>建立 VM 執行個體<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2F%E5%BB%BA%E7%AB%8B%20GCE.jpg?alt=media&token=651a1011-d3eb-4797-99ac-78001a75a1bb\" alt=\"建立 VM 執行個體\"></p></li><li><p>執行個體設定<br>需要設定 <code>cpu</code>、<code>ram</code> 以及這台虛擬主機的<code>作業系統</code><br>請參考底下流程:<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2FVM%20%E8%A6%8F%E6%A0%BC%E8%A8%AD%E5%AE%9A.JPG?alt=media&token=c3fbc10c-25e9-43cc-b14a-3603855a9d94\" alt=\"VM 規格設定\"></p></li></ul><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2F%E8%A8%AD%E5%AE%9A%E9%96%8B%E6%A9%9F%E7%A1%AC%E7%A2%9F.JPG?alt=media&token=054b476e-9ed7-4b99-bc5a-4d92aa52394b\" alt=\"設定開機硬碟\"></p><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2F%E8%A8%AD%E5%AE%9A%E9%96%8B%E6%A9%9F%E7%A1%AC%E7%A2%9F%E7%B4%B0%E7%AF%80.JPG?alt=media&token=03b1a78f-fbb2-4f8c-9d77-1fc951bd28f0\" alt=\"設定開機硬碟細節\"></p><h2 id=\"虛擬主機-linux-設定\"><a href=\"#虛擬主機-linux-設定\" class=\"headerlink\" title=\"虛擬主機 linux 設定\"></a>虛擬主機 linux 設定</h2><p>選擇 <code>在瀏覽器視窗中開啟</code>，稍等一下後就會進入虛擬主機的 linux 介面<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2F%E9%96%8B%E5%95%9F%20linux%20%E4%BB%8B%E9%9D%A2.JPG?alt=media&token=454cd67a-e97e-40fa-9386-b66db221c9c7\" alt=\"linux 介面\"></p><h2 id=\"專案安裝-Nuxt-架站套件\"><a href=\"#專案安裝-Nuxt-架站套件\" class=\"headerlink\" title=\"專案安裝 Nuxt 架站套件\"></a>專案安裝 Nuxt 架站套件</h2><p>需要先在本機端安裝 <code>pm2</code>、<code>nuxt-start</code>，</p><ul><li>pm2<br>直接在全域安裝即可</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g</span><br></pre></td></tr></table></figure><p>接著要初始化 <code>pm2</code> 執行文件</p><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">pm2 init</span><br></pre></td></tr></table></figure><p>接著會產生 <code>ecosystem.config.js</code> 的文件，也會有預設的內容<br>不過可以先使用以下範例就好，其他先註解沒關係，因為都是在優化主機而已</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  apps: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'nuxt-sample'</span>,</span><br><span class=\"line\">      script: <span class=\"string\">'./node_modules/nuxt-start/bin/nuxt-start.js'</span>,</span><br><span class=\"line\">      instances: <span class=\"string\">'max'</span>, <span class=\"comment\">/* 負載平衡模式下的 CPU 數量 */</span></span><br><span class=\"line\">      exec_mode: <span class=\"string\">'cluster'</span>, <span class=\"comment\">/* CPU 負載平衡模式 */</span></span><br><span class=\"line\">      max_memory_restart: <span class=\"string\">'1G'</span>, <span class=\"comment\">/* 緩存了多少記憶體重新整理 */</span></span><br><span class=\"line\">      port: <span class=\"number\">3001</span>, <span class=\"comment\">/* 指定伺服器上的 port */</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>nuxt-start<br>安裝在專案內</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nuxt-start</span><br></pre></td></tr></table></figure><h2 id=\"本機端測試生產環境\"><a href=\"#本機端測試生產環境\" class=\"headerlink\" title=\"本機端測試生產環境\"></a>本機端測試生產環境</h2><p>上面步驟設定完後執行以下指令，讓本機端當做一台伺服器開啟網站</p><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pm2 start</span><br></pre></td></tr></table></figure><p>接著執行 <code>http://localhost:3001/</code> 若有正確執行 nuxt 專案，代表已經在本機端測試成功<br>接下來就是要在 GCE 中也安裝這些內容，並執行 <code>pm2 start</code></p><p><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2Fpm2%20start.JPG?alt=media&token=8daf9384-dcf0-4874-89ca-f83cff50b1f5\" alt=\"pm2 start\"></p><h2 id=\"VM-安裝套件\"><a href=\"#VM-安裝套件\" class=\"headerlink\" title=\"VM 安裝套件\"></a>VM 安裝套件</h2><p>首先進入到 vm 的 linux 介面，安裝 <code>node.js、pm2、nginx、git</code></p><ul><li>安裝 node.js</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -qO- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nvm-sh&#x2F;nvm&#x2F;v0.37.2&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>安裝與專案相同的 node 版本</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install v10.15.0</span><br></pre></td></tr></table></figure><ul><li>安裝 pm2</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure><ul><li>安裝 git</li></ul><p>先更新套件指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure><p>再執行安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install git</span><br></pre></td></tr></table></figure><ul><li>安裝 nginx</li></ul><p>先更新套件指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure><p>再執行安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install nginx</span><br></pre></td></tr></table></figure><h2 id=\"linux-取得專案\"><a href=\"#linux-取得專案\" class=\"headerlink\" title=\"linux 取得專案\"></a>linux 取得專案</h2><p>使用 Git 將專案拉到虛擬主機上，接著就依序執行部署指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install</span><br><span class=\"line\">npm run build</span><br><span class=\"line\">pm2 start</span><br></pre></td></tr></table></figure><p>沒出錯的話就表示已經在 vm 上執行成功</p><h2 id=\"DNS-與-IP-設定\"><a href=\"#DNS-與-IP-設定\" class=\"headerlink\" title=\"DNS 與 IP 設定\"></a>DNS 與 IP 設定</h2><p>需要將 GCE 的 IP 改成靜態<br><img src=\"https://firebasestorage.googleapis.com/v0/b/cloud-f2e-blog.appspot.com/o/Nuxt%20%E9%83%A8%E7%BD%B2%E7%AD%96%E7%95%A5%20-%20%E9%83%A8%E7%BD%B2%20Google%20Compute%20Engine%20%2FIP%20%E8%A8%AD%E5%AE%9A.JPG?alt=media&token=44ef472c-e898-408e-865c-849fc976fce1\" alt=\"IP 設定\"></p><p>接著到<code>網域註冊商將 DNS 指向 靜態IP</code>，這部分可以直接請負責人員設定或是自己去買一個來玩玩</p><h2 id=\"nginx-設定\"><a href=\"#nginx-設定\" class=\"headerlink\" title=\"nginx 設定\"></a>nginx 設定</h2><p>在 linux 中輸入以下指令:<br>&lt;註&gt; <code>yourdomain</code> 請填寫是要使用的網域</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;etc&#x2F;nginx</span><br><span class=\"line\">cd conf.d</span><br><span class=\"line\">sudo nano yourdomain.conf</span><br></pre></td></tr></table></figure><p>執行完後會出現一個編輯器，複製以下範例即可</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name yourdomain.com www.yourdomain.com;</span><br><span class=\"line\">  location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;localhost:3001; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>接下來重新整理 nginx</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>最後在本機上打開網址 <code>yourdomain.com</code> 應該就會看到 Nuxt 專案內容了。</p><h2 id=\"Https-設定\"><a href=\"#Https-設定\" class=\"headerlink\" title=\"Https 設定\"></a>Https 設定</h2><p>使用 <code>SSL For Free</code> 服務，取得免費 SSL 憑證，憑證發行機構是 <code>Let&#39;s Encrypt</code><br>另外，憑證每三個月會過期，需要取得新憑證<br>而 linux 透過 <code>certbot</code> 來自動更新憑證</p><p>安裝流程:</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install software-properties-common &#x2F;&#x2F; 載入 certbot 的 ppa</span><br><span class=\"line\">sudo add-apt-repository ppa:certbot&#x2F;certbot</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python-certbot-nginx</span><br><span class=\"line\"></span><br><span class=\"line\">sudo certbot --nginx &#x2F;&#x2F; 產生憑證</span><br><span class=\"line\">sudo nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\">sudo certbot renew --dry-run &#x2F;&#x2F; 檢查憑證續約狀況</span><br><span class=\"line\">sudo certbot renew &#x2F;&#x2F; 執行憑證續約動作</span><br></pre></td></tr></table></figure><h2 id=\"手動完整部署流程\"><a href=\"#手動完整部署流程\" class=\"headerlink\" title=\"手動完整部署流程\"></a>手動完整部署流程</h2><ol><li>本地端開發 develop</li><li>commit</li><li>master merge develop</li><li>登入 linux 主機</li><li>cd 專案</li><li>git pull origin master</li><li>npm run build</li><li>pm2 reload id</li></ol><p>執行上述步驟，Nuxt 專案就會更新完成囉。</p><h2 id=\"指令整理\"><a href=\"#指令整理\" class=\"headerlink\" title=\"指令整理\"></a>指令整理</h2><ul><li>pm2</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pm2 start &#x2F;&#x2F; 啟動 pm2 → ecosystem.config.js</span><br><span class=\"line\">pm2 list  &#x2F;&#x2F; 查看目前有架多少站台</span><br><span class=\"line\">pm2 delete 3 &#x2F;&#x2F; 刪除id為3的站台</span><br><span class=\"line\">pm2 delete all   &#x2F;&#x2F; 刪除所有站台 </span><br><span class=\"line\">pm2 reload all  &#x2F;&#x2F; 重新整理所有站台</span><br><span class=\"line\">pm2 save &#x2F;&#x2F; 儲存目前的pm2 站台，重開機後會還原</span><br><span class=\"line\">pm2 log &#x2F;&#x2F; pm2出錯時擬難排除</span><br></pre></td></tr></table></figure><ul><li>nginx</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx  &#x2F;&#x2F; 啟動 nginx 伺服器 (預設裝好己啟動)</span><br><span class=\"line\">sudo nginx -s reload &#x2F;&#x2F; 重整nginx 伺服器</span><br><span class=\"line\">sudo nginx -s stop &#x2F;&#x2F; 快速停止伺服器</span><br><span class=\"line\">cd &#x2F;etc&#x2F;nginx &#x2F;&#x2F; nginx 位置</span><br><span class=\"line\">cd &#x2F;var&#x2F;log&#x2F;nginx &#x2F;&#x2F; nginx log 檔位置</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://linuxize.com/post/how-to-install-git-on-ubuntu-18-04/\" target=\"_blank\" rel=\"noopener\">How to Install Git on Ubuntu 18.04</a><br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-18-04\" target=\"_blank\" rel=\"noopener\">How To Install Nginx on Ubuntu 18.04</a><br><a href=\"https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/\" target=\"_blank\" rel=\"noopener\">PM2 官網</a><br><a href=\"https://kknews.cc/code/zmxjx3.html\" target=\"_blank\" rel=\"noopener\">5個提高Node.js應用性能的技巧</a><br><a href=\"https://zh.nuxtjs.org/docs/2.x/deployment/nginx-proxy/\" target=\"_blank\" rel=\"noopener\">Using NGINX as a reverse proxy</a><br><a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"noopener\">letsencrypt</a><br><a href=\"https://www.sslforfree.com/\" target=\"_blank\" rel=\"noopener\">SSL For Free</a><br><a href=\"https://certbot.eff.org/\" target=\"_blank\" rel=\"noopener\">certbot</a></p>","categories":["Vue"],"tags":["JavaScript","Nuxt"]},{"title":"Nuxt 部署策略 - 部署 Google App Engine","url":"/vue/20210205/3352502083/","content":"<h2 id=\"app-yaml-配置\"><a href=\"#app-yaml-配置\" class=\"headerlink\" title=\"app.yaml 配置\"></a>app.yaml 配置</h2><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 標準環境</span></span><br><span class=\"line\"><span class=\"attr\">runtime:</span> <span class=\"string\">nodejs10</span></span><br><span class=\"line\"><span class=\"comment\"># 彈性環境</span></span><br><span class=\"line\"><span class=\"comment\"># runtime: nodejs</span></span><br><span class=\"line\"><span class=\"comment\"># env: flex</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># manual_scaling:</span></span><br><span class=\"line\"><span class=\"comment\">#   instances: 1</span></span><br><span class=\"line\"><span class=\"comment\"># resources:</span></span><br><span class=\"line\"><span class=\"comment\">#   cpu: 1</span></span><br><span class=\"line\"><span class=\"comment\">#   memory_gb: 1</span></span><br><span class=\"line\"><span class=\"comment\">#   disk_size_gb: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">/_nuxt</span></span><br><span class=\"line\">    <span class=\"attr\">static_dir:</span> <span class=\"string\">.nuxt/dist/client</span></span><br><span class=\"line\">    <span class=\"attr\">secure:</span> <span class=\"string\">always</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">/(.*\\.(gif|png|jpg|ico|txt))$</span></span><br><span class=\"line\">    <span class=\"attr\">static_files:</span> <span class=\"string\">static/\\1</span></span><br><span class=\"line\">    <span class=\"attr\">upload:</span> <span class=\"string\">static/.*\\.(gif|png|jpg|ico|txt)$</span></span><br><span class=\"line\">    <span class=\"attr\">secure:</span> <span class=\"string\">always</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">/.*</span></span><br><span class=\"line\">    <span class=\"attr\">script:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">    <span class=\"attr\">secure:</span> <span class=\"string\">always</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env_variables:</span></span><br><span class=\"line\">  <span class=\"attr\">HOST:</span> <span class=\"string\">'0.0.0.0'</span></span><br><span class=\"line\">  <span class=\"attr\">NODE_ENV:</span> <span class=\"string\">'production'</span></span><br><span class=\"line\">  <span class=\"attr\">API_PATH:</span> <span class=\"string\">https://xxx.xxx.xxx</span></span><br></pre></td></tr></table></figure><ul><li>resources: 可以調整主機資源，可以部署不同資源的版本，當流量過大時，可在 <code>GAE</code> 後台直接切換版本，馬上做出應對。</li><li>runtime: 此處寫法與標準設定不同，請注意。</li><li>env: 彈性設定必須寫 flex。</li><li>env_variables: 若有相關變數必須在此設定。</li></ul><h2 id=\"package-json-設定\"><a href=\"#package-json-設定\" class=\"headerlink\" title=\"package.json 設定\"></a>package.json 設定</h2><p>將專案的 package.json 調整成以下範例，<br>必須要寫 <code>npm run start</code> 的指令，因為這是 GAE 部署時會執行的</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"&gt;=10.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=dev nuxt\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prod\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production nuxt\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"nuxt build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"nuxt start\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"部署-GAE\"><a href=\"#部署-GAE\" class=\"headerlink\" title=\"部署 GAE\"></a>部署 GAE</h2><p>這邊首先要安裝 <code>Google Cloud SDK</code>，這其實就類似 <code>CMD</code>，讓我們可以輸入部署指令用的。<br>完成後執行程式，並開始以下部署步驟:</p><ol><li>移到專案資料夾</li></ol><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> 專案資料夾路徑</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>初始化 <code>GAE</code></li></ol><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcloud init</span><br></pre></td></tr></table></figure><p>此時會詢問一些問題，像是要用哪個帳號、連接的伺服器地區(台灣、香港)，最後是要部署到哪一份專案的 <code>app engine</code>。</p><ol start=\"3\"><li>執行部署指令</li></ol><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcloud app deploy app.yaml</span><br></pre></td></tr></table></figure><p>輸入後有可能會出現 <code>python</code> 的錯誤代碼，不過沒關係，繼續讓他跑程式，若是沒有出現 <code>ERROR</code> 等字樣，並且完成所有程序，就代表已經部署至 <code>GAE</code> 囉。</p><h2 id=\"結尾-amp-驗證\"><a href=\"#結尾-amp-驗證\" class=\"headerlink\" title=\"結尾&amp;驗證\"></a>結尾&amp;驗證</h2><p>回到 <code>GCP</code> 後台選好專案，來到 <code>GAE</code>的管理頁面，部署完成後會給一組網址，像是<code>www-專案名稱.appspot.com</code>，之後就可以將 <code>DNS</code> 全部轉到此處。<br>這樣用戶就可以正常執行 <code>Nuxt</code> 網站囉。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://syj0905.github.io/vue/20200419/4265981960/\">Vue - 部署至 Google App Engine</a></p>","categories":["Vue"],"tags":["Vue","SEO","Nuxt"]},{"title":"Nuxt 中加入 Bootstrap","url":"/vue/20190916/2513304124/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>與 <code>Vue-cli</code> 加入 BS 稍有不同，由於 <code>Nuxt</code> 本身是沒有所謂的 <code>App.vue</code> 當作進入點，所以會在 <code>nuxt.config.js</code> 做些設定。</p><h2 id=\"安裝-Bootstrap-及-相依套件\"><a href=\"#安裝-Bootstrap-及-相依套件\" class=\"headerlink\" title=\"安裝 Bootstrap 及 相依套件\"></a>安裝 Bootstrap 及 相依套件</h2><p>在專案目錄下輸入安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install bootstrap jquery popper.js webpack -S</span><br></pre></td></tr></table></figure><p>另外，還需要在開發模式安裝 <code>sass-loader</code> 、 <code>node-sass</code> ，這樣才不會報錯。</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install node-sass sass-loader -D</span><br></pre></td></tr></table></figure><h2 id=\"引入-Bootstrap-scss\"><a href=\"#引入-Bootstrap-scss\" class=\"headerlink\" title=\"引入 Bootstrap scss\"></a>引入 Bootstrap scss</h2><p>在 <code>assets</code> 底下新建一個 <code>scss</code> 資料夾，創建一個 <code>all.scss</code> 來當作所有 <code>scss</code> 的進入點。<br>並且新增一個 <code>vendors</code> 資料夾專門放置第三方資源。<br>有時我們會需要客製化 Bootstrap ，所以我會在創一個 <code>_bsvariables.scss</code> 來放置 Bootstrap 的變數，相關做法可以參考下圖方式。<br><img src=\"https://i.imgur.com/3ZCcUry.png\" alt=\"\"></p><h2 id=\"配置-CSS-設定檔\"><a href=\"#配置-CSS-設定檔\" class=\"headerlink\" title=\"配置 CSS 設定檔\"></a>配置 CSS 設定檔</h2><p>由於前面有提到 Nuxt 本身沒有 <code>App.vue</code> 可以當作進入點，所以會直接在設定檔做引入 scss 的設定。<br>來到 <code>nuxt.config.js</code> 搜尋 <code>Global CSS</code> 並修改配置</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">css: [</span><br><span class=\"line\">  &#39;@&#x2F;assets&#x2F;scss&#x2F;all.scss&#39;</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure><h2 id=\"引入-Bootstrap-JavaScript\"><a href=\"#引入-Bootstrap-JavaScript\" class=\"headerlink\" title=\"引入 Bootstrap JavaScript\"></a>引入 Bootstrap JavaScript</h2><p>在 Nuxt 中將第三方 JS 放在 <code>plgins</code> 內，並在設定檔中配置。<br>首先來到 <code>plugins</code> 資料夾，創建 <code>bootstrap.js</code>，加入以下代碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (process.client) &#123;</span><br><span class=\"line\">  require(&#39;bootstrap&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"配置-plugins-設定檔\"><a href=\"#配置-plugins-設定檔\" class=\"headerlink\" title=\"配置 plugins 設定檔\"></a>配置 plugins 設定檔</h2><p>來到 <code>nuxt.config.js</code> 最上方先加入 webpack(很重要!!)</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import webpack from &#39;webpack&#39;</span><br></pre></td></tr></table></figure><p>搜尋 <code>plugins</code> 將剛剛創建的 <code>bootstrap.js</code> 引入，以及在 <code>build</code> 加入設定<br><img src=\"https://i.imgur.com/cqsIxlz.png\" alt=\"\"></p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>回到 <code>index.vue</code> 中，這次我是使用 BS 內的 modal 彈窗做測試。<br>由於我有使用 eslint 的關係，在 <code>npm run dev</code> 會出現錯誤 <code>&#39;$&#39; is not defined no-undef</code>，<br>只需要在 <code>eslintre.js</code> 中關掉此項設定就能正常運作了。<br><img src=\"https://i.imgur.com/DIp1J41.png\" alt=\"\"></p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>按照以上步驟，應該就能夠使用 Bootstrap 的樣式以及互動功能，如果各位小夥伴有任何問題都能夠在下方留言，我會盡快回覆!!</p>","categories":["Vue"],"tags":["Vue"]},{"title":"Nuxt 加入 robots","url":"/vue/20191024/2898339199/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>robots.txt 是遵循機器人排除標準的純文字檔案，這個檔案包含一或多項規則，每項規則會分別禁止 (或允許) 特定檢索器存取網站中的某個檔案路徑。<br>參考資料:</p><ul><li><a href=\"https://support.google.com/webmasters/answer/6062596?hl=zh-Hant\" target=\"_blank\" rel=\"noopener\">google robors.txt 說明</a></li></ul><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p><a href=\"https://github.com/nuxt-community/robots-module\" target=\"_blank\" rel=\"noopener\">@nuxtjs/robots</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @nuxtjs&#x2F;robots</span><br></pre></td></tr></table></figure><h2 id=\"配置設定檔\"><a href=\"#配置設定檔\" class=\"headerlink\" title=\"配置設定檔\"></a>配置設定檔</h2><p>有關於 robots 的設定可以有很多寫法，像是 Object、 Array、Function，可以依據自己的需求做調整，下面附上範例段落。</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  modules: [</span><br><span class=\"line\">    &#39;@nuxtjs&#x2F;robots&#39;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  robots: &#123;</span><br><span class=\"line\">    UserAgent: &#39;*&#39;,</span><br><span class=\"line\">    Disallow: [</span><br><span class=\"line\">      &#39;&#x2F;xxx&#x2F;admin&#39;,</span><br><span class=\"line\">      &#39;&#x2F;xxx&#x2F;admin&#x2F;**&#39;,</span><br><span class=\"line\">      &#39;&#x2F;xxx&#x2F;create-order&#39;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    Sitemap: &#39;https:&#x2F;&#x2F;www.xxx.com.tw&#x2F;sitemap.xml&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>執行 <code>npm run dev</code> 後，開啟 <code>http://localhost:3000/robots.txt</code> 就可以看到 robots.txt 囉!!</p>","categories":["Vue"],"tags":["Vue","SEO"]},{"title":"Nuxt 中的驗證機制 requiresAuth","url":"/vue/20190923/708662254/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Vue-cli 中可以在 <code>router</code> 中直接設定 <code>meta.requiresAuth</code> ，並且在進入點 <code>main.js</code> 中撰寫驗證代碼。<br>而在 Nuxt 則是使用 <code>middleware</code> 當作中介點，可以照不同頁面選擇要用哪個中介點，那該如何設定 <code>requiresAuth</code> 呢?<br>肯定有小夥伴從 Vue-cli 轉移至 Nuxt 會有這疑問，跟著我一起來了解吧!</p><h2 id=\"設定導航守衛\"><a href=\"#設定導航守衛\" class=\"headerlink\" title=\"設定導航守衛\"></a>設定導航守衛</h2><p>首先在 <code>middleware</code> 資料夾底下建立一個 routerAuth.js<br><img src=\"https://i.imgur.com/qERUcRi.png\" alt=\"\"><br>接著我們需要新增一個頁面，在 <code>pages</code> 底下新增一個 <code>user-profile.vue</code> 來當作測試。<br>必須在需要驗證的頁面加入剛剛建的 routerAuth.js<br><img src=\"https://i.imgur.com/LYP2b6e.png\" alt=\"\"></p><h2 id=\"驗證步驟\"><a href=\"#驗證步驟\" class=\"headerlink\" title=\"驗證步驟\"></a>驗證步驟</h2><p>在 <code>index.vue</code> 中新增連結，並導入到 <code>user-profile.vue</code><br><img src=\"https://i.imgur.com/hlSLdfG.png\" alt=\"\"><br>接著在 <code>index.vue</code> 點擊 會員中心 會來到 <code>/user-profile.vue</code> ，並且可以在 console 看到 meta 中的 <code>requiresAuth</code><br><img src=\"https://i.imgur.com/SJct4dh.png\" alt=\"\"></p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>到目前為止，已經可以正確拿到 <code>requiresAuth</code> 了，那麼接下來就來實作類似登入機制的步驟。<br>在 index.vue 有寫登入函式，使用 localstorage 存取資料。<br>這邊要注意的一點是，必須要加入 <code>process.client</code> 的判斷，不然會在 <code>/user-profile</code> F5 後出現 <code>localstorage is not defined</code> 等錯誤。<br>接下來就能夠針對頁面是否含有 <code>meta.requiresAuth</code> 來進行驗證。<br><img src=\"https://i.imgur.com/pWl6r5A.png\" alt=\"\"></p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>依照以上步驟，應該就能正常撰寫驗證代碼了。針對這個問題，我查過很多資料，幾乎都會寫得相當複雜，是不能寫的簡單點嗎?QQ</p>","categories":["Vue"],"tags":["Vue"]},{"title":"Nuxt 中加入 ESLint","url":"/vue/20190919/410090658/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>使用 ESLint 來讓我們代碼具有一致姓，看了就是舒服，維護起來沒煩惱!!</p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>本篇將使用 ESLint 中的 <code>airbnb</code> 規範，先附上官網連結<br><a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"noopener\">eslint-config-airbnb</a><br>首先到 airbnb 的 github 找到安裝指令，但請別急著安裝，由於我們是使用 Nuxt 而不是 React ，所以這邊要點擊紅色箭頭處<br><img src=\"https://i.imgur.com/k4C6Haw.png\" alt=\"ESLint\"><br>來到 npm eslint-config-airbnb-base 網站，一般來說現在安裝 node.js 本身就會是 npm 5+ 的環境了，所以安裝指令就是輸入紅色箭頭處即可<br><img src=\"https://i.imgur.com/a7mGViT.png\" alt=\"eslint-config-airbnb-base\"></p><h2 id=\"配置設定檔\"><a href=\"#配置設定檔\" class=\"headerlink\" title=\"配置設定檔\"></a>配置設定檔</h2><p>到 <code>.eslintrc.js</code> 檔案，在 <code>extends</code> 加入 <code>airbnb-base</code> 。<br>除此之外，還需要加入以下設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">settings: &#123;</span><br><span class=\"line\">  &#39;import&#x2F;core-modules&#39;: [&#39;vue&#39;, &#39;vuex&#39;] &#x2F;&#x2F; these modules are included in nuxt.js</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><img src=\"https://i.imgur.com/EOxZoXx.png\" alt=\"\"></p><h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>這邊提供 VSCODE 設定檔，這樣就可以在文件儲存之後直接修正 ESLint 錯誤</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;eslint.validate&quot;: [</span><br><span class=\"line\">  &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;javascriptreact&quot;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;language&quot;: &quot;vue&quot;,</span><br><span class=\"line\">    &quot;autoFix&quot;: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;eslint.autoFixOnSave&quot;: true,</span><br><span class=\"line\">&quot;vetur.validation.template&quot;: false,</span><br></pre></td></tr></table></figure><p>註: VSCODE 套件要先安裝 <code>ESLint</code>、<code>vue</code>、<code>Vetur</code> 避免出錯。</p>","categories":["Vue"],"tags":["Vue"]},{"title":"Security - SSH keys 或 HTTPS 設定步驟","url":"/security/20210406/3632503978/","content":"<h2 id=\"SSH-Secure-Shell\"><a href=\"#SSH-Secure-Shell\" class=\"headerlink\" title=\"SSH (Secure Shell)\"></a>SSH (Secure Shell)</h2><p>SSH 是指遠端登入協定，特色在於處理作業採用加密機制，安全性高，可以避免資料竊取或外洩的問題。<br>以往在 Github 都是採用 <code>Https</code> 來 clone 專案下來，但此方式存在著安全性問題。<br>如果是 Windows 系統的話，可以搜尋 <code>認證管理員</code>，你就會在視窗中查到有關 Github 的帳號密碼或是暫時性的帳號。<br>然而，使用 <code>SSH</code> 則會避免這種狀況發生，接下來就依序產生 SSH 並綁定 Github 帳號吧。</p><h2 id=\"SSH-公私鑰\"><a href=\"#SSH-公私鑰\" class=\"headerlink\" title=\"SSH 公私鑰\"></a>SSH 公私鑰</h2><p>由於 Windows 在 1803 版提供了 OpenSSH 工具，所以不用額外安裝，可以使用 <code>CMD</code> or <code>git bash</code> 來輸入指令</p><ul><li>生成公私鑰<br>有兩種指令都可以生成公私鑰</li></ul><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C \"your_email@example.com\"</span><br><span class=\"line\">ssh-keygen -t rsa -b <span class=\"number\">4096</span> -C \"your_email@example.com\"</span><br></pre></td></tr></table></figure><ul><li>指定 SSH Keys 位置及名稱<br>會出現 Generating public/private rsa key pair.<br>接著可以指定 SSH keys 要放的位置，如果不設定，Windows 預設的位置是：/c/Users/user/.ssh/id_rsa<br>由於 SSH 可以生成多組，所以這邊可以替 SSH 重新命名，以便綁定不同 Github 帳號喔。</li></ul><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">/c/Users/user/.ssh/自定義名稱_rsa</span><br></pre></td></tr></table></figure><p>後續會詢問要不要設定密碼之類的，不想設定就一路 Enter 下去即可</p><ul><li><p>查看 SSH 檔案<br>查看 <code>C:\\Users\\user\\.ssh</code> 內是否以下兩個檔案:<br><code>id_rsa</code>：私鑰 private key，這是給自己用的。<br><code>id_rsa.pub</code>：公鑰 public key，這是給外部系統用的，綁定 Github 帳戶就是用這個</p></li><li><p>綁定 Github<br>Github 點頭像 &gt; Settings &gt; Account settings &gt; SSH and GPG keys<br>選擇 <code>News SSH key</code>，<code>title</code> 自行命名即可<br>將 <code>id_rsa.pub</code> 中的內容完整複製到 <code>Key</code> 輸入欄內(可以用 VSCODE 開啟 <code>id_rsa.pub</code>)<br>綁定後會寄封郵件，再重新整理就會看到 SSH 了</p></li><li><p>設定 SSH agent</p></li></ul><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>因為是首次連線，而且無法確認 host 主機的真實性，只知道這個即將連結的遠端主機的 SSH key fingerprint，是否確定要連線？</p><p><code>GitHub’s SSH key fingerprints</code>：官方提供比對的 fingerprint。<br>可以跟 <code>Git Bash</code> 出現的「Github RSA key fingerprint is SHA256…」<br>比對確認與 Github 官方提供的一樣之後，再輸入 yes。<br>沒意外的話，應該就可以連線了。</p><ul><li>SSH agent<br>開啟 SSH agent 的指令，成功的話會回傳 Agent pid 59566</li></ul><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure><p>把 key 加到 SSH agent 的指令，完成此步驟之後就可以在 Github 中使用 SSH 方式 Git clone 專案</p><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>檢查是否有現存的 SSH keys，有的話就不用重新產生啦！</p><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls -al ~/.ssh</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://tsengbatty.medium.com/git-%E8%B8%A9%E5%9D%91%E7%B4%80%E9%8C%84-%E4%BA%8C-git-clone-with-ssh-keys-%E6%88%96-https-%E8%A8%AD%E5%AE%9A%E6%AD%A5%E9%A9%9F-bdb721bd7cf2\" target=\"_blank\" rel=\"noopener\">Git 踩坑紀錄（二）git clone with SSH keys 或 HTTPS 設定步驟</a></p>","categories":["Security"],"tags":["SSH","Security"]},{"title":"Nuxt 加入 sitemap","url":"/vue/20191023/3642864122/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前言越來越難寫了，直接附上 wiki 連結比較快XD<br><a href=\"https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96\" target=\"_blank\" rel=\"noopener\">seo</a></p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p><a href=\"https://github.com/nuxt-community/sitemap-module\" target=\"_blank\" rel=\"noopener\">@nuxtjs/sitemap</a><br><a href=\"https://www.npmjs.com/package/@nuxtjs/sitemap\" target=\"_blank\" rel=\"noopener\">@nuxtjs/sitemap npm</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @nuxtjs&#x2F;sitemap</span><br></pre></td></tr></table></figure><h2 id=\"配置設定檔\"><a href=\"#配置設定檔\" class=\"headerlink\" title=\"配置設定檔\"></a>配置設定檔</h2><p>首先在 <code>modules</code> 加入套件</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; nuxt.config.js</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  modules: [</span><br><span class=\"line\">    &#39;@nuxtjs&#x2F;sitemap&#39;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  sitemap: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; custom configuration</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>設定非動態的 sitemap ，正常來說是可以不用寫得，套件會自己將靜態頁面加入 sitemap ， 但會少一些屬性設定(日期、網址)<br><img src=\"https://i.imgur.com/eN6Dz4K.png\" alt=\"nuxt config\"><br>加入後執行 <code>npm run dev</code> 將網址改成 <code>http://localhost:3000/sitemap.xml</code> ，前面的 port 如果不是 3000 記得要換成自己的呦!!<br>這時應該就會出現下圖了<br><img src=\"https://i.imgur.com/Fc6upVl.png\" alt=\"sitemap\"></p><h2 id=\"加入動態-sitemap\"><a href=\"#加入動態-sitemap\" class=\"headerlink\" title=\"加入動態 sitemap\"></a>加入動態 sitemap</h2><p>如果有些頁面的路由會有產品編號時，就需要設置動態 sitemap ，畢竟你不可能一筆一筆加入。<br>比如以下範例:<br><code>https://www.xxx.com.tw/xxx/productdetail/A0801-010</code><br>後面的 A0801-010 就是產品編號<br>那麼接下來就教大家如何動態加入 sitemap 吧。<br>註: 要先安裝 axios 套件<br>請參照以下圖片範例<br><img src=\"https://i.imgur.com/dZRw7xY.png\" alt=\"dynamic sitemap\"><br>分成幾步驟來說明:</p><ol><li><code>nuxt.config.js</code> 最上方要先加入 <code>import axios from &#39;axios&#39;;</code></li><li>routes 改成 function 形式</li><li>axios.all 搭配 axios.spread 處理多筆同步請求</li><li>第一筆 api 的回傳會是 userList， 有多筆的話 api 就往下加，而 userList 後面繼續加回傳參數，記得要逗號喔!!</li><li>data.xxx 這個 xxx 請使用唯一值，類似產品 id 這樣，因為這就等於有這一頁面。</li><li>針對每筆 sitemap 加入網址、日期等屬性</li><li>indexRoutes 將所有資料整合起來</li></ol><p>最後，在執行 npm run dev 後，開啟 <code>http://localhost:3000/sitemap.xml</code>，如果有成功看到以下圖片就代表成功囉!!<br><img src=\"https://i.imgur.com/ylnNKH3.png\" alt=\"dynamic sitemap\"></p>","categories":["Vue"],"tags":["Vue","SEO"]},{"title":"Visual Studio Code 同步設定","url":"/vscode/20201203/3486532201/","content":"<h2 id=\"介紹-Settings-Sync\"><a href=\"#介紹-Settings-Sync\" class=\"headerlink\" title=\"介紹 Settings Sync\"></a>介紹 Settings Sync</h2><p><code>Settings Sync</code> 主要有以下功能:</p><ul><li>藉由 <code>Github</code> 帳號及 <code>Gist</code> 做為設定檔的儲存與下載使用。</li><li>可以將設定檔分享給其他人使用</li><li>有快捷鍵可以進行上傳及下載設定檔</li></ul><p><code>Settings Sync</code> 同步哪些設定:</p><ul><li>Settings File</li><li>Keybinding File</li><li>Launch File</li><li>Snippets Folder</li><li>VSCode Extensions &amp; Extensions Configurations</li><li>Workspaces Folder</li></ul><h2 id=\"建立-Github-access-token\"><a href=\"#建立-Github-access-token\" class=\"headerlink\" title=\"建立 Github access token\"></a>建立 Github access token</h2><p>步驟: Github &gt; Settings &gt; <code>Develop Settings</code> &gt; Personal access token &gt; <code>Generate New Token</code><br>在 Token description 輸入設定檔敘述記憶，而在 scope 只需將 gist 打勾就好。<br><img src=\"https://i.imgur.com/84jAjNy.png\" alt=\"Generate New Token\"><br>建立會有一組 Personal access tokens，將其記錄下，離開此頁面後是無查詢的。<br><img src=\"https://i.imgur.com/A3Inw8N.png\" alt=\"Personal access tokens\"></p><h2 id=\"上傳設定檔\"><a href=\"#上傳設定檔\" class=\"headerlink\" title=\"上傳設定檔\"></a>上傳設定檔</h2><p>首先請在 vscode 安裝 Settings Sync 套件，先按下 <code>Shift + Alt + U</code>，這裡會有兩種狀況:</p><ol><li><p>在有 .git 檔中已經有綁定 github 帳號，這樣就不用輸入 <code>Personal access tokens</code>，會自動抓到該帳號並上傳設定</p></li><li><p>若沒有 .git 檔，則是會要求輸入 <code>Personal access tokens</code> 作為綁定帳號請求。</p></li></ol><p>完成後右下角會出現通知<br><img src=\"https://i.imgur.com/UOfGIxr.png\" alt=\"Gist ID\"></p><h2 id=\"檢查-Gist\"><a href=\"#檢查-Gist\" class=\"headerlink\" title=\"檢查 Gist\"></a>檢查 Gist</h2><p>會到 github git 查看剛剛是否有正確上傳設定<br><img src=\"https://i.imgur.com/M3EqZMH.png\" alt=\"Gist ID\"><br>點進 cloudSettings 會發現網址格式為<br><code>https://gist.github.com/{YourAccount}/{Gist ID}</code><br>而在其他裝置要同步的話，就必須要 <code>Gist ID</code> 即可</p><h2 id=\"下載設定檔\"><a href=\"#下載設定檔\" class=\"headerlink\" title=\"下載設定檔\"></a>下載設定檔</h2><p>到另一台電腦安裝 Settings Sync 並輸入 <code>Shift + Alt + D</code>，會要求輸入 <code>Gist ID</code>，但在此之前一樣會遇到兩個問題</p><ol><li><p>在有 .git 檔中已經有綁定 github 帳號，這樣就不用輸入 <code>Personal access tokens</code>，會自動下載設定。</p></li><li><p>若沒有 .git 檔，則是會要求輸入 <code>Personal access tokens</code> 作為綁定帳號請求，假設剛剛沒記起來的話，這裡會有點麻煩哩。</p></li></ol><p>如此一來，就完成兩台裝置都有共同的 Visual Studio Code 設定檔。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/@kodofish/%E8%AE%93%E4%BD%A0%E7%9A%84-visual-studio-code-%E5%90%8C%E6%AD%A5%E8%A8%AD%E5%AE%9A-4c5fe6a4d882\" target=\"_blank\" rel=\"noopener\">讓你的 Visual Studio Code 同步設定</a><br><a href=\"https://blog.csdn.net/weixin_42060896/article/details/105007965\" target=\"_blank\" rel=\"noopener\">vscode同步插件 sync</a></p>","categories":["VSCode"],"tags":["VSCode"]},{"title":"Vue - Chart.js 視覺化圖表","url":"/vue/20201201/1205289835/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>vue-chart.js</code> 是一款輕量級的視覺化圖表 library，本篇紀錄如何在 Vue、Nuxt 專案中使用。</p><h2 id=\"套件安裝\"><a href=\"#套件安裝\" class=\"headerlink\" title=\"套件安裝\"></a>套件安裝</h2><p><a href=\"https://vue-chartjs.org/\" target=\"_blank\" rel=\"noopener\">vue-chartjs 官方網站</a><br>安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vue-chartjs chart.js --save</span><br></pre></td></tr></table></figure><h2 id=\"Vue-專案引入-Nuxt相同\"><a href=\"#Vue-專案引入-Nuxt相同\" class=\"headerlink\" title=\"Vue 專案引入(Nuxt相同)\"></a>Vue 專案引入(Nuxt相同)</h2><h3 id=\"Chart-模組建立\"><a href=\"#Chart-模組建立\" class=\"headerlink\" title=\"Chart 模組建立\"></a>Chart 模組建立</h3><ul><li>首先到 <code>components</code> 建立 <code>Chart.vue</code>，並引入所需要用到的套件</li><li><code>vue-chart.js</code> 有提供 mixins 使用，並且藉由 <code>reactiveProp</code> 自動建立的 <code>chartData</code> 參數作為 <code>prop</code> 父子間的傳遞參數，同時也將 <code>watch</code> 添加在個 <code>prop</code> 上。意味著只要父層 <code>data</code> 有更新，圖表會自動更新，若不使用的話得寫以下的 <code>watch</code> 監視內容</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123; <span class=\"comment\">/* 只要 chartData 改變，就要重新渲染圖表 */</span></span><br><span class=\"line\">  chartData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$data._chart.destroy();  <span class=\"comment\">/* 官方文件 api 提供的 destroy() 方法 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderChart(<span class=\"keyword\">this</span>.chartData, <span class=\"keyword\">this</span>.options); <span class=\"comment\">/* 重新渲染圖表的 function */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  deep: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><p><code>Chart.vue</code> 元件範例:<br>注意:不要在 <code>Chart.vue</code> 引入 <code>&lt;template&gt;</code>標籤，否則 Vue 將會以此作為模板渲染，而不是從 <code>extend</code> 中獲取模板，將導致圖表生成錯誤。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"comment\">/* Line 為引入的圖表種類（可以參考官方文件) */</span></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"meta\"><span class=\"meta-keyword\">import</span> &#123;</span></span></span><br><span class=\"line\">  Line, mixins,</span><br><span class=\"line\"><span class=\"javascript\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue-chartjs'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> &#123; reactiveProp &#125; = mixins;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"keyword\">extends</span>: Line,</span></span><br><span class=\"line\">  mixins: [reactiveProp],</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      options: &#123; <span class=\"comment\">/* 圖表選項，各類圖表的 options 可能不盡相圖，可參照官方文件 */</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        responsive: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">        maintainAspectRatio: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\">        scales: &#123;</span><br><span class=\"line\">          yAxes: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              ticks: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                beginAtZero: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              gridLines: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">                display: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          xAxes: [&#123;</span><br><span class=\"line\">            gridLines: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">              display: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">async</span> mounted() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">this</span>.renderChart(<span class=\"keyword\">this</span>.chartData, <span class=\"keyword\">this</span>.options);</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"引入-Chart-模組\"><a href=\"#引入-Chart-模組\" class=\"headerlink\" title=\"引入 Chart 模組\"></a>引入 Chart 模組</h3><p>在要引入 <code>Chart.vue</code> 在 .vue 檔中撰寫以下內容<br>在 <code>&lt;select&gt;</code> 綁定 <code>v-model=&quot;chartdataloaded&quot;</code>，並利用下拉選單切換各種圖表內容。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父元件切換資料內容，並重新渲染圖表 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-model</span>=<span class=\"string\">\"chartdataloaded\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in test\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        測試 &#123;&#123; index &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">      Chart.vue 模組</span></span><br><span class=\"line\"><span class=\"comment\">      chart_loaded 是當圖表資料為 API 非同步行為時，增加的\"讀取後顯示判斷\"</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Chart\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Chart</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-if</span>=<span class=\"string\">\"chart_loaded\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:chart-data</span>=<span class=\"string\">\"chartdataloaded\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Chart <span class=\"keyword\">from</span> <span class=\"string\">'@/components/Chart.vue'</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Chart,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      chart_loaded: <span class=\"literal\">true</span>, <span class=\"comment\">/* 圖表讀取 */</span></span></span><br><span class=\"line\">      chartdataloaded: &#123;</span><br><span class=\"line\"><span class=\"actionscript\">        labels: [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'June'</span>, <span class=\"string\">'July'</span>],</span></span><br><span class=\"line\">        datasets: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\"><span class=\"actionscript\">            label: <span class=\"string\">'測試1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            borderColor: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">            pointBackgroundColor: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\">            borderWidth: 1,</span><br><span class=\"line\"><span class=\"actionscript\">            pointBorderColor: <span class=\"string\">'white'</span>,</span></span><br><span class=\"line\">            data: [40, 35, 10, 40, 39, 80, 40],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      test: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"><span class=\"actionscript\">          labels: [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'June'</span>, <span class=\"string\">'July'</span>],</span></span><br><span class=\"line\">          datasets: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"><span class=\"actionscript\">              label: <span class=\"string\">'測試1'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">              borderColor: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">              pointBackgroundColor: <span class=\"string\">'red'</span>,</span></span><br><span class=\"line\">              borderWidth: 1,</span><br><span class=\"line\"><span class=\"actionscript\">              pointBorderColor: <span class=\"string\">'white'</span>,</span></span><br><span class=\"line\">              data: [40, 35, 10, 40, 39, 80, 40],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"><span class=\"actionscript\">          labels: [<span class=\"string\">'January'</span>, <span class=\"string\">'February'</span>, <span class=\"string\">'March'</span>, <span class=\"string\">'April'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'June'</span>, <span class=\"string\">'July'</span>],</span></span><br><span class=\"line\">          datasets: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\"><span class=\"actionscript\">              label: <span class=\"string\">'測試2'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">              borderColor: <span class=\"string\">'skyblue'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">              pointBackgroundColor: <span class=\"string\">'skyblue'</span>,</span></span><br><span class=\"line\">              borderWidth: 1,</span><br><span class=\"line\"><span class=\"actionscript\">              pointBorderColor: <span class=\"string\">'white'</span>,</span></span><br><span class=\"line\">              data: [50, 45, 20, 50, 35, 70, 50],</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h2><p>以上僅介紹如何快速引入 Chart.js 圖表，<code>options</code> 還有很多東西可以設定，像是 <code>背景色</code>、<code>漸層色</code>、<code>互動模式</code>等等，這些在官方文件都有寫到，也不會太複雜，大概詳讀個一兩天就可以輕鬆上手了。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/@tiahi5914/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98-%E5%9C%A8-nuxt-js-%E5%B0%88%E6%A1%88%E4%B8%AD%E4%BD%BF%E7%94%A8-vue-chartjs-ca799560ba44\" target=\"_blank\" rel=\"noopener\">在 Nuxt.js 專案中使用 vue-chartjs</a><br><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/648100/\" target=\"_blank\" rel=\"noopener\">使用Vue.js和Chart.js製作絢麗多彩的圖表</a></p>","categories":["Vue"],"tags":["RWD","Vue","Nuxt","Chart.js"]},{"title":"Vue - 為什麼 Vue 元件中的 data 必須是一個 Function 函數","url":"/vue/20210522/146109072/","content":"<h2 id=\"元件與-data-用處\"><a href=\"#元件與-data-用處\" class=\"headerlink\" title=\"元件與 data 用處\"></a>元件與 data 用處</h2><p>Vue 的元件是被拿來給其他頁面<code>複用</code><br>假如 data 是一個對象，這也就表示作用域其實沒有分開，在使用時會互相影響。<br>因此，data 必須使用 Function 函數，來確保每個元件的 data 屬性值是不相影響的</p><h2 id=\"JS-特性-or-Vue-設計\"><a href=\"#JS-特性-or-Vue-設計\" class=\"headerlink\" title=\"JS 特性 or Vue 設計?\"></a>JS 特性 or Vue 設計?</h2><p>如果使用 Object 的話，也會發生每個元件 data 會互相影響。<br>在 JS 中只有 Function 能構成作用域，當 data 是一個函數，意味著每個元件有自己的作用域，相互獨立。</p><ul><li>當 data 是 Object 時:<br>兩個元件同時使用同一份 Object，修改其中一個屬性，也會同時修改到一個元件的。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;; </span><br><span class=\"line\">MyComponent.prototype.data = &#123;     </span><br><span class=\"line\">  a: <span class=\"number\">1</span>,     </span><br><span class=\"line\">  b: <span class=\"number\">2</span>, </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">const</span> component1 = <span class=\"keyword\">new</span> MyComponent(); </span><br><span class=\"line\"><span class=\"keyword\">const</span> component2 = <span class=\"keyword\">new</span> MyComponent(); </span><br><span class=\"line\"></span><br><span class=\"line\">component1.data.a === component2.data.a; <span class=\"comment\">// true;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">component1.data.b = <span class=\"number\">5</span>; </span><br><span class=\"line\">component2.data.b <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure><ul><li>當 data 是 Function:</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MyComponent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.data(); </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">MyComponent.prototype.data = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;         </span><br><span class=\"line\">    a: <span class=\"number\">1</span>,        </span><br><span class=\"line\">    b: <span class=\"number\">2</span>,     </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>由以上範例可知， Vue 元件中的 data 必須是 Function 是因為受到 <code>JavaScript 本身特性</code> 所得的結果。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ichigoichie.medium.com/%E5%BE%9E%E5%8E%9F%E5%9E%8B%E9%8F%88%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B-%E7%82%BA%E4%BB%80%E9%BA%BC-vue-%E7%B5%84%E4%BB%B6%E4%B8%AD%E7%9A%84-data-%E5%BF%85%E9%A0%88%E6%98%AF%E4%B8%80%E5%80%8B-function-%E5%87%BD%E6%95%B8-319d824655c8\" target=\"_blank\" rel=\"noopener\">從原型鏈的角度看 -&gt; 為什麼 Vue 組件中的 data 必須是一個 Function 函數</a></p>","categories":["Vue"],"tags":["Vue"]},{"title":"Vue - v-for 常見錯誤","url":"/vue/20201025/1105567443/","content":"<h2 id=\"常見錯誤-1-Uncaught-RangeError-Invalid-array-length\"><a href=\"#常見錯誤-1-Uncaught-RangeError-Invalid-array-length\" class=\"headerlink\" title=\"常見錯誤 1: Uncaught RangeError: Invalid array length\"></a>常見錯誤 1: Uncaught RangeError: Invalid array length</h2><h3 id=\"出現時機\"><a href=\"#出現時機\" class=\"headerlink\" title=\"出現時機\"></a>出現時機</h3><ul><li>提供的 <code>data</code> 陣列長度<code>小於 0</code></li><li>提供的 <code>data</code> 陣列長度<code>不為整數</code></li></ul><p>此狀況只須避免上述兩種情況免錯誤產生。</p><h2 id=\"常見錯誤-2-v-for-選單過多，造成渲染當機，導致畫面空白\"><a href=\"#常見錯誤-2-v-for-選單過多，造成渲染當機，導致畫面空白\" class=\"headerlink\" title=\"常見錯誤 2: v-for 選單過多，造成渲染當機，導致畫面空白\"></a>常見錯誤 2: <code>v-for</code> 選單過多，造成渲染當機，導致畫面空白</h2><h3 id=\"出現時機-1\"><a href=\"#出現時機-1\" class=\"headerlink\" title=\"出現時機\"></a>出現時機</h3><ul><li>用行動裝置瀏覽時，會發生畫面空白，連其他 DOM 元素都無法渲染</li></ul><p>發生上述情形，請檢查 <code>data</code> 陣列長度是否過多(ex:99999)，太多會導致渲染當機。<br>可參考以下範例，避免此情況發生<br></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"data.length &gt; 50\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in 50\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in data.length\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">:value</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上述的 <code>select</code>、<code>option</code> 只是參考，也可套用在其他標籤的迴圈上哩。<p></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://blog.csdn.net/violetjack0808/article/details/54892889\" target=\"_blank\" rel=\"noopener\">Uncaught RangeError: Invalid array length 问题解决</a><br><a href=\"https://blog.csdn.net/qq_39400014/article/details/105558394\" target=\"_blank\" rel=\"noopener\">RangeError: Invalid array length 问题解决</a></p>","categories":["Vue"],"tags":["Vue"]},{"title":"Vue - 使用 Vue I18n 打造多國語系網站環境","url":"/vue/20200214/849281213/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>當網站的用戶有外籍人士時，客戶本身可以透過 Google 自動翻譯來閱讀，但翻譯過後的內容極有可能不完整、不正確。所以必須由公司內部製作特定語系的版本，讓客戶可以在網站中做語言切換的功能。過往可能會搭配後端 + 網址參數來回傳特定版本的 <code>HTML</code>，類似這種有參數的網址出現，才能達成多語系切換。而 Vue I18n 則可以在完全不動到網址的前提下，做語系的切換，以下就來介紹使用方法吧!</p><h2 id=\"引入套件\"><a href=\"#引入套件\" class=\"headerlink\" title=\"引入套件\"></a>引入套件</h2><p><a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"noopener\">Vue</a><br><a href=\"https://kazupon.github.io/vue-i18n/\" target=\"_blank\" rel=\"noopener\">Vue I18n</a></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue-i18n/dist/vue-i18n.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"建立專案內容\"><a href=\"#建立專案內容\" class=\"headerlink\" title=\"建立專案內容\"></a>建立專案內容</h2><p>本次專案結構相當簡易，只需 <code>HTML</code>、<code>CSS</code>、<code>JS</code> 三支檔案就好。<br>會不使用 Vue-Cli 引入的原因是 <code>Vue I18n</code> 會在一開始就先引入並使用，而其他套件(ex:<code>Swper.js</code>)在其後引入也不會出現問題，所以沒有雷點就直接按照官方文件即可。<br>HTML 直接使用官方模板，跟簡單做一下切換按。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>vue-i18n-sample<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://unpkg.com/swiper/css/swiper.min.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./all.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/swiper/js/swiper.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Swiper --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-container\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-wrapper\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-slide\"</span>&gt;</span>Slide 1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-slide\"</span>&gt;</span>Slide 2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-slide\"</span>&gt;</span>Slide 3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-button-prev\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-button-next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"swiper-scrollbar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Swiper --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切換語言 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tw\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switchLan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switchLan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"ja\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"switchLan\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 切換語言 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; $t(\"message.hello\") &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue-i18n/dist/vue-i18n.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS 的部分就要注意囉!</p><ol><li>引入語言包，可以使用 <code>JSON</code> 檔來製作，並搭配其他編譯打包工具 <code>import</code> 進來。</li><li><code>new Vue({ i18n }).$mount(&#39;#app&#39;)</code> 必須比其他 <code>new XXX()</code> 寫法更早執行。</li><li>第2點就是本次不使用 Vue-Cli 的原因，畢竟會在 <code>main.js</code> 最先引入，而其他套件則會在元件內引入，所以就不會有問題勒。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 不能比 new Vue(&#123; i18n &#125;).$mount('#app') 還先執行 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 否則會無法輪播呦，但會切換語系 */</span></span><br><span class=\"line\"><span class=\"comment\">// var mySwiper = new Swiper('.swiper-container', &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   direction: 'horizontal',</span></span><br><span class=\"line\"><span class=\"comment\">//   loop: true,</span></span><br><span class=\"line\"><span class=\"comment\">//   navigation: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     nextEl: '.swiper-button-next',</span></span><br><span class=\"line\"><span class=\"comment\">//     prevEl: '.swiper-button-prev',</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 定義語言包物件 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> messages = &#123;</span><br><span class=\"line\">  tw: &#123;</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">      hello: <span class=\"string\">'您好'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  en: &#123;</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">      hello: <span class=\"string\">'hello world'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ja: &#123;</span><br><span class=\"line\">    message: &#123;</span><br><span class=\"line\">      hello: <span class=\"string\">'こんにちは、世界'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 預設語系 */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> locale = localStorage.getItem(<span class=\"string\">'locale'</span>) || <span class=\"string\">'tw'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 建立 VueI18n 實體 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> i18n = <span class=\"keyword\">new</span> VueI18n(&#123;</span><br><span class=\"line\">  locale,</span><br><span class=\"line\">  messages,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 必須比其他 JS 套件更前面就執行 */</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123; i18n &#125;).$mount(<span class=\"string\">'#app'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 切換網switchLang站語系 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">switchLang</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  locale = <span class=\"keyword\">this</span>.value;</span><br><span class=\"line\">  i18n.locale = locale</span><br><span class=\"line\">  localStorage.setItem(<span class=\"string\">'locale'</span>, locale)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> buttons = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.switchLan'</span>));</span><br><span class=\"line\">buttons.forEach(<span class=\"function\">(<span class=\"params\">button</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  button.addEventListener(<span class=\"string\">'click'</span>, switchLang);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mySwiper = <span class=\"keyword\">new</span> Swiper(<span class=\"string\">'.swiper-container'</span>, &#123;</span><br><span class=\"line\">  direction: <span class=\"string\">'horizontal'</span>,</span><br><span class=\"line\">  loop: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  navigation: &#123;</span><br><span class=\"line\">    nextEl: <span class=\"string\">'.swiper-button-next'</span>,</span><br><span class=\"line\">    prevEl: <span class=\"string\">'.swiper-button-prev'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.swiper-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: skyblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id=\"結尾-Demo\"><a href=\"#結尾-Demo\" class=\"headerlink\" title=\"結尾 Demo\"></a>結尾 Demo</h2><p>依照上面參考範例打開 <code>Web server</code> 就可以同時執行輪播以及切換語系囉。<br><a href=\"https://syj0905.github.io/vue-i18n-sample/\">Vue - 使用 Vue I18n 打造多國語系網站環境</a></p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://www.minwt.com/webdesign-dev/js/20464.html\" target=\"_blank\" rel=\"noopener\">VUE+VUE i18n 讓HTML靜態網頁，也支援多國語言</a><br><a href=\"https://dotblogs.com.tw/wasichris/2018/05/12/012517\" target=\"_blank\" rel=\"noopener\">使用 vue-i18n 打造多國語系網站環境</a></p>","categories":["Vue"],"tags":["JavaScript","w3HexSchool","Vue"]},{"title":"webpack 架設 - 自動生成 html","url":"/webpack/20190910/3044919679/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在前一篇文章中，我們是手動新增 <code>index.html</code> 檔在 <code>dist</code> 資料夾內，確實是很不方便。本次的插件為 <code>html-webpack-plugin</code>，可以在打包後自動生成 html 檔。</p><h2 id=\"安裝插件\"><a href=\"#安裝插件\" class=\"headerlink\" title=\"安裝插件\"></a>安裝插件</h2><p>在專案內輸入安裝指令<br><a href=\"https://github.com/jantimon/html-webpack-plugin\" target=\"_blank\" rel=\"noopener\">html-webpack-plugin</a></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>在 <code>webpack.config.js</code> 引入 <code>html-webpack-plugin</code>模塊，並在 <code>plugins</code> 加入，可參考下圖方式<br><img src=\"https://i.imgur.com/imuY4p6.png\" alt=\"\"><br><code>index.html</code> 的 head 相關設定可以參考官方文件，並直接在 plugin 內設定</p><h2 id=\"開始編譯\"><a href=\"#開始編譯\" class=\"headerlink\" title=\"開始編譯\"></a>開始編譯</h2><p>手動把 dist 資料夾清空，執行 <code>npm run dev</code>，這時會自動生成 html 也會帶入相關設定。<br>這邊要注意的一點是，請不要把 dist 資料夾也刪除了，後續會教大家如何自動生成 dist 資料夾!!<br><img src=\"https://i.imgur.com/isfVvRn.png\" alt=\"\"></p>","categories":["Webpack"],"tags":["Webpack"]},{"title":"Vue - 部署至 Google App Engine","url":"/vue/20200419/4265981960/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>請先建立好 <code>Google Cloud Platform</code> 服務，再開始以下內容。</p><h2 id=\"資料夾結構配置\"><a href=\"#資料夾結構配置\" class=\"headerlink\" title=\"資料夾結構配置\"></a>資料夾結構配置</h2><p>全部放在根目錄底下就對了。</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-public</span><br><span class=\"line\">-src</span><br><span class=\"line\">-package.json</span><br><span class=\"line\">-app.yaml</span><br><span class=\"line\">-app.js</span><br></pre></td></tr></table></figure><h2 id=\"設定檔建置\"><a href=\"#設定檔建置\" class=\"headerlink\" title=\"設定檔建置\"></a>設定檔建置</h2><p>由於 <code>Vue Cli</code> 在最後的 <code>build</code> 會產生 <code>index.html</code> 以及其他靜態資源，而部署到雲端主機時，必須讓雲端主機去執行這份打包檔案。所以，我們就必須在寫一份 <code>app.js</code> 腳本來跑這份靜態資源。<br>請參考以下範例:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(path.resolve(__dirname, <span class=\"string\">'./dist'</span>)));</span><br><span class=\"line\">app.get(<span class=\"string\">'*'</span>, (req, res) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> html = fs.readFileSync(path.resolve(__dirname, <span class=\"string\">'./dist/index.html'</span>), <span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\">  res.send(html);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(process.env.PORT || <span class=\"number\">9000</span>);</span><br></pre></td></tr></table></figure><h2 id=\"Google-Cloud-設定檔建置\"><a href=\"#Google-Cloud-設定檔建置\" class=\"headerlink\" title=\"Google Cloud 設定檔建置\"></a>Google Cloud 設定檔建置</h2><p>首先會建立一份 <code>app.yaml</code> 檔案，這是在部署時 <code>GAE</code> 所需要參考的設定，可以分為標準及彈性，標準設定會由 <code>GAE</code> 決定資源配置;若是彈性設定，則可以完全客製化資源(ex:<code>vcpu</code>、<code>記憶體</code>、<code>硬碟大小</code>等等)。<br>標準設定可以直接參考官方文件，以下連結<br><a href=\"https://cloud.google.com/appengine/docs/standard/nodejs/config/appref\" target=\"_blank\" rel=\"noopener\">app.yaml標準設定</a><br>那麼就是彈性設定的寫法哩，請參考以下範例:</p><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">runtime:</span> <span class=\"string\">nodejs</span></span><br><span class=\"line\"><span class=\"attr\">env:</span> <span class=\"string\">flex</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">manual_scaling:</span></span><br><span class=\"line\">  <span class=\"attr\">instances:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"attr\">cpu:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">memory_gb:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">disk_size_gb:</span> <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">handlers:</span></span><br><span class=\"line\">  <span class=\"comment\"># Serve all static files with urls ending with a file extension</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">/(.*\\..+)$</span> </span><br><span class=\"line\">  <span class=\"attr\">static_files:</span> <span class=\"string\">dist/\\1</span></span><br><span class=\"line\">  <span class=\"attr\">upload:</span> <span class=\"string\">dist/(.*\\..+)$</span></span><br><span class=\"line\">  <span class=\"comment\"># catch all handler to index.html</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">url:</span> <span class=\"string\">/.*</span></span><br><span class=\"line\">  <span class=\"attr\">static_files:</span> <span class=\"string\">dist/index.html</span></span><br><span class=\"line\">  <span class=\"attr\">upload:</span> <span class=\"string\">dist/index.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env_variables:</span></span><br><span class=\"line\">  <span class=\"attr\">HOST:</span> <span class=\"string\">'0.0.0.0'</span></span><br><span class=\"line\">  <span class=\"attr\">NODE_ENV:</span> <span class=\"string\">'production'</span></span><br><span class=\"line\">  <span class=\"attr\">VUE_APP_API_PATH:</span> <span class=\"string\">https://xxx.xxx.net</span></span><br></pre></td></tr></table></figure><ul><li>resources: 可以調整主機資源，可以部署不同資源的版本，當流量過大時即可在 <code>GAE</code> 後台直接切換版本，馬上做出應對。</li><li>runtime: 此處寫法與標準設定不同，請注意。</li><li>env: 彈性設定必須寫 flex。</li><li>env_variables: 若有相關變數必須在此設定。</li></ul><h2 id=\"package-json-設定\"><a href=\"#package-json-設定\" class=\"headerlink\" title=\"package.json 設定\"></a>package.json 設定</h2><p>將專案的 package.json 調整成以下範例，<br>必須要寫 <code>npm run start</code> 的指令，因為這是 GAE 部署時會執行的，而指定的腳本就是剛剛寫的 <code>app.js</code>。</p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"&gt;=10.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"serve\"</span>: <span class=\"string\">\"vue-cli-service serve\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"vue-cli-service build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node ./app.js\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h2 id=\"部署-GAE\"><a href=\"#部署-GAE\" class=\"headerlink\" title=\"部署 GAE\"></a>部署 GAE</h2><p>這邊首先要安裝 <code>Google Cloud SDK</code>，這其實就類似 <code>CMD</code>，讓我們可以輸入部署指令用的。<br>完成後執行程式，並開始以下部署步驟:</p><ol><li>移到專案資料夾</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd 專案資料夾路徑</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>初始化 <code>GAE</code></li></ol><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcloud init</span><br></pre></td></tr></table></figure><p>此時會詢問一些問題，像是要用哪個帳號、連接的伺服器地區(台灣、香港)，最後是要部署到哪一份專案的 <code>app engine</code>。<br>3. 執行部署指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcloud app deploy app.yaml</span><br></pre></td></tr></table></figure><p>輸入後有可能會出現 <code>python</code> 的錯誤代碼，不過沒關係，繼續讓他跑程式，若是沒有出現 <code>ERROR</code> 等字樣，並且完成所有程序，就代表已經部署至 <code>GAE</code> 囉。</p><h2 id=\"結尾-amp-驗證\"><a href=\"#結尾-amp-驗證\" class=\"headerlink\" title=\"結尾&amp;驗證\"></a>結尾&amp;驗證</h2><p>回到 <code>GCP</code> 後台選好專案，來到 <code>GAE</code>的管理頁面，部署完成後會給一組網址，像是<code>www-專案名稱.appspot.com</code>，之後就可以將 <code>DNS</code> 全部轉到此處。<br>這樣用戶就可以正常執行 <code>SPA</code> 網站囉。</p><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://medium.com/finn-programming-life/vue-vue-cli%E7%9A%84%E5%BB%BA%E7%BD%AE%E8%88%87%E9%83%A8%E7%BD%B2-8b996e1d2f6a\" target=\"_blank\" rel=\"noopener\">Vue + Vue-cli 建置與部署</a></p>","categories":["Vue"],"tags":["w3HexSchool","Vue"]},{"title":"webpack 架設 - 使用 SCSS 撰寫樣式","url":"/webpack/20190911/662263373/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>相信各位小夥伴多少都會使用 CSS 預處理器在撰寫樣式，像是 SASS 、Stylus、LESS、PostCSS 等等，但使用這類工具都必須經過編譯過後產生真正的 CSS 檔案才能夠讓瀏覽器渲染，因為瀏覽器只看得懂 CSS ，本篇教大家如何在 webpack 中使用 SCSS 吧!!</p><h2 id=\"安裝相關套件\"><a href=\"#安裝相關套件\" class=\"headerlink\" title=\"安裝相關套件\"></a>安裝相關套件</h2><p><a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a><br>輸入以下安裝指令</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install style-loader css-loader sass-loader node-sass mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure><p>註: <code>css-loader</code> sass 官網雖然沒有寫在安裝指令內，但還是必須要安裝，因為讓網站能夠顯示 CSS 樣式的插件<br><code>mini-css-extract-plugin</code> 是用來將每個由 webpack 產生內含有 css 的 js 檔案轉成 css 檔。<br>在 <code>src</code> 底下建立一個只存放 scss 的資料夾，並新增一隻檔案 all.scss，試著寫點 scss 代碼之後方便測試</p><h2 id=\"修改設定檔\"><a href=\"#修改設定檔\" class=\"headerlink\" title=\"修改設定檔\"></a>修改設定檔</h2><p>在 <code>webpack.config.js</code> 加入設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class=\"line\">const path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;.&#x2F;src&#x2F;main.js&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;src&#x2F;assets&#x2F;all.scss&#39;, &#x2F;&#x2F; scss 進入點</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;js&#x2F;main.bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.s[ac]ss$&#x2F;i,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#39;style-loader&#39;,</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          &#39;css-loader&#39;,</span><br><span class=\"line\">          &#39;sass-loader&#39;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: &#39;webpack demo&#39;,</span><br><span class=\"line\">      meta: &#123;</span><br><span class=\"line\">        &#39;Content-Security-Policy&#39;: &#123; &#39;http-equiv&#39;: &#39;X-UA-Compatible&#39;, &#39;content&#39;: &#39;ie&#x3D;edge&#39; &#125;,</span><br><span class=\"line\">        viewport: &#39;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&#39;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      filename: &#39;css&#x2F;all.css&#39;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>輸入 <code>npm run dev</code> 就能產出 css 資料夾以及檔案，並且也能正確顯示 CSS 樣式</p><h2 id=\"加入-sourcemap\"><a href=\"#加入-sourcemap\" class=\"headerlink\" title=\"加入 sourcemap\"></a>加入 sourcemap</h2><p>如果不使用 sorcemap 的話，在瀏覽器查看樣式時會看到合併完成的檔案，這會讓開發人員難以找出問題所在的原始檔案。使用 sourcemap 就能在開發時也清楚知道每一行的樣式是在哪隻 SCSS 檔案內。<br>相關設定可以在 <a href=\"https://github.com/webpack-contrib/sass-loader\" target=\"_blank\" rel=\"noopener\">sass-loader</a> 中搜尋 <code>Source maps</code> 就能找到啦!!<br>或是可以參考以下修改配置</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class=\"line\">const MiniCssExtractPlugin &#x3D; require(&#39;mini-css-extract-plugin&#39;);</span><br><span class=\"line\">const path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;.&#x2F;src&#x2F;main.js&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;src&#x2F;assets&#x2F;all.scss&#39;, &#x2F;&#x2F; scss 進入點</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;js&#x2F;main.bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: &#39;source-map&#39;, &#x2F;&#x2F; 必須要有</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: &#x2F;\\.s[ac]ss$&#x2F;i,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#39;style-loader&#39;,</span><br><span class=\"line\">          MiniCssExtractPlugin.loader,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#39;css-loader&#39;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              sourceMap: true, &#x2F;&#x2F; 開啟功能</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: &#39;sass-loader&#39;,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              sourceMap: true, &#x2F;&#x2F; 開啟功能</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: &#39;webpack demo&#39;,</span><br><span class=\"line\">      meta: &#123;</span><br><span class=\"line\">        &#39;Content-Security-Policy&#39;: &#123; &#39;http-equiv&#39;: &#39;X-UA-Compatible&#39;, &#39;content&#39;: &#39;ie&#x3D;edge&#39; &#125;,</span><br><span class=\"line\">        viewport: &#39;width&#x3D;device-width, initial-scale&#x3D;1, shrink-to-fit&#x3D;no&#39;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">      path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">      filename: &#39;css&#x2F;all.css&#39;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h2 id=\"模組化-SCSS\"><a href=\"#模組化-SCSS\" class=\"headerlink\" title=\"模組化 SCSS\"></a>模組化 SCSS</h2><p>首先必須要搞清楚相對路徑和絕對入境以及 SCSS 的進入點，在 <code>assets</code> 底下建立 <code>layout</code> 資料夾，並新增 <code>_layout.scss</code>，這是等一下要引入的檔案。<br>來到 <code>all.scss</code> 引入剛新建的 scss ，以下提供兩種引入方法，根據個人喜好則一即可</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@import &#39;.&#x2F;layout&#x2F;layout&#39;; &#x2F;&#x2F; 相對路徑 &#x3D;&gt; 進入點是 all.scss 這是根據 webpack 設定</span><br><span class=\"line\">@import &#39;src&#x2F;assets&#x2F;layout&#x2F;layout&#39;; &#x2F;&#x2F; 絕對路徑</span><br></pre></td></tr></table></figure><p><img src=\"https://i.imgur.com/HIXOTLD.png\" alt=\"\"></p><h2 id=\"引入第三方資源-Bootstrap\"><a href=\"#引入第三方資源-Bootstrap\" class=\"headerlink\" title=\"引入第三方資源 Bootstrap\"></a>引入第三方資源 Bootstrap</h2><p>相信各位小夥伴就算沒用也肯定有聽過 Bootstrap 這套 CSS 框架吧。該如何加進自己的專案內呢?跟著以下步驟一起學習吧!<br>首先使用 npm 來安裝 <code>Bootstrap</code></p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install bootstrap --save</span><br></pre></td></tr></table></figure><p>我習慣在 <code>assets</code> 底下多開一個資料夾 <code>vendors</code> 放入第三方資源，在其中創建 <code>_bootstrap.scss</code> 並引入 Bootstrap</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@import &#39;~bootstrap&#x2F;scss&#x2F;functions&#39;; &#x2F;&#x2F; (選) 若要客製化變數就必須引入</span><br><span class=\"line\">@import &#39;src&#x2F;asstes&#x2F;xxx&#x2F;variables&#39;; &#x2F;&#x2F; (選)可以引入自訂變數</span><br><span class=\"line\">@import &#39;~bootstrap&#x2F;scss&#x2F;bootstrap&#39;; &#x2F;&#x2F; (必)若單純引入這支檔案，內容就是整個 Bootstrap，但會無法客製化</span><br></pre></td></tr></table></figure><p><img src=\"https://i.imgur.com/BkDvbOg.png\" alt=\"\"></p><h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>執行 <code>npm run dev</code> 編譯檔案，查看 <code>all.css</code> ，若有出現 Bootstrap 的代碼就是成功囉!!沒有出現的話，請再次檢查檔案是否有誤。有任何問題都可以在底下留言，我會盡快回覆小夥伴們~~<br><img src=\"https://i.imgur.com/KFJ7VUE.png\" alt=\"\"></p>","categories":["Webpack"],"tags":["Webpack"]},{"title":"webpack 架設 - 安裝 webpack","url":"/webpack/20190910/906767867/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>webpack 是一個開源的前端打包工具。webpack 提供了前端開發缺乏的模組化開發方式，將各種靜態資源視為模組，並從它生成最佳化過的程式碼。(Wiki)<br><img src=\"https://i.imgur.com/5Z4PSWc.png\" alt=\"webpack\"></p><h2 id=\"npm-初始化\"><a href=\"#npm-初始化\" class=\"headerlink\" title=\"npm 初始化\"></a>npm 初始化</h2><p>首先進入專案目錄，執行 npm 初始化</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure><h2 id=\"安裝-webpack\"><a href=\"#安裝-webpack\" class=\"headerlink\" title=\"安裝 webpack\"></a>安裝 webpack</h2><p>官方文件有提到不建議在全局安裝 <code>webpack</code>，這會將你項目中的 webpack 鎖定到指定版本，並且在使用不同的 webpack 版本的項目中，可能會導致構建失敗。<br>在專案目錄下，採用本地安裝</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure><h2 id=\"配置-webpack\"><a href=\"#配置-webpack\" class=\"headerlink\" title=\"配置 webpack\"></a>配置 webpack</h2><p>在專案目錄下新增 <code>src</code> 資料夾，創建一個 webpack 進入點 <code>main.js</code>，先寫個測試代碼</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(&#39;webpack test&#39;);</span><br></pre></td></tr></table></figure><p>接著在根目錄新增 webpack 設定檔 <code>webpack.config.js</code>，寫個最基本的設定</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const path &#x3D; require(&#39;path&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  entry: &#39;.&#x2F;src&#x2F;main.js&#39;, &#x2F;&#x2F; 進入點</span><br><span class=\"line\">  output: &#123; &#x2F;&#x2F; 輸出點</span><br><span class=\"line\">    filename: &#39;main.bundle.js&#39;, &#x2F;&#x2F; 輸出的檔案</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;) &#x2F;&#x2F; 路徑</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><img src=\"https://i.imgur.com/wcCuNP1.png\" alt=\"\"><br>設定 <code>package.json</code> 則可以使用 npm 指令來執行編譯<br>在 <code>package.json</code> 的 <code>script</code> 新增自定義名稱，後面帶上 <code>webpack</code>，之後輸入以下範例即可打包</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure><h2 id=\"引入打包後的檔案\"><a href=\"#引入打包後的檔案\" class=\"headerlink\" title=\"引入打包後的檔案\"></a>引入打包後的檔案</h2><p>在 <code>dist</code> 資料夾內新增一個 <code>index.html</code> 檔，並引入 webpack 打包後的檔案<br><img src=\"https://i.imgur.com/jvVy0as.png\" alt=\"\"><br>重新開一個新的 vscode ，打開 dist 資料夾，用 web server 開啟就能在 <code>console</code> 看到 <code>main.js</code>　中寫的代碼了。<br><img src=\"https://i.imgur.com/1ucYvXW.png\" alt=\"\"></p>","categories":["Webpack"],"tags":["Webpack"]},{"title":"Express.js - 搭配 Firebase 實做 TodoList 代辦清單","url":"/nodejs/20200102/3010815534/","content":"<h2 id=\"專案建立\"><a href=\"#專案建立\" class=\"headerlink\" title=\"專案建立\"></a>專案建立</h2><p>首先直接輸入 <code>express --view=ejs</code> 快速產生資料夾結構</p><h2 id=\"取得-Firebase-服務\"><a href=\"#取得-Firebase-服務\" class=\"headerlink\" title=\"取得 Firebase 服務\"></a>取得 Firebase 服務</h2><p>建立一個新的 Firebase 資料庫後，進入資料庫設定點選 <code>服務帳戶</code> ，會看到下方有 <code>Admin SDK</code> 的使用方法，並且複製程式碼。<br>最重要的是點選最下方的 <code>產生新的私密金鑰</code> ，此檔案為一個 JSON 檔，內容稍後會用到。<br><img src=\"https://i.imgur.com/GmE3U6s.png\" alt=\"Firebase\"></p><h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>這裡除了要安裝 <code>Firebase admin</code> 的套件外，還需安裝 <code>dotenv</code> 這個環境變數套件。<br>先附上兩個套件的官方文件<br><a href=\"https://github.com/firebase/firebase-admin-node\" target=\"_blank\" rel=\"noopener\">firebase-admin github</a><br><a href=\"https://www.npmjs.com/package/firebase-admin\" target=\"_blank\" rel=\"noopener\">firebase-admin npm</a><br><a href=\"https://github.com/motdotla/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv github</a><br><a href=\"https://www.npmjs.com/package/dotenv\" target=\"_blank\" rel=\"noopener\">dotenv npm</a><br>來說說為什麼要 <code>dotenv</code> 這個套件吧!</p><ol><li>上一步下載回來的金鑰是一個 <code>express-todolist-firebase-adminsdk-02zaz-3d9472adf6.json</code> 這種形式的檔案，其內容包含以下資訊:<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"project_id\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private_key_id\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private_key\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"client_email\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"client_id\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"auth_uri\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"token_uri\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"auth_provider_x509_cert_url\"</span>: <span class=\"string\">\"xxx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"client_x509_cert_url\"</span>: <span class=\"string\">\"xxx\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>當然你可以將整個檔案重新命名並參考官方的引入方式，上一步複製程式碼區塊的地方<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serviceAccount = <span class=\"built_in\">require</span>(<span class=\"string\">\"path/to/serviceAccountKey.json\"</span>);</span><br></pre></td></tr></table></figure>不過也能透過 <code>環境變數</code> 的方式引入，更為簡潔，畢竟一個專案可能會有很多服務，每個都一個一個引入不是很好。</li><li>如果是一個服務就引入一個檔案的話，為了不上到版控，就必須不斷修改 <code>.gitignore</code> 的內容，而採用環境變數的方式就完全不需要在版控額外增加忽略的檔案</li></ol><p>說明完理由就直接輸入指令吧</p><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save dotenv firebase-admin</span><br></pre></td></tr></table></figure><h2 id=\"相關檔案建立\"><a href=\"#相關檔案建立\" class=\"headerlink\" title=\"相關檔案建立\"></a>相關檔案建立</h2><ul><li>在 <code>根目錄</code> 新增 <code>.env</code> 檔案，並根據 <code>私密金鑰</code> 的內容填入。<br>注意: 這裡的的雙引號可加可不加，但 <code>FIREBASE_PRIVATE_KEY</code> 一定要加，不然 <code>100%</code> 報錯，因為內容含有 <code>特殊符號</code>，詳細規則可參照以下官方說明<br><a href=\"https://github.com/motdotla/dotenv#rules\" target=\"_blank\" rel=\"noopener\">dotenv#rules</a><br>關於 <code>FIREBASE_PRIVATE_KEY</code> 加雙引號的寫法在部屬到 heroku 時會有問題，所以這邊就不加雙引號了。<br>但必須在引入的時候注意寫法，以下有提供範例程式碼<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FIREBASE_DATABASEURL&#x3D;xxx</span><br><span class=\"line\">FIREBASE_TYPE&#x3D;xxx</span><br><span class=\"line\">FIREBASE_PROJECT_ID&#x3D;xxx</span><br><span class=\"line\">FIREBASE_PRIVATE_KEY_ID&#x3D;xxx</span><br><span class=\"line\">FIREBASE_PRIVATE_KEY&#x3D;xxx</span><br><span class=\"line\">FIREBASE_CLIENT_EMAIL&#x3D;xxx</span><br><span class=\"line\">FIREBASE_CLIENT_ID&#x3D;xxx</span><br><span class=\"line\">FIREBASE_AUTH_URL&#x3D;xxx</span><br><span class=\"line\">FIREBASE_TOKEN_URL&#x3D;xxx</span><br><span class=\"line\">FIREBASE_AUTH_PROVIDE_X509_CERT_URL&#x3D;xxx</span><br><span class=\"line\">FIREBASE_CLIENT_X509_CERT_URL&#x3D;xxx</span><br></pre></td></tr></table></figure></li><li>在 <code>根目錄</code> 新增 <code>plugins</code> 資料夾並創建一支 <code>firebase-admin.js</code>，名稱隨你命名，只要最後路徑對就好<br>註: <code>private_key</code> 的寫法會不太一樣，原本應該是 <code>process.env.FIREBASE_PRIVATE_KEY</code>，必須修改成 <code>process.env.FIREBASE_PRIVATE_KEY.replace(/\\\\n/g, &#39;\\n&#39;)</code>，這樣部屬 heroku 才不會有問題。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firebaseAdmin = <span class=\"built_in\">require</span>(<span class=\"string\">'firebase-admin'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 引入 dotenv 檔</span></span><br><span class=\"line\"><span class=\"comment\">// process.env.變數名稱 指向 .env 中的 變數名稱</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'dotenv'</span>).config();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跟官方引入是一樣的，不過我們使用變數的方式</span></span><br><span class=\"line\">firebaseAdmin.initializeApp(&#123;</span><br><span class=\"line\">  credential: firebaseAdmin.credential.cert(&#123;</span><br><span class=\"line\">    type: process.env.FIREBASE_TYPE,</span><br><span class=\"line\">    project_id: process.env.FIREBASE_PROJECT_ID,</span><br><span class=\"line\">    private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,</span><br><span class=\"line\">    private_key: process.env.FIREBASE_PRIVATE_KEY.replace(<span class=\"regexp\">/\\\\n/g</span>, <span class=\"string\">'\\n'</span>),</span><br><span class=\"line\">    client_email: process.env.FIREBASE_CLIENT_EMAIL,</span><br><span class=\"line\">    client_id: process.env.FIREBASE_CLIENT_ID,</span><br><span class=\"line\">    auth_uri: process.env.FIREBASE_AUTH_URL,</span><br><span class=\"line\">    token_uri: process.env.FIREBASE_TOKEN_URL,</span><br><span class=\"line\">    auth_provider_x509_cert_url: process.env.FIREBASE_AUTH_PROVIDE_X509_CERT_URL,</span><br><span class=\"line\">    client_x509_cert_url: process.env.FIREBASE_CLIENT_X509_CERT_URL,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  databaseURL: process.env.FIREBASE_DATABASEURL,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> db = firebaseAdmin.database();</span><br><span class=\"line\"><span class=\"comment\">// 輸出模組給外部 router 使用</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = db;</span><br></pre></td></tr></table></figure></li></ul><h2 id=\"引入服務\"><a href=\"#引入服務\" class=\"headerlink\" title=\"引入服務\"></a>引入服務</h2><p>來到 <code>routes</code> 中的 <code>index.js</code> ，引入 Firebase 服務</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = express.Router();</span><br><span class=\"line\"><span class=\"keyword\">const</span> firebaseAdmin = <span class=\"built_in\">require</span>(<span class=\"string\">'../plugins/firebase-admin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Express'</span> &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(firebaseAdmin.ref());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>開啟服務 <code>npm start</code> 後輸入 <code>http://localhost:3000/</code>，假使 <code>CMD</code> 有回傳以下物件陣列格式就以正確接上!!<br><img src=\"https://i.imgur.com/Kbql7qk.png\" alt=\"firebaseAdmin.ref()\"></p><h2 id=\"前端模版建立\"><a href=\"#前端模版建立\" class=\"headerlink\" title=\"前端模版建立\"></a>前端模版建立</h2><p>來到 <code>public</code> 中的 <code>index.ejs</code>，並參考以下範例模版<br>註: 這裡我有引用 <code>axios</code> 的 CDN 服務，方便稍後撰寫 AJAX 更為簡潔，畢竟原生的 <code>xhr</code> 寫法在先前已經有提到過了，就不再贅述。</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">'stylesheet'</span> <span class=\"attr\">href</span>=<span class=\"string\">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Welcome to <span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"todoContent\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"todoContent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"send\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"送出\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todoList\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/all.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"後端製作-post-API\"><a href=\"#後端製作-post-API\" class=\"headerlink\" title=\"後端製作 post API\"></a>後端製作 post API</h2><p>利用 Express 快速建立 API，並搭配 Firebase 存儲前端傳過來的資料。<br>在 <code>routes</code> 中的 <code>index.js</code> 加入以下範例代碼段落:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/addTodo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接收前端傳進來的資料</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">    content: req.body.content,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  firebaseAdmin.ref(<span class=\"string\">'todo'</span>).push(todo)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 顯示資料庫內容，並回傳前端 AJAX response 物件</span></span><br><span class=\"line\">      firebaseAdmin.ref(<span class=\"string\">'todo'</span>).once(<span class=\"string\">'value'</span>, (dataSnapshot) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 將物件形式的 dataSnapshot.val() 中的 key 加入到各自的物件內，並重組陣列回傳</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> listData = [];</span><br><span class=\"line\">        dataSnapshot.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> itemInfo = item.val(); <span class=\"comment\">// item.val() 為一物件</span></span><br><span class=\"line\">          itemInfo.key = item.key; <span class=\"comment\">// item.key 取唯一值</span></span><br><span class=\"line\">          listData.push(itemInfo);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        res.send(&#123;</span><br><span class=\"line\">          success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          result: listData,</span><br><span class=\"line\">          message: <span class=\"string\">'資料儲存成功'</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>由於 Firebase 回傳的是物件格式，在迴圈上必須使用 <code>for in</code> 寫法，而不是 <code>forEach()</code>。<br>本人不是很喜歡 <code>for in</code> 在去組字串(ex:data[i])，所以使用 <code>forEach()</code> 將同一份資料包在物件內，並回傳前端一個 <code>陣列</code>格式。</p><h2 id=\"前端串接資料\"><a href=\"#前端串接資料\" class=\"headerlink\" title=\"前端串接資料\"></a>前端串接資料</h2><p>後端已經開好 API 了，接下來就在前端提取輸入內容再利用 AJAX 傳進後端<br>隨後，後端與資料庫將會寫入資料並回傳 <code>response</code> 給前端做渲染<br>在 <code>public/javascripts</code> 中建立 <code>all.js</code>，並可參考以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DOM 宣告</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> todoContent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#todoContent'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> send = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#send'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> todoList = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.todoList'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">send.addEventListener(<span class=\"string\">'click'</span>, sendTodo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendTodo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> todo = &#123;</span><br><span class=\"line\">    content: todoContent.value,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// AJAX</span></span><br><span class=\"line\">  axios.post(<span class=\"string\">'/addTodo'</span>, todo)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      renderTodo(res.data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderTodo</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data.success) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataList = data.result;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">    dataList.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      str += <span class=\"string\">`&lt;li data-key=\"<span class=\"subst\">$&#123; item.key &#125;</span>\"&gt;<span class=\"subst\">$&#123; item.content &#125;</span>&lt;/li&gt;`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    todoList.innerHTML = str;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>此處會使用 <code>data-key</code> 來保存唯一值，因為刪除功能時會需要這個唯一值跟 Firebase 刪除資料。<br>依照以上操作，已經可以開啟 <code>http://localhost:3000/</code> 輸入一些代辦事項，並渲染出來。<br>接下來會介紹如何在 <code>進頁面</code> 時就跟資料庫取得資料並渲染代辦事項以及刪除代辦事項。</p><h2 id=\"後端修正-get-API\"><a href=\"#後端修正-get-API\" class=\"headerlink\" title=\"後端修正 get API\"></a>後端修正 get API</h2><p>進站時的路由是 <code>/</code>，所以就必須修改 <code>routes/index</code> 中的 <code>router.get(&#39;/&#39;)</code>。<br>修改範例請參照以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  firebaseAdmin.ref(<span class=\"string\">'todo'</span>).once(<span class=\"string\">'value'</span>, dataSnapshot =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listData = [];</span><br><span class=\"line\">    dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> itemInfo = item.val(); <span class=\"comment\">// item.val() 為一物件</span></span><br><span class=\"line\">      itemInfo.key = item.key; <span class=\"comment\">// item.key 取唯一值</span></span><br><span class=\"line\">      listData.push(itemInfo);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.render(<span class=\"string\">'index'</span>, &#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Express'</span>,</span><br><span class=\"line\">      listData, <span class=\"comment\">// 省略寫法</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"模版修改\"><a href=\"#模版修改\" class=\"headerlink\" title=\"模版修改\"></a>模版修改</h2><p>一開始進站就要渲染的話必須先將 DOM 結構寫出，在根據後端 GET 進來的資料做 <code>forEach()</code> 渲染資料列表。<br>修改位置 <code>index.ejs</code> 中的 <code>ul</code>，可參照以下範例:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todoList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">listData.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">item</span>)&#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-key</span>=<span class=\"string\">\"&lt;%= item.key %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">item.content</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span>;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成以上修正後，已經可以在進入首頁後看到資料顯示。<br>接下來就是最後的刪除部分囉，一起加油吧!!</p><h2 id=\"後端新增-delete-API\"><a href=\"#後端新增-delete-API\" class=\"headerlink\" title=\"後端新增 delete API\"></a>後端新增 delete API</h2><p>刪除 API 的路由是 <code>/deleteTodo</code>，在 <code>routes/index</code> 中新增 <code>router.delete(&#39;/deleteTodo&#39;)</code>。<br>修改範例請參照以下程式碼:</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.delete(<span class=\"string\">'/deleteTodo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 接收前端傳 todo 的 id 進來</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> todoId = req.body.id;</span><br><span class=\"line\">  firebaseAdmin.ref(<span class=\"string\">'todo'</span>).child(todoId).remove()</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      firebaseAdmin.ref(<span class=\"string\">'todo'</span>).once(<span class=\"string\">'value'</span>, (dataSnapshot) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> listData = [];</span><br><span class=\"line\">        dataSnapshot.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> itemInfo = item.val(); <span class=\"comment\">// item.val() 為一物件</span></span><br><span class=\"line\">          itemInfo.key = item.key; <span class=\"comment\">// item.key 取唯一值</span></span><br><span class=\"line\">          listData.push(itemInfo);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        res.send(&#123;</span><br><span class=\"line\">          success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          result: listData,</span><br><span class=\"line\">          message: <span class=\"string\">'刪除成功'</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h2 id=\"前端模版修正\"><a href=\"#前端模版修正\" class=\"headerlink\" title=\"前端模版修正\"></a>前端模版修正</h2><p>多了刪除功能，代表也要有按鈕綁定事件。所以模版也需要一併修正</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"todoList\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> <span class=\"attr\">listData.forEach</span>(<span class=\"attr\">function</span>(<span class=\"attr\">item</span>)&#123; %&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-key</span>=<span class=\"string\">\"&lt;%= item.key %&gt;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%=</span> <span class=\"attr\">item.content</span> %&gt;</span> - </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">data-key</span>=<span class=\"string\">\"&lt;%= item.key %&gt;\"</span>&gt;</span>刪除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125;) %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=\"前端串接刪除資料\"><a href=\"#前端串接刪除資料\" class=\"headerlink\" title=\"前端串接刪除資料\"></a>前端串接刪除資料</h2><p>在 <code>all.js</code> 中加入刪除功能</p><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">todoList.addEventListener(<span class=\"string\">'click'</span>, deleteTodo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteTodo</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target.nodeName !== <span class=\"string\">'A'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    id: e.target.dataset.key,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  axios.delete(<span class=\"string\">'/deleteTodo'</span>, &#123;</span><br><span class=\"line\">    data,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      renderTodo(res.data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>終於完成最簡易的前後端串接代辦清單啦!!</p>","categories":["Nodejs"],"tags":["JavaScript","Express","Nodejs","Firebase"]},{"title":"Vue - props.sync 使用方式","url":"/vue/20210522/2943028405/","content":"<h2 id=\"props-、-emit-操作\"><a href=\"#props-、-emit-操作\" class=\"headerlink\" title=\"props 、 emit 操作\"></a>props 、 emit 操作</h2><p><code>index.vue</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropsEmit</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:city</span>=<span class=\"string\">\"city\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:city-list</span>=<span class=\"string\">\"cityList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  @<span class=\"attr\">handle_city</span>=<span class=\"string\">\"update_city\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PropsEmit <span class=\"keyword\">from</span> <span class=\"string\">'@/components/PropsEmit.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    PropsEmit,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      city: <span class=\"string\">'台北市'</span>,</span><br><span class=\"line\">      cityList: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">1</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'台北市'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">2</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'新北市'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    update_city(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.city = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><code>PropsEmit.vue</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"propsCity\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in cityList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:value</span>=<span class=\"string\">\"item.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      &#123;&#123; item.name &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    city: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cityList: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    propsCity: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.city;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'handle_city'</span>, val);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>一般寫法就必須在 <code>父元件</code> 註冊一個自定義事件 <code>@handle_city</code> 來給 <code>子元件</code> 使用 emit 呼叫 <code>handle_city</code>，並且是執行 <code>handle_city</code> 所綁定的 method，進而達成父子元件雙向綁定。</p><p>來看看 .sync 是如何操作的</p><h2 id=\"sync-操作\"><a href=\"#sync-操作\" class=\"headerlink\" title=\".sync 操作\"></a>.sync 操作</h2><p><code>index.vue</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; city &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PropsSync</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:city.sync</span>=<span class=\"string\">\"city\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">:city-list.sync</span>=<span class=\"string\">\"cityList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> PropsSync <span class=\"keyword\">from</span> <span class=\"string\">'@/components/PropsSync.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    PropsSync,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      city: <span class=\"string\">'台北市'</span>,</span><br><span class=\"line\">      cityList: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">1</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'台北市'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">2</span>,</span><br><span class=\"line\">          name: <span class=\"string\">'新北市'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p><code>PropsSync.vue</code></p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"synCity\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">option</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in cityList\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"item.id\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:value</span>=<span class=\"string\">\"item.name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        &#123;&#123; item.name &#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    city: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cityList: &#123;</span><br><span class=\"line\">      type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    synCity: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.city;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"keyword\">set</span>(val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'update:city'</span>, val);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><p>由此可知，使用 <code>.sync</code> 就可以少寫 <code>@handle_city=&quot;update_city&quot;</code> 和 <code>methods 事件</code>，所以 .sync 就是幫我們做了以下的事情:</p><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">v-bind:city=\"city\" v-on:update:city=\"city = $event”</span><br></pre></td></tr></table></figure><h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><p><a href=\"https://ichigoichie.medium.com/%E5%BE%9E%E5%8E%9F%E5%9E%8B%E9%8F%88%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B-%E7%82%BA%E4%BB%80%E9%BA%BC-vue-%E7%B5%84%E4%BB%B6%E4%B8%AD%E7%9A%84-data-%E5%BF%85%E9%A0%88%E6%98%AF%E4%B8%80%E5%80%8B-function-%E5%87%BD%E6%95%B8-319d824655c8\" target=\"_blank\" rel=\"noopener\">從原型鏈的角度看 -&gt; 為什麼 Vue 組件中的 data 必須是一個 Function 函數</a></p>","categories":["Vue"],"tags":["Vue"]}]